/**
 * NM-1.0
 */

import * as Gjs from './Gjs';
import * as Gio from './Gio-2.0';
import * as GObject from './GObject-2.0';
import * as GLib from './GLib-2.0';

export enum TODO_80211Mode {
    UNKNOWN,
    ADHOC,
    INFRA,
    AP,
    MESH,
}
export enum ActiveConnectionState {
    UNKNOWN,
    ACTIVATING,
    ACTIVATED,
    DEACTIVATING,
    DEACTIVATED,
}
export enum ActiveConnectionStateReason {
    UNKNOWN,
    NONE,
    USER_DISCONNECTED,
    DEVICE_DISCONNECTED,
    SERVICE_STOPPED,
    IP_CONFIG_INVALID,
    CONNECT_TIMEOUT,
    SERVICE_START_TIMEOUT,
    SERVICE_START_FAILED,
    NO_SECRETS,
    LOGIN_FAILED,
    CONNECTION_REMOVED,
    DEPENDENCY_FAILED,
    DEVICE_REALIZE_FAILED,
    DEVICE_REMOVED,
}
export enum AgentManagerError {
    FAILED,
    PERMISSIONDENIED,
    INVALIDIDENTIFIER,
    NOTREGISTERED,
    NOSECRETS,
    USERCANCELED,
}
export enum Capability {
    TEAM,
    OVS,
}
export enum ClientError {
    FAILED,
    MANAGER_NOT_RUNNING,
    OBJECT_CREATION_FAILED,
}
export enum ClientPermission {
    NONE,
    ENABLE_DISABLE_NETWORK,
    ENABLE_DISABLE_WIFI,
    ENABLE_DISABLE_WWAN,
    ENABLE_DISABLE_WIMAX,
    SLEEP_WAKE,
    NETWORK_CONTROL,
    WIFI_SHARE_PROTECTED,
    WIFI_SHARE_OPEN,
    SETTINGS_MODIFY_SYSTEM,
    SETTINGS_MODIFY_OWN,
    SETTINGS_MODIFY_HOSTNAME,
    SETTINGS_MODIFY_GLOBAL_DNS,
    RELOAD,
    CHECKPOINT_ROLLBACK,
    ENABLE_DISABLE_STATISTICS,
    ENABLE_DISABLE_CONNECTIVITY_CHECK,
    WIFI_SCAN,
    LAST,
}
export enum ClientPermissionResult {
    UNKNOWN,
    YES,
    AUTH,
    NO,
}
export enum ConnectionError {
    FAILED,
    SETTINGNOTFOUND,
    PROPERTYNOTFOUND,
    PROPERTYNOTSECRET,
    MISSINGSETTING,
    INVALIDSETTING,
    MISSINGPROPERTY,
    INVALIDPROPERTY,
}
export enum ConnectionMultiConnect {
    DEFAULT,
    SINGLE,
    MANUAL_MULTIPLE,
    MULTIPLE,
}
export enum ConnectivityState {
    UNKNOWN,
    NONE,
    PORTAL,
    LIMITED,
    FULL,
}
export enum CryptoError {
    FAILED,
    INVALID_DATA,
    INVALID_PASSWORD,
    UNKNOWN_CIPHER,
    DECRYPTION_FAILED,
    ENCRYPTION_FAILED,
}
export enum DeviceError {
    FAILED,
    CREATIONFAILED,
    INVALIDCONNECTION,
    INCOMPATIBLECONNECTION,
    NOTACTIVE,
    NOTSOFTWARE,
    NOTALLOWED,
    SPECIFICOBJECTNOTFOUND,
    VERSIONIDMISMATCH,
    MISSINGDEPENDENCIES,
    INVALIDARGUMENT,
}
export enum DeviceState {
    UNKNOWN,
    UNMANAGED,
    UNAVAILABLE,
    DISCONNECTED,
    PREPARE,
    CONFIG,
    NEED_AUTH,
    IP_CONFIG,
    IP_CHECK,
    SECONDARIES,
    ACTIVATED,
    DEACTIVATING,
    FAILED,
}
export enum DeviceStateReason {
    NONE,
    UNKNOWN,
    NOW_MANAGED,
    NOW_UNMANAGED,
    CONFIG_FAILED,
    IP_CONFIG_UNAVAILABLE,
    IP_CONFIG_EXPIRED,
    NO_SECRETS,
    SUPPLICANT_DISCONNECT,
    SUPPLICANT_CONFIG_FAILED,
    SUPPLICANT_FAILED,
    SUPPLICANT_TIMEOUT,
    PPP_START_FAILED,
    PPP_DISCONNECT,
    PPP_FAILED,
    DHCP_START_FAILED,
    DHCP_ERROR,
    DHCP_FAILED,
    SHARED_START_FAILED,
    SHARED_FAILED,
    AUTOIP_START_FAILED,
    AUTOIP_ERROR,
    AUTOIP_FAILED,
    MODEM_BUSY,
    MODEM_NO_DIAL_TONE,
    MODEM_NO_CARRIER,
    MODEM_DIAL_TIMEOUT,
    MODEM_DIAL_FAILED,
    MODEM_INIT_FAILED,
    GSM_APN_FAILED,
    GSM_REGISTRATION_NOT_SEARCHING,
    GSM_REGISTRATION_DENIED,
    GSM_REGISTRATION_TIMEOUT,
    GSM_REGISTRATION_FAILED,
    GSM_PIN_CHECK_FAILED,
    FIRMWARE_MISSING,
    REMOVED,
    SLEEPING,
    CONNECTION_REMOVED,
    USER_REQUESTED,
    CARRIER,
    CONNECTION_ASSUMED,
    SUPPLICANT_AVAILABLE,
    MODEM_NOT_FOUND,
    BT_FAILED,
    GSM_SIM_NOT_INSERTED,
    GSM_SIM_PIN_REQUIRED,
    GSM_SIM_PUK_REQUIRED,
    GSM_SIM_WRONG,
    INFINIBAND_MODE,
    DEPENDENCY_FAILED,
    BR2684_FAILED,
    MODEM_MANAGER_UNAVAILABLE,
    SSID_NOT_FOUND,
    SECONDARY_CONNECTION_FAILED,
    DCB_FCOE_FAILED,
    TEAMD_CONTROL_FAILED,
    MODEM_FAILED,
    MODEM_AVAILABLE,
    SIM_PIN_INCORRECT,
    NEW_ACTIVATION,
    PARENT_CHANGED,
    PARENT_MANAGED_CHANGED,
    OVSDB_FAILED,
    IP_ADDRESS_DUPLICATE,
    IP_METHOD_UNSUPPORTED,
    SRIOV_CONFIGURATION_FAILED,
    PEER_NOT_FOUND,
}
export enum DeviceType {
    UNKNOWN,
    ETHERNET,
    WIFI,
    UNUSED1,
    UNUSED2,
    BT,
    OLPC_MESH,
    WIMAX,
    MODEM,
    INFINIBAND,
    BOND,
    VLAN,
    ADSL,
    BRIDGE,
    GENERIC,
    TEAM,
    TUN,
    IP_TUNNEL,
    MACVLAN,
    VXLAN,
    VETH,
    MACSEC,
    DUMMY,
    PPP,
    OVS_INTERFACE,
    OVS_PORT,
    OVS_BRIDGE,
    WPAN,
    /* 6LOWPAN (invalid, starts with a number) */
    WIREGUARD,
    WIFI_P2P,
    VRF,
}
export enum IPTunnelMode {
    UNKNOWN,
    IPIP,
    GRE,
    SIT,
    ISATAP,
    VTI,
    IP6IP6,
    IPIP6,
    IP6GRE,
    VTI6,
    GRETAP,
    IP6GRETAP,
}
export enum ManagerError {
    FAILED,
    PERMISSIONDENIED,
    UNKNOWNCONNECTION,
    UNKNOWNDEVICE,
    CONNECTIONNOTAVAILABLE,
    CONNECTIONNOTACTIVE,
    CONNECTIONALREADYACTIVE,
    DEPENDENCYFAILED,
    ALREADYASLEEPORAWAKE,
    ALREADYENABLEDORDISABLED,
    UNKNOWNLOGLEVEL,
    UNKNOWNLOGDOMAIN,
    INVALIDARGUMENTS,
    MISSINGPLUGIN,
}
export enum Metered {
    UNKNOWN,
    YES,
    NO,
    GUESS_YES,
    GUESS_NO,
}
export enum RollbackResult {
    OK,
    ERR_NO_DEVICE,
    ERR_DEVICE_UNMANAGED,
    ERR_FAILED,
}
export enum SecretAgentError {
    FAILED,
    PERMISSIONDENIED,
    INVALIDCONNECTION,
    USERCANCELED,
    AGENTCANCELED,
    NOSECRETS,
}
export enum Setting8021xCKFormat {
    UNKNOWN,
    X509,
    RAW_KEY,
    PKCS12,
}
export enum Setting8021xCKScheme {
    UNKNOWN,
    BLOB,
    PATH,
    PKCS11,
}
export enum SettingCompareFlags {
    EXACT,
    FUZZY,
    IGNORE_ID,
    IGNORE_SECRETS,
    IGNORE_AGENT_OWNED_SECRETS,
    IGNORE_NOT_SAVED_SECRETS,
    DIFF_RESULT_WITH_DEFAULT,
    DIFF_RESULT_NO_DEFAULT,
    IGNORE_TIMESTAMP,
}
export enum SettingConnectionAutoconnectSlaves {
    DEFAULT,
    NO,
    YES,
}
export enum SettingConnectionLldp {
    DEFAULT,
    DISABLE,
    ENABLE_RX,
}
export enum SettingConnectionLlmnr {
    DEFAULT,
    NO,
    RESOLVE,
    YES,
}
export enum SettingConnectionMdns {
    DEFAULT,
    NO,
    RESOLVE,
    YES,
}
export enum SettingDiffResult {
    UNKNOWN,
    IN_A,
    IN_B,
    IN_A_DEFAULT,
    IN_B_DEFAULT,
}
export enum SettingIP6ConfigAddrGenMode {
    EUI64,
    STABLE_PRIVACY,
}
export enum SettingIP6ConfigPrivacy {
    UNKNOWN,
    DISABLED,
    PREFER_PUBLIC_ADDR,
    PREFER_TEMP_ADDR,
}
export enum SettingMacRandomization {
    DEFAULT,
    NEVER,
    ALWAYS,
}
export enum SettingMacsecMode {
    PSK,
    EAP,
}
export enum SettingMacsecValidation {
    DISABLE,
    CHECK,
    STRICT,
}
export enum SettingMacvlanMode {
    UNKNOWN,
    VEPA,
    BRIDGE,
    PRIVATE,
    PASSTHRU,
    SOURCE,
}
export enum SettingProxyMethod {
    NONE,
    AUTO,
}
export enum SettingSerialParity {
    NONE,
    EVEN,
    ODD,
}
export enum SettingTunMode {
    UNKNOWN,
    TUN,
    TAP,
}
export enum SettingWirelessPowersave {
    DEFAULT,
    IGNORE,
    DISABLE,
    ENABLE,
}
export enum SettingWirelessSecurityFils {
    DEFAULT,
    DISABLE,
    OPTIONAL,
    REQUIRED,
}
export enum SettingWirelessSecurityPmf {
    DEFAULT,
    DISABLE,
    OPTIONAL,
    REQUIRED,
}
export enum SettingsError {
    FAILED,
    PERMISSIONDENIED,
    NOTSUPPORTED,
    INVALIDCONNECTION,
    READONLYCONNECTION,
    UUIDEXISTS,
    INVALIDHOSTNAME,
    INVALIDARGUMENTS,
}
export enum SriovVFVlanProtocol {
    /* 1Q (invalid, starts with a number) */
    /* 1AD (invalid, starts with a number) */
}
export enum State {
    UNKNOWN,
    ASLEEP,
    DISCONNECTED,
    DISCONNECTING,
    CONNECTING,
    CONNECTED_LOCAL,
    CONNECTED_SITE,
    CONNECTED_GLOBAL,
}
export enum Ternary {
    DEFAULT,
    FALSE,
    TRUE,
}
export enum UtilsSecurityType {
    INVALID,
    NONE,
    STATIC_WEP,
    LEAP,
    DYNAMIC_WEP,
    WPA_PSK,
    WPA_ENTERPRISE,
    WPA2_PSK,
    WPA2_ENTERPRISE,
    SAE,
    OWE,
}
export enum VlanPriorityMap {
    INGRESS_MAP,
    EGRESS_MAP,
}
export enum VpnConnectionState {
    UNKNOWN,
    PREPARE,
    NEED_AUTH,
    CONNECT,
    IP_CONFIG_GET,
    ACTIVATED,
    FAILED,
    DISCONNECTED,
}
export enum VpnConnectionStateReason {
    UNKNOWN,
    NONE,
    USER_DISCONNECTED,
    DEVICE_DISCONNECTED,
    SERVICE_STOPPED,
    IP_CONFIG_INVALID,
    CONNECT_TIMEOUT,
    SERVICE_START_TIMEOUT,
    SERVICE_START_FAILED,
    NO_SECRETS,
    LOGIN_FAILED,
    CONNECTION_REMOVED,
}
export enum VpnPluginError {
    FAILED,
    STARTINGINPROGRESS,
    ALREADYSTARTED,
    STOPPINGINPROGRESS,
    ALREADYSTOPPED,
    WRONGSTATE,
    BADARGUMENTS,
    LAUNCHFAILED,
    INVALIDCONNECTION,
    INTERACTIVENOTSUPPORTED,
}
export enum VpnPluginFailure {
    LOGIN_FAILED,
    CONNECT_FAILED,
    BAD_IP_CONFIG,
}
export enum VpnServiceState {
    UNKNOWN,
    INIT,
    SHUTDOWN,
    STARTING,
    STARTED,
    STOPPING,
    STOPPED,
}
export enum WepKeyType {
    UNKNOWN,
    KEY,
    PASSPHRASE,
}
export enum WimaxNspNetworkType {
    UNKNOWN,
    HOME,
    PARTNER,
    ROAMING_PARTNER,
}
export enum TODO_80211ApFlags {
    NONE,
    PRIVACY,
    WPS,
    WPS_PBC,
    WPS_PIN,
}
export enum TODO_80211ApSecurityFlags {
    NONE,
    PAIR_WEP40,
    PAIR_WEP104,
    PAIR_TKIP,
    PAIR_CCMP,
    GROUP_WEP40,
    GROUP_WEP104,
    GROUP_TKIP,
    GROUP_CCMP,
    KEY_MGMT_PSK,
    KEY_MGMT_802_1X,
    KEY_MGMT_SAE,
    KEY_MGMT_OWE,
    KEY_MGMT_OWE_TM,
}
export enum ActivationStateFlags {
    NONE,
    IS_MASTER,
    IS_SLAVE,
    LAYER2_READY,
    IP4_READY,
    IP6_READY,
    MASTER_HAS_SLAVES,
    LIFETIME_BOUND_TO_PROFILE_VISIBILITY,
    EXTERNAL,
}
export enum BluetoothCapabilities {
    NONE,
    DUN,
    NAP,
}
export enum CheckpointCreateFlags {
    NONE,
    DESTROY_ALL,
    DELETE_NEW_CONNECTIONS,
    DISCONNECT_NEW_DEVICES,
    ALLOW_OVERLAPPING,
}
export enum ClientInstanceFlags {
    NONE,
    NO_AUTO_FETCH_PERMISSIONS,
}
export enum ConnectionSerializationFlags {
    ALL,
    NO_SECRETS,
    ONLY_SECRETS,
    WITH_SECRETS_AGENT_OWNED,
}
export enum DeviceCapabilities {
    NONE,
    NM_SUPPORTED,
    CARRIER_DETECT,
    IS_SOFTWARE,
    SRIOV,
}
export enum DeviceInterfaceFlags {
    UP,
    LOWER_UP,
    CARRIER,
}
export enum DeviceModemCapabilities {
    NONE,
    POTS,
    CDMA_EVDO,
    GSM_UMTS,
    LTE,
}
export enum DeviceWifiCapabilities {
    NONE,
    CIPHER_WEP40,
    CIPHER_WEP104,
    CIPHER_TKIP,
    CIPHER_CCMP,
    WPA,
    RSN,
    AP,
    ADHOC,
    FREQ_VALID,
    FREQ_2GHZ,
    FREQ_5GHZ,
    MESH,
    IBSS_RSN,
}
export enum DhcpHostnameFlags {
    NONE,
    FQDN_SERV_UPDATE,
    FQDN_ENCODED,
    FQDN_NO_UPDATE,
    FQDN_CLEAR_FLAGS,
}
export enum IPAddressCmpFlags {
    NONE,
    WITH_ATTRS,
}
export enum IPRoutingRuleAsStringFlags {
    NONE,
    AF_INET,
    AF_INET6,
    VALIDATE,
}
export enum IPTunnelFlags {
    NONE,
    IP6_IGN_ENCAP_LIMIT,
    IP6_USE_ORIG_TCLASS,
    IP6_USE_ORIG_FLOWLABEL,
    IP6_MIP6_DEV,
    IP6_RCV_DSCP_COPY,
    IP6_USE_ORIG_FWMARK,
}
export enum ManagerReloadFlags {
    CONF,
    DNS_RC,
    DNS_FULL,
}
export enum SecretAgentCapabilities {
    NONE,
    VPN_HINTS,
    LAST,
}
export enum SecretAgentGetSecretsFlags {
    NONE,
    ALLOW_INTERACTION,
    REQUEST_NEW,
    USER_REQUESTED,
    WPS_PBC_ACTIVE,
    ONLY_SYSTEM,
    NO_ERRORS,
}
export enum Setting8021xAuthFlags {
    NONE,
    TLS_1_0_DISABLE,
    TLS_1_1_DISABLE,
    TLS_1_2_DISABLE,
    ALL,
}
export enum SettingDcbFlags {
    NONE,
    ENABLE,
    ADVERTISE,
    WILLING,
}
export enum SettingSecretFlags {
    NONE,
    AGENT_OWNED,
    NOT_SAVED,
    NOT_REQUIRED,
}
export enum SettingWiredWakeOnLan {
    PHY,
    UNICAST,
    MULTICAST,
    BROADCAST,
    ARP,
    MAGIC,
    DEFAULT,
    IGNORE,
}
export enum SettingWirelessSecurityWpsMethod {
    DEFAULT,
    DISABLED,
    AUTO,
    PBC,
    PIN,
}
export enum SettingWirelessWakeOnWLan {
    ANY,
    DISCONNECT,
    MAGIC,
    GTK_REKEY_FAILURE,
    EAP_IDENTITY_REQUEST,
    /* 4WAY_HANDSHAKE (invalid, starts with a number) */
    RFKILL_RELEASE,
    TCP,
    ALL,
    DEFAULT,
    IGNORE,
}
export enum SettingsAddConnection2Flags {
    NONE,
    TO_DISK,
    IN_MEMORY,
    BLOCK_AUTOCONNECT,
}
export enum SettingsConnectionFlags {
    NONE,
    UNSAVED,
    NM_GENERATED,
    VOLATILE,
    EXTERNAL,
}
export enum SettingsUpdate2Flags {
    NONE,
    TO_DISK,
    IN_MEMORY,
    IN_MEMORY_DETACHED,
    IN_MEMORY_ONLY,
    VOLATILE,
    BLOCK_AUTOCONNECT,
    NO_REAPPLY,
}
export enum TeamLinkWatcherArpPingFlags {
    VALIDATE_ACTIVE,
    VALIDATE_INACTIVE,
    SEND_ALWAYS,
}
export enum VlanFlags {
    REORDER_HEADERS,
    GVRP,
    LOOSE_BINDING,
    MVRP,
}
export enum VpnEditorPluginCapability {
    NONE,
    IMPORT,
    EXPORT,
    IPV6,
}
export const ACCESS_POINT_BSSID: string
export const ACCESS_POINT_FLAGS: string
export const ACCESS_POINT_FREQUENCY: string
export const ACCESS_POINT_HW_ADDRESS: string
export const ACCESS_POINT_LAST_SEEN: string
export const ACCESS_POINT_MAX_BITRATE: string
export const ACCESS_POINT_MODE: string
export const ACCESS_POINT_RSN_FLAGS: string
export const ACCESS_POINT_SSID: string
export const ACCESS_POINT_STRENGTH: string
export const ACCESS_POINT_WPA_FLAGS: string
export const ACTIVE_CONNECTION_CONNECTION: string
export const ACTIVE_CONNECTION_DEFAULT: string
export const ACTIVE_CONNECTION_DEFAULT6: string
export const ACTIVE_CONNECTION_DEVICES: string
export const ACTIVE_CONNECTION_DHCP4_CONFIG: string
export const ACTIVE_CONNECTION_DHCP6_CONFIG: string
export const ACTIVE_CONNECTION_ID: string
export const ACTIVE_CONNECTION_IP4_CONFIG: string
export const ACTIVE_CONNECTION_IP6_CONFIG: string
export const ACTIVE_CONNECTION_MASTER: string
export const ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH: string
export const ACTIVE_CONNECTION_STATE: string
export const ACTIVE_CONNECTION_STATE_FLAGS: string
export const ACTIVE_CONNECTION_TYPE: string
export const ACTIVE_CONNECTION_UUID: string
export const ACTIVE_CONNECTION_VPN: string
export const BRIDGE_VLAN_VID_MAX: number
export const BRIDGE_VLAN_VID_MIN: number
export const CHECKPOINT_CREATED: string
export const CHECKPOINT_DEVICES: string
export const CHECKPOINT_ROLLBACK_TIMEOUT: string
export const CLIENT_ACTIVATING_CONNECTION: string
export const CLIENT_ACTIVE_CONNECTIONS: string
export const CLIENT_ACTIVE_CONNECTION_ADDED: string
export const CLIENT_ACTIVE_CONNECTION_REMOVED: string
export const CLIENT_ALL_DEVICES: string
export const CLIENT_ANY_DEVICE_ADDED: string
export const CLIENT_ANY_DEVICE_REMOVED: string
export const CLIENT_CAN_MODIFY: string
export const CLIENT_CAPABILITIES: string
export const CLIENT_CHECKPOINTS: string
export const CLIENT_CONNECTIONS: string
export const CLIENT_CONNECTION_ADDED: string
export const CLIENT_CONNECTION_REMOVED: string
export const CLIENT_CONNECTIVITY: string
export const CLIENT_CONNECTIVITY_CHECK_AVAILABLE: string
export const CLIENT_CONNECTIVITY_CHECK_ENABLED: string
export const CLIENT_CONNECTIVITY_CHECK_URI: string
export const CLIENT_DBUS_CONNECTION: string
export const CLIENT_DBUS_NAME_OWNER: string
export const CLIENT_DEVICES: string
export const CLIENT_DEVICE_ADDED: string
export const CLIENT_DEVICE_REMOVED: string
export const CLIENT_DNS_CONFIGURATION: string
export const CLIENT_DNS_MODE: string
export const CLIENT_DNS_RC_MANAGER: string
export const CLIENT_HOSTNAME: string
export const CLIENT_INSTANCE_FLAGS: string
export const CLIENT_METERED: string
export const CLIENT_NETWORKING_ENABLED: string
export const CLIENT_NM_RUNNING: string
export const CLIENT_PERMISSIONS_STATE: string
export const CLIENT_PERMISSION_CHANGED: string
export const CLIENT_PRIMARY_CONNECTION: string
export const CLIENT_STARTUP: string
export const CLIENT_STATE: string
export const CLIENT_VERSION: string
export const CLIENT_WIMAX_ENABLED: string
export const CLIENT_WIMAX_HARDWARE_ENABLED: string
export const CLIENT_WIRELESS_ENABLED: string
export const CLIENT_WIRELESS_HARDWARE_ENABLED: string
export const CLIENT_WWAN_ENABLED: string
export const CLIENT_WWAN_HARDWARE_ENABLED: string
export const CONNECTION_CHANGED: string
export const CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD: string
export const CONNECTION_SECRETS_CLEARED: string
export const CONNECTION_SECRETS_UPDATED: string
export const DBUS_INTERFACE: string
export const DBUS_INTERFACE_DNS_MANAGER: string
export const DBUS_INTERFACE_SETTINGS: string
export const DBUS_INTERFACE_SETTINGS_CONNECTION: string
export const DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS: string
export const DBUS_INTERFACE_VPN: string
export const DBUS_INTERFACE_VPN_CONNECTION: string
export const DBUS_INVALID_VPN_CONNECTION: string
export const DBUS_NO_ACTIVE_VPN_CONNECTION: string
export const DBUS_NO_VPN_CONNECTIONS: string
export const DBUS_PATH: string
export const DBUS_PATH_AGENT_MANAGER: string
export const DBUS_PATH_DNS_MANAGER: string
export const DBUS_PATH_SECRET_AGENT: string
export const DBUS_PATH_SETTINGS: string
export const DBUS_PATH_SETTINGS_CONNECTION: string
export const DBUS_PATH_VPN: string
export const DBUS_PATH_VPN_CONNECTION: string
export const DBUS_SERVICE: string
export const DBUS_VPN_ALREADY_STARTED: string
export const DBUS_VPN_ALREADY_STOPPED: string
export const DBUS_VPN_BAD_ARGUMENTS: string
export const DBUS_VPN_ERROR_PREFIX: string
export const DBUS_VPN_INTERACTIVE_NOT_SUPPORTED: string
export const DBUS_VPN_SIGNAL_CONNECT_FAILED: string
export const DBUS_VPN_SIGNAL_IP4_CONFIG: string
export const DBUS_VPN_SIGNAL_IP_CONFIG_BAD: string
export const DBUS_VPN_SIGNAL_LAUNCH_FAILED: string
export const DBUS_VPN_SIGNAL_LOGIN_BANNER: string
export const DBUS_VPN_SIGNAL_LOGIN_FAILED: string
export const DBUS_VPN_SIGNAL_STATE_CHANGE: string
export const DBUS_VPN_SIGNAL_VPN_CONFIG_BAD: string
export const DBUS_VPN_STARTING_IN_PROGRESS: string
export const DBUS_VPN_STOPPING_IN_PROGRESS: string
export const DBUS_VPN_WRONG_STATE: string
export const DEVICE_6LOWPAN_HW_ADDRESS: string
export const DEVICE_6LOWPAN_PARENT: string
export const DEVICE_ACTIVE_CONNECTION: string
export const DEVICE_ADSL_CARRIER: string
export const DEVICE_AUTOCONNECT: string
export const DEVICE_AVAILABLE_CONNECTIONS: string
export const DEVICE_BOND_CARRIER: string
export const DEVICE_BOND_HW_ADDRESS: string
export const DEVICE_BOND_SLAVES: string
export const DEVICE_BRIDGE_CARRIER: string
export const DEVICE_BRIDGE_HW_ADDRESS: string
export const DEVICE_BRIDGE_SLAVES: string
export const DEVICE_BT_CAPABILITIES: string
export const DEVICE_BT_HW_ADDRESS: string
export const DEVICE_BT_NAME: string
export const DEVICE_CAPABILITIES: string
export const DEVICE_DEVICE_TYPE: string
export const DEVICE_DHCP4_CONFIG: string
export const DEVICE_DHCP6_CONFIG: string
export const DEVICE_DRIVER: string
export const DEVICE_DRIVER_VERSION: string
export const DEVICE_DUMMY_HW_ADDRESS: string
export const DEVICE_ETHERNET_CARRIER: string
export const DEVICE_ETHERNET_HW_ADDRESS: string
export const DEVICE_ETHERNET_PERMANENT_HW_ADDRESS: string
export const DEVICE_ETHERNET_S390_SUBCHANNELS: string
export const DEVICE_ETHERNET_SPEED: string
export const DEVICE_FIRMWARE_MISSING: string
export const DEVICE_FIRMWARE_VERSION: string
export const DEVICE_GENERIC_HW_ADDRESS: string
export const DEVICE_GENERIC_TYPE_DESCRIPTION: string
export const DEVICE_HW_ADDRESS: string
export const DEVICE_INFINIBAND_CARRIER: string
export const DEVICE_INFINIBAND_HW_ADDRESS: string
export const DEVICE_INTERFACE: string
export const DEVICE_INTERFACE_FLAGS: string
export const DEVICE_IP4_CONFIG: string
export const DEVICE_IP4_CONNECTIVITY: string
export const DEVICE_IP6_CONFIG: string
export const DEVICE_IP6_CONNECTIVITY: string
export const DEVICE_IP_INTERFACE: string
export const DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT: string
export const DEVICE_IP_TUNNEL_FLAGS: string
export const DEVICE_IP_TUNNEL_FLOW_LABEL: string
export const DEVICE_IP_TUNNEL_INPUT_KEY: string
export const DEVICE_IP_TUNNEL_LOCAL: string
export const DEVICE_IP_TUNNEL_MODE: string
export const DEVICE_IP_TUNNEL_OUTPUT_KEY: string
export const DEVICE_IP_TUNNEL_PARENT: string
export const DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY: string
export const DEVICE_IP_TUNNEL_REMOTE: string
export const DEVICE_IP_TUNNEL_TOS: string
export const DEVICE_IP_TUNNEL_TTL: string
export const DEVICE_LLDP_NEIGHBORS: string
export const DEVICE_MACSEC_CIPHER_SUITE: string
export const DEVICE_MACSEC_ENCODING_SA: string
export const DEVICE_MACSEC_ENCRYPT: string
export const DEVICE_MACSEC_ES: string
export const DEVICE_MACSEC_HW_ADDRESS: string
export const DEVICE_MACSEC_ICV_LENGTH: string
export const DEVICE_MACSEC_INCLUDE_SCI: string
export const DEVICE_MACSEC_PARENT: string
export const DEVICE_MACSEC_PROTECT: string
export const DEVICE_MACSEC_REPLAY_PROTECT: string
export const DEVICE_MACSEC_SCB: string
export const DEVICE_MACSEC_SCI: string
export const DEVICE_MACSEC_VALIDATION: string
export const DEVICE_MACSEC_WINDOW: string
export const DEVICE_MACVLAN_HW_ADDRESS: string
export const DEVICE_MACVLAN_MODE: string
export const DEVICE_MACVLAN_NO_PROMISC: string
export const DEVICE_MACVLAN_PARENT: string
export const DEVICE_MACVLAN_TAP: string
export const DEVICE_MANAGED: string
export const DEVICE_METERED: string
export const DEVICE_MODEM_APN: string
export const DEVICE_MODEM_CURRENT_CAPABILITIES: string
export const DEVICE_MODEM_DEVICE_ID: string
export const DEVICE_MODEM_MODEM_CAPABILITIES: string
export const DEVICE_MODEM_OPERATOR_CODE: string
export const DEVICE_MTU: string
export const DEVICE_NM_PLUGIN_MISSING: string
export const DEVICE_OLPC_MESH_ACTIVE_CHANNEL: string
export const DEVICE_OLPC_MESH_COMPANION: string
export const DEVICE_OLPC_MESH_HW_ADDRESS: string
export const DEVICE_OVS_BRIDGE_SLAVES: string
export const DEVICE_OVS_PORT_SLAVES: string
export const DEVICE_PATH: string
export const DEVICE_PHYSICAL_PORT_ID: string
export const DEVICE_PRODUCT: string
export const DEVICE_REAL: string
export const DEVICE_STATE: string
export const DEVICE_STATE_REASON: string
export const DEVICE_TEAM_CARRIER: string
export const DEVICE_TEAM_CONFIG: string
export const DEVICE_TEAM_HW_ADDRESS: string
export const DEVICE_TEAM_SLAVES: string
export const DEVICE_TUN_GROUP: string
export const DEVICE_TUN_HW_ADDRESS: string
export const DEVICE_TUN_MODE: string
export const DEVICE_TUN_MULTI_QUEUE: string
export const DEVICE_TUN_NO_PI: string
export const DEVICE_TUN_OWNER: string
export const DEVICE_TUN_VNET_HDR: string
export const DEVICE_UDI: string
export const DEVICE_VENDOR: string
export const DEVICE_VLAN_CARRIER: string
export const DEVICE_VLAN_HW_ADDRESS: string
export const DEVICE_VLAN_PARENT: string
export const DEVICE_VLAN_VLAN_ID: string
export const DEVICE_VRF_TABLE: string
export const DEVICE_VXLAN_AGEING: string
export const DEVICE_VXLAN_CARRIER: string
export const DEVICE_VXLAN_DST_PORT: string
export const DEVICE_VXLAN_GROUP: string
export const DEVICE_VXLAN_HW_ADDRESS: string
export const DEVICE_VXLAN_ID: string
export const DEVICE_VXLAN_L2MISS: string
export const DEVICE_VXLAN_L3MISS: string
export const DEVICE_VXLAN_LEARNING: string
export const DEVICE_VXLAN_LIMIT: string
export const DEVICE_VXLAN_LOCAL: string
export const DEVICE_VXLAN_PARENT: string
export const DEVICE_VXLAN_PROXY: string
export const DEVICE_VXLAN_RSC: string
export const DEVICE_VXLAN_SRC_PORT_MAX: string
export const DEVICE_VXLAN_SRC_PORT_MIN: string
export const DEVICE_VXLAN_TOS: string
export const DEVICE_VXLAN_TTL: string
export const DEVICE_WIFI_ACCESS_POINTS: string
export const DEVICE_WIFI_ACTIVE_ACCESS_POINT: string
export const DEVICE_WIFI_BITRATE: string
export const DEVICE_WIFI_CAPABILITIES: string
export const DEVICE_WIFI_HW_ADDRESS: string
export const DEVICE_WIFI_LAST_SCAN: string
export const DEVICE_WIFI_MODE: string
export const DEVICE_WIFI_P2P_HW_ADDRESS: string
export const DEVICE_WIFI_P2P_PEERS: string
export const DEVICE_WIFI_P2P_WFDIES: string
export const DEVICE_WIFI_PERMANENT_HW_ADDRESS: string
export const DEVICE_WIMAX_ACTIVE_NSP: string
export const DEVICE_WIMAX_BSID: string
export const DEVICE_WIMAX_CENTER_FREQUENCY: string
export const DEVICE_WIMAX_CINR: string
export const DEVICE_WIMAX_HW_ADDRESS: string
export const DEVICE_WIMAX_NSPS: string
export const DEVICE_WIMAX_RSSI: string
export const DEVICE_WIMAX_TX_POWER: string
export const DEVICE_WIREGUARD_FWMARK: string
export const DEVICE_WIREGUARD_LISTEN_PORT: string
export const DEVICE_WIREGUARD_PUBLIC_KEY: string
export const DEVICE_WPAN_HW_ADDRESS: string
export const DHCP_CONFIG_FAMILY: string
export const DHCP_CONFIG_OPTIONS: string
export const ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_RX: string
export const ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_TX: string
export const ETHTOOL_OPTNAME_COALESCE_PKT_RATE_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_PKT_RATE_LOW: string
export const ETHTOOL_OPTNAME_COALESCE_RX_FRAMES: string
export const ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_IRQ: string
export const ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_LOW: string
export const ETHTOOL_OPTNAME_COALESCE_RX_USECS: string
export const ETHTOOL_OPTNAME_COALESCE_RX_USECS_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_RX_USECS_IRQ: string
export const ETHTOOL_OPTNAME_COALESCE_RX_USECS_LOW: string
export const ETHTOOL_OPTNAME_COALESCE_SAMPLE_INTERVAL: string
export const ETHTOOL_OPTNAME_COALESCE_STATS_BLOCK_USECS: string
export const ETHTOOL_OPTNAME_COALESCE_TX_FRAMES: string
export const ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_IRQ: string
export const ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_LOW: string
export const ETHTOOL_OPTNAME_COALESCE_TX_USECS: string
export const ETHTOOL_OPTNAME_COALESCE_TX_USECS_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_TX_USECS_IRQ: string
export const ETHTOOL_OPTNAME_COALESCE_TX_USECS_LOW: string
export const ETHTOOL_OPTNAME_FEATURE_ESP_HW_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_ESP_TX_CSUM_HW_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_FCOE_MTU: string
export const ETHTOOL_OPTNAME_FEATURE_GRO: string
export const ETHTOOL_OPTNAME_FEATURE_GSO: string
export const ETHTOOL_OPTNAME_FEATURE_HIGHDMA: string
export const ETHTOOL_OPTNAME_FEATURE_HW_TC_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_L2_FWD_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_LOOPBACK: string
export const ETHTOOL_OPTNAME_FEATURE_LRO: string
export const ETHTOOL_OPTNAME_FEATURE_NTUPLE: string
export const ETHTOOL_OPTNAME_FEATURE_RX: string
export const ETHTOOL_OPTNAME_FEATURE_RXHASH: string
export const ETHTOOL_OPTNAME_FEATURE_RXVLAN: string
export const ETHTOOL_OPTNAME_FEATURE_RX_ALL: string
export const ETHTOOL_OPTNAME_FEATURE_RX_FCS: string
export const ETHTOOL_OPTNAME_FEATURE_RX_GRO_HW: string
export const ETHTOOL_OPTNAME_FEATURE_RX_UDP_TUNNEL_PORT_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_RX_VLAN_FILTER: string
export const ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_FILTER: string
export const ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_HW_PARSE: string
export const ETHTOOL_OPTNAME_FEATURE_SG: string
export const ETHTOOL_OPTNAME_FEATURE_TLS_HW_RECORD: string
export const ETHTOOL_OPTNAME_FEATURE_TLS_HW_TX_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_TSO: string
export const ETHTOOL_OPTNAME_FEATURE_TX: string
export const ETHTOOL_OPTNAME_FEATURE_TXVLAN: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_FCOE_CRC: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV4: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV6: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IP_GENERIC: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_SCTP: string
export const ETHTOOL_OPTNAME_FEATURE_TX_ESP_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_FCOE_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_GRE_CSUM_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_GRE_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_GSO_PARTIAL: string
export const ETHTOOL_OPTNAME_FEATURE_TX_GSO_ROBUST: string
export const ETHTOOL_OPTNAME_FEATURE_TX_IPXIP4_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_IPXIP6_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_NOCACHE_COPY: string
export const ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER: string
export const ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER_FRAGLIST: string
export const ETHTOOL_OPTNAME_FEATURE_TX_SCTP_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_TCP6_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_TCP_ECN_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_TCP_MANGLEID_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_TCP_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_UDP_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_CSUM_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_VLAN_STAG_HW_INSERT: string
export const ETHTOOL_OPTNAME_RING_RX: string
export const ETHTOOL_OPTNAME_RING_RX_JUMBO: string
export const ETHTOOL_OPTNAME_RING_RX_MINI: string
export const ETHTOOL_OPTNAME_RING_TX: string
export const IP_ADDRESS_ATTRIBUTE_LABEL: string
export const IP_CONFIG_ADDRESSES: string
export const IP_CONFIG_DOMAINS: string
export const IP_CONFIG_FAMILY: string
export const IP_CONFIG_GATEWAY: string
export const IP_CONFIG_NAMESERVERS: string
export const IP_CONFIG_ROUTES: string
export const IP_CONFIG_SEARCHES: string
export const IP_CONFIG_WINS_SERVERS: string
export const IP_ROUTE_ATTRIBUTE_CWND: string
export const IP_ROUTE_ATTRIBUTE_FROM: string
export const IP_ROUTE_ATTRIBUTE_INITCWND: string
export const IP_ROUTE_ATTRIBUTE_INITRWND: string
export const IP_ROUTE_ATTRIBUTE_LOCK_CWND: string
export const IP_ROUTE_ATTRIBUTE_LOCK_INITCWND: string
export const IP_ROUTE_ATTRIBUTE_LOCK_INITRWND: string
export const IP_ROUTE_ATTRIBUTE_LOCK_MTU: string
export const IP_ROUTE_ATTRIBUTE_LOCK_WINDOW: string
export const IP_ROUTE_ATTRIBUTE_MTU: string
export const IP_ROUTE_ATTRIBUTE_ONLINK: string
export const IP_ROUTE_ATTRIBUTE_SCOPE: string
export const IP_ROUTE_ATTRIBUTE_SRC: string
export const IP_ROUTE_ATTRIBUTE_TABLE: string
export const IP_ROUTE_ATTRIBUTE_TOS: string
export const IP_ROUTE_ATTRIBUTE_TYPE: string
export const IP_ROUTE_ATTRIBUTE_WINDOW: string
export const LLDP_ATTR_CHASSIS_ID: string
export const LLDP_ATTR_CHASSIS_ID_TYPE: string
export const LLDP_ATTR_DESTINATION: string
export const LLDP_ATTR_IEEE_802_1_PPVID: string
export const LLDP_ATTR_IEEE_802_1_PPVIDS: string
export const LLDP_ATTR_IEEE_802_1_PPVID_FLAGS: string
export const LLDP_ATTR_IEEE_802_1_PVID: string
export const LLDP_ATTR_IEEE_802_1_VID: string
export const LLDP_ATTR_IEEE_802_1_VLANS: string
export const LLDP_ATTR_IEEE_802_1_VLAN_NAME: string
export const LLDP_ATTR_IEEE_802_3_MAC_PHY_CONF: string
export const LLDP_ATTR_IEEE_802_3_MAX_FRAME_SIZE: string
export const LLDP_ATTR_IEEE_802_3_POWER_VIA_MDI: string
export const LLDP_ATTR_MANAGEMENT_ADDRESSES: string
export const LLDP_ATTR_MUD_URL: string
export const LLDP_ATTR_PORT_DESCRIPTION: string
export const LLDP_ATTR_PORT_ID: string
export const LLDP_ATTR_PORT_ID_TYPE: string
export const LLDP_ATTR_RAW: string
export const LLDP_ATTR_SYSTEM_CAPABILITIES: string
export const LLDP_ATTR_SYSTEM_DESCRIPTION: string
export const LLDP_ATTR_SYSTEM_NAME: string
export const LLDP_DEST_NEAREST_BRIDGE: string
export const LLDP_DEST_NEAREST_CUSTOMER_BRIDGE: string
export const LLDP_DEST_NEAREST_NON_TPMR_BRIDGE: string
export const MAJOR_VERSION: number
export const MICRO_VERSION: number
export const MINOR_VERSION: number
export const OBJECT_PATH: string
export const REMOTE_CONNECTION_DBUS_CONNECTION: string
export const REMOTE_CONNECTION_FILENAME: string
export const REMOTE_CONNECTION_FLAGS: string
export const REMOTE_CONNECTION_PATH: string
export const REMOTE_CONNECTION_UNSAVED: string
export const REMOTE_CONNECTION_VISIBLE: string
export const SECRET_AGENT_OLD_AUTO_REGISTER: string
export const SECRET_AGENT_OLD_CAPABILITIES: string
export const SECRET_AGENT_OLD_DBUS_CONNECTION: string
export const SECRET_AGENT_OLD_IDENTIFIER: string
export const SECRET_AGENT_OLD_REGISTERED: string
export const SETTING_6LOWPAN_PARENT: string
export const SETTING_6LOWPAN_SETTING_NAME: string
export const SETTING_802_1X_ALTSUBJECT_MATCHES: string
export const SETTING_802_1X_ANONYMOUS_IDENTITY: string
export const SETTING_802_1X_AUTH_TIMEOUT: string
export const SETTING_802_1X_CA_CERT: string
export const SETTING_802_1X_CA_CERT_PASSWORD: string
export const SETTING_802_1X_CA_CERT_PASSWORD_FLAGS: string
export const SETTING_802_1X_CA_PATH: string
export const SETTING_802_1X_CERT_SCHEME_PREFIX_PATH: string
export const SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11: string
export const SETTING_802_1X_CLIENT_CERT: string
export const SETTING_802_1X_CLIENT_CERT_PASSWORD: string
export const SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS: string
export const SETTING_802_1X_DOMAIN_MATCH: string
export const SETTING_802_1X_DOMAIN_SUFFIX_MATCH: string
export const SETTING_802_1X_EAP: string
export const SETTING_802_1X_IDENTITY: string
export const SETTING_802_1X_OPTIONAL: string
export const SETTING_802_1X_PAC_FILE: string
export const SETTING_802_1X_PASSWORD: string
export const SETTING_802_1X_PASSWORD_FLAGS: string
export const SETTING_802_1X_PASSWORD_RAW: string
export const SETTING_802_1X_PASSWORD_RAW_FLAGS: string
export const SETTING_802_1X_PHASE1_AUTH_FLAGS: string
export const SETTING_802_1X_PHASE1_FAST_PROVISIONING: string
export const SETTING_802_1X_PHASE1_PEAPLABEL: string
export const SETTING_802_1X_PHASE1_PEAPVER: string
export const SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES: string
export const SETTING_802_1X_PHASE2_AUTH: string
export const SETTING_802_1X_PHASE2_AUTHEAP: string
export const SETTING_802_1X_PHASE2_CA_CERT: string
export const SETTING_802_1X_PHASE2_CA_CERT_PASSWORD: string
export const SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS: string
export const SETTING_802_1X_PHASE2_CA_PATH: string
export const SETTING_802_1X_PHASE2_CLIENT_CERT: string
export const SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD: string
export const SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS: string
export const SETTING_802_1X_PHASE2_DOMAIN_MATCH: string
export const SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH: string
export const SETTING_802_1X_PHASE2_PRIVATE_KEY: string
export const SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD: string
export const SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS: string
export const SETTING_802_1X_PHASE2_SUBJECT_MATCH: string
export const SETTING_802_1X_PIN: string
export const SETTING_802_1X_PIN_FLAGS: string
export const SETTING_802_1X_PRIVATE_KEY: string
export const SETTING_802_1X_PRIVATE_KEY_PASSWORD: string
export const SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS: string
export const SETTING_802_1X_SETTING_NAME: string
export const SETTING_802_1X_SUBJECT_MATCH: string
export const SETTING_802_1X_SYSTEM_CA_CERTS: string
export const SETTING_ADSL_ENCAPSULATION: string
export const SETTING_ADSL_ENCAPSULATION_LLC: string
export const SETTING_ADSL_ENCAPSULATION_VCMUX: string
export const SETTING_ADSL_PASSWORD: string
export const SETTING_ADSL_PASSWORD_FLAGS: string
export const SETTING_ADSL_PROTOCOL: string
export const SETTING_ADSL_PROTOCOL_IPOATM: string
export const SETTING_ADSL_PROTOCOL_PPPOA: string
export const SETTING_ADSL_PROTOCOL_PPPOE: string
export const SETTING_ADSL_SETTING_NAME: string
export const SETTING_ADSL_USERNAME: string
export const SETTING_ADSL_VCI: string
export const SETTING_ADSL_VPI: string
export const SETTING_BLUETOOTH_BDADDR: string
export const SETTING_BLUETOOTH_SETTING_NAME: string
export const SETTING_BLUETOOTH_TYPE: string
export const SETTING_BLUETOOTH_TYPE_DUN: string
export const SETTING_BLUETOOTH_TYPE_NAP: string
export const SETTING_BLUETOOTH_TYPE_PANU: string
export const SETTING_BOND_OPTIONS: string
export const SETTING_BOND_OPTION_ACTIVE_SLAVE: string
export const SETTING_BOND_OPTION_AD_ACTOR_SYSTEM: string
export const SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO: string
export const SETTING_BOND_OPTION_AD_SELECT: string
export const SETTING_BOND_OPTION_AD_USER_PORT_KEY: string
export const SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE: string
export const SETTING_BOND_OPTION_ARP_ALL_TARGETS: string
export const SETTING_BOND_OPTION_ARP_INTERVAL: string
export const SETTING_BOND_OPTION_ARP_IP_TARGET: string
export const SETTING_BOND_OPTION_ARP_VALIDATE: string
export const SETTING_BOND_OPTION_DOWNDELAY: string
export const SETTING_BOND_OPTION_FAIL_OVER_MAC: string
export const SETTING_BOND_OPTION_LACP_RATE: string
export const SETTING_BOND_OPTION_LP_INTERVAL: string
export const SETTING_BOND_OPTION_MIIMON: string
export const SETTING_BOND_OPTION_MIN_LINKS: string
export const SETTING_BOND_OPTION_MODE: string
export const SETTING_BOND_OPTION_NUM_GRAT_ARP: string
export const SETTING_BOND_OPTION_NUM_UNSOL_NA: string
export const SETTING_BOND_OPTION_PACKETS_PER_SLAVE: string
export const SETTING_BOND_OPTION_PRIMARY: string
export const SETTING_BOND_OPTION_PRIMARY_RESELECT: string
export const SETTING_BOND_OPTION_RESEND_IGMP: string
export const SETTING_BOND_OPTION_TLB_DYNAMIC_LB: string
export const SETTING_BOND_OPTION_UPDELAY: string
export const SETTING_BOND_OPTION_USE_CARRIER: string
export const SETTING_BOND_OPTION_XMIT_HASH_POLICY: string
export const SETTING_BOND_SETTING_NAME: string
export const SETTING_BRIDGE_AGEING_TIME: string
export const SETTING_BRIDGE_FORWARD_DELAY: string
export const SETTING_BRIDGE_GROUP_ADDRESS: string
export const SETTING_BRIDGE_GROUP_FORWARD_MASK: string
export const SETTING_BRIDGE_HELLO_TIME: string
export const SETTING_BRIDGE_MAC_ADDRESS: string
export const SETTING_BRIDGE_MAX_AGE: string
export const SETTING_BRIDGE_MULTICAST_HASH_MAX: string
export const SETTING_BRIDGE_MULTICAST_LAST_MEMBER_COUNT: string
export const SETTING_BRIDGE_MULTICAST_LAST_MEMBER_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_MEMBERSHIP_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_QUERIER: string
export const SETTING_BRIDGE_MULTICAST_QUERIER_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_QUERY_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_QUERY_RESPONSE_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_QUERY_USE_IFADDR: string
export const SETTING_BRIDGE_MULTICAST_ROUTER: string
export const SETTING_BRIDGE_MULTICAST_SNOOPING: string
export const SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_COUNT: string
export const SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_INTERVAL: string
export const SETTING_BRIDGE_PORT_HAIRPIN_MODE: string
export const SETTING_BRIDGE_PORT_PATH_COST: string
export const SETTING_BRIDGE_PORT_PRIORITY: string
export const SETTING_BRIDGE_PORT_SETTING_NAME: string
export const SETTING_BRIDGE_PORT_VLANS: string
export const SETTING_BRIDGE_PRIORITY: string
export const SETTING_BRIDGE_SETTING_NAME: string
export const SETTING_BRIDGE_STP: string
export const SETTING_BRIDGE_VLANS: string
export const SETTING_BRIDGE_VLAN_DEFAULT_PVID: string
export const SETTING_BRIDGE_VLAN_FILTERING: string
export const SETTING_BRIDGE_VLAN_PROTOCOL: string
export const SETTING_BRIDGE_VLAN_STATS_ENABLED: string
export const SETTING_CDMA_MTU: string
export const SETTING_CDMA_NUMBER: string
export const SETTING_CDMA_PASSWORD: string
export const SETTING_CDMA_PASSWORD_FLAGS: string
export const SETTING_CDMA_SETTING_NAME: string
export const SETTING_CDMA_USERNAME: string
export const SETTING_CONNECTION_AUTH_RETRIES: string
export const SETTING_CONNECTION_AUTOCONNECT: string
export const SETTING_CONNECTION_AUTOCONNECT_PRIORITY: string
export const SETTING_CONNECTION_AUTOCONNECT_PRIORITY_DEFAULT: number
export const SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MAX: number
export const SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MIN: number
export const SETTING_CONNECTION_AUTOCONNECT_RETRIES: string
export const SETTING_CONNECTION_AUTOCONNECT_SLAVES: string
export const SETTING_CONNECTION_GATEWAY_PING_TIMEOUT: string
export const SETTING_CONNECTION_ID: string
export const SETTING_CONNECTION_INTERFACE_NAME: string
export const SETTING_CONNECTION_LLDP: string
export const SETTING_CONNECTION_LLMNR: string
export const SETTING_CONNECTION_MASTER: string
export const SETTING_CONNECTION_MDNS: string
export const SETTING_CONNECTION_METERED: string
export const SETTING_CONNECTION_MUD_URL: string
export const SETTING_CONNECTION_MULTI_CONNECT: string
export const SETTING_CONNECTION_PERMISSIONS: string
export const SETTING_CONNECTION_READ_ONLY: string
export const SETTING_CONNECTION_SECONDARIES: string
export const SETTING_CONNECTION_SETTING_NAME: string
export const SETTING_CONNECTION_SLAVE_TYPE: string
export const SETTING_CONNECTION_STABLE_ID: string
export const SETTING_CONNECTION_TIMESTAMP: string
export const SETTING_CONNECTION_TYPE: string
export const SETTING_CONNECTION_UUID: string
export const SETTING_CONNECTION_WAIT_DEVICE_TIMEOUT: string
export const SETTING_CONNECTION_ZONE: string
export const SETTING_DCB_APP_FCOE_FLAGS: string
export const SETTING_DCB_APP_FCOE_MODE: string
export const SETTING_DCB_APP_FCOE_PRIORITY: string
export const SETTING_DCB_APP_FIP_FLAGS: string
export const SETTING_DCB_APP_FIP_PRIORITY: string
export const SETTING_DCB_APP_ISCSI_FLAGS: string
export const SETTING_DCB_APP_ISCSI_PRIORITY: string
export const SETTING_DCB_FCOE_MODE_FABRIC: string
export const SETTING_DCB_FCOE_MODE_VN2VN: string
export const SETTING_DCB_PRIORITY_BANDWIDTH: string
export const SETTING_DCB_PRIORITY_FLOW_CONTROL: string
export const SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS: string
export const SETTING_DCB_PRIORITY_GROUP_BANDWIDTH: string
export const SETTING_DCB_PRIORITY_GROUP_FLAGS: string
export const SETTING_DCB_PRIORITY_GROUP_ID: string
export const SETTING_DCB_PRIORITY_STRICT_BANDWIDTH: string
export const SETTING_DCB_PRIORITY_TRAFFIC_CLASS: string
export const SETTING_DCB_SETTING_NAME: string
export const SETTING_DNS_OPTION_ATTEMPTS: string
export const SETTING_DNS_OPTION_DEBUG: string
export const SETTING_DNS_OPTION_EDNS0: string
export const SETTING_DNS_OPTION_INET6: string
export const SETTING_DNS_OPTION_IP6_BYTESTRING: string
export const SETTING_DNS_OPTION_IP6_DOTINT: string
export const SETTING_DNS_OPTION_NDOTS: string
export const SETTING_DNS_OPTION_NO_CHECK_NAMES: string
export const SETTING_DNS_OPTION_NO_IP6_DOTINT: string
export const SETTING_DNS_OPTION_NO_RELOAD: string
export const SETTING_DNS_OPTION_NO_TLD_QUERY: string
export const SETTING_DNS_OPTION_ROTATE: string
export const SETTING_DNS_OPTION_SINGLE_REQUEST: string
export const SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN: string
export const SETTING_DNS_OPTION_TIMEOUT: string
export const SETTING_DNS_OPTION_TRUST_AD: string
export const SETTING_DNS_OPTION_USE_VC: string
export const SETTING_DUMMY_SETTING_NAME: string
export const SETTING_ETHTOOL_SETTING_NAME: string
export const SETTING_GENERIC_SETTING_NAME: string
export const SETTING_GSM_APN: string
export const SETTING_GSM_AUTO_CONFIG: string
export const SETTING_GSM_DEVICE_ID: string
export const SETTING_GSM_HOME_ONLY: string
export const SETTING_GSM_MTU: string
export const SETTING_GSM_NETWORK_ID: string
export const SETTING_GSM_NUMBER: string
export const SETTING_GSM_PASSWORD: string
export const SETTING_GSM_PASSWORD_FLAGS: string
export const SETTING_GSM_PIN: string
export const SETTING_GSM_PIN_FLAGS: string
export const SETTING_GSM_SETTING_NAME: string
export const SETTING_GSM_SIM_ID: string
export const SETTING_GSM_SIM_OPERATOR_ID: string
export const SETTING_GSM_USERNAME: string
export const SETTING_INFINIBAND_MAC_ADDRESS: string
export const SETTING_INFINIBAND_MTU: string
export const SETTING_INFINIBAND_PARENT: string
export const SETTING_INFINIBAND_P_KEY: string
export const SETTING_INFINIBAND_SETTING_NAME: string
export const SETTING_INFINIBAND_TRANSPORT_MODE: string
export const SETTING_IP4_CONFIG_DHCP_CLIENT_ID: string
export const SETTING_IP4_CONFIG_DHCP_FQDN: string
export const SETTING_IP4_CONFIG_DHCP_VENDOR_CLASS_IDENTIFIER: string
export const SETTING_IP4_CONFIG_METHOD_AUTO: string
export const SETTING_IP4_CONFIG_METHOD_DISABLED: string
export const SETTING_IP4_CONFIG_METHOD_LINK_LOCAL: string
export const SETTING_IP4_CONFIG_METHOD_MANUAL: string
export const SETTING_IP4_CONFIG_METHOD_SHARED: string
export const SETTING_IP4_CONFIG_SETTING_NAME: string
export const SETTING_IP6_CONFIG_ADDR_GEN_MODE: string
export const SETTING_IP6_CONFIG_DHCP_DUID: string
export const SETTING_IP6_CONFIG_IP6_PRIVACY: string
export const SETTING_IP6_CONFIG_METHOD_AUTO: string
export const SETTING_IP6_CONFIG_METHOD_DHCP: string
export const SETTING_IP6_CONFIG_METHOD_DISABLED: string
export const SETTING_IP6_CONFIG_METHOD_IGNORE: string
export const SETTING_IP6_CONFIG_METHOD_LINK_LOCAL: string
export const SETTING_IP6_CONFIG_METHOD_MANUAL: string
export const SETTING_IP6_CONFIG_METHOD_SHARED: string
export const SETTING_IP6_CONFIG_RA_TIMEOUT: string
export const SETTING_IP6_CONFIG_SETTING_NAME: string
export const SETTING_IP6_CONFIG_TOKEN: string
export const SETTING_IP_CONFIG_ADDRESSES: string
export const SETTING_IP_CONFIG_DAD_TIMEOUT: string
export const SETTING_IP_CONFIG_DAD_TIMEOUT_MAX: number
export const SETTING_IP_CONFIG_DHCP_HOSTNAME: string
export const SETTING_IP_CONFIG_DHCP_HOSTNAME_FLAGS: string
export const SETTING_IP_CONFIG_DHCP_IAID: string
export const SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME: string
export const SETTING_IP_CONFIG_DHCP_TIMEOUT: string
export const SETTING_IP_CONFIG_DNS: string
export const SETTING_IP_CONFIG_DNS_OPTIONS: string
export const SETTING_IP_CONFIG_DNS_PRIORITY: string
export const SETTING_IP_CONFIG_DNS_SEARCH: string
export const SETTING_IP_CONFIG_GATEWAY: string
export const SETTING_IP_CONFIG_IGNORE_AUTO_DNS: string
export const SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES: string
export const SETTING_IP_CONFIG_MAY_FAIL: string
export const SETTING_IP_CONFIG_METHOD: string
export const SETTING_IP_CONFIG_NEVER_DEFAULT: string
export const SETTING_IP_CONFIG_ROUTES: string
export const SETTING_IP_CONFIG_ROUTE_METRIC: string
export const SETTING_IP_CONFIG_ROUTE_TABLE: string
export const SETTING_IP_CONFIG_ROUTING_RULES: string
export const SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT: string
export const SETTING_IP_TUNNEL_FLAGS: string
export const SETTING_IP_TUNNEL_FLOW_LABEL: string
export const SETTING_IP_TUNNEL_INPUT_KEY: string
export const SETTING_IP_TUNNEL_LOCAL: string
export const SETTING_IP_TUNNEL_MODE: string
export const SETTING_IP_TUNNEL_MTU: string
export const SETTING_IP_TUNNEL_OUTPUT_KEY: string
export const SETTING_IP_TUNNEL_PARENT: string
export const SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY: string
export const SETTING_IP_TUNNEL_REMOTE: string
export const SETTING_IP_TUNNEL_SETTING_NAME: string
export const SETTING_IP_TUNNEL_TOS: string
export const SETTING_IP_TUNNEL_TTL: string
export const SETTING_MACSEC_ENCRYPT: string
export const SETTING_MACSEC_MKA_CAK: string
export const SETTING_MACSEC_MKA_CAK_FLAGS: string
export const SETTING_MACSEC_MKA_CAK_LENGTH: number
export const SETTING_MACSEC_MKA_CKN: string
export const SETTING_MACSEC_MKA_CKN_LENGTH: number
export const SETTING_MACSEC_MODE: string
export const SETTING_MACSEC_PARENT: string
export const SETTING_MACSEC_PORT: string
export const SETTING_MACSEC_SEND_SCI: string
export const SETTING_MACSEC_SETTING_NAME: string
export const SETTING_MACSEC_VALIDATION: string
export const SETTING_MACVLAN_MODE: string
export const SETTING_MACVLAN_PARENT: string
export const SETTING_MACVLAN_PROMISCUOUS: string
export const SETTING_MACVLAN_SETTING_NAME: string
export const SETTING_MACVLAN_TAP: string
export const SETTING_MATCH_DRIVER: string
export const SETTING_MATCH_INTERFACE_NAME: string
export const SETTING_MATCH_KERNEL_COMMAND_LINE: string
export const SETTING_MATCH_PATH: string
export const SETTING_MATCH_SETTING_NAME: string
export const SETTING_NAME: string
export const SETTING_OLPC_MESH_CHANNEL: string
export const SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS: string
export const SETTING_OLPC_MESH_SETTING_NAME: string
export const SETTING_OLPC_MESH_SSID: string
export const SETTING_OVS_BRIDGE_DATAPATH_TYPE: string
export const SETTING_OVS_BRIDGE_FAIL_MODE: string
export const SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE: string
export const SETTING_OVS_BRIDGE_RSTP_ENABLE: string
export const SETTING_OVS_BRIDGE_SETTING_NAME: string
export const SETTING_OVS_BRIDGE_STP_ENABLE: string
export const SETTING_OVS_DPDK_DEVARGS: string
export const SETTING_OVS_DPDK_SETTING_NAME: string
export const SETTING_OVS_INTERFACE_SETTING_NAME: string
export const SETTING_OVS_INTERFACE_TYPE: string
export const SETTING_OVS_PATCH_PEER: string
export const SETTING_OVS_PATCH_SETTING_NAME: string
export const SETTING_OVS_PORT_BOND_DOWNDELAY: string
export const SETTING_OVS_PORT_BOND_MODE: string
export const SETTING_OVS_PORT_BOND_UPDELAY: string
export const SETTING_OVS_PORT_LACP: string
export const SETTING_OVS_PORT_SETTING_NAME: string
export const SETTING_OVS_PORT_TAG: string
export const SETTING_OVS_PORT_VLAN_MODE: string
export const SETTING_PARAM_FUZZY_IGNORE: number
export const SETTING_PARAM_REQUIRED: number
export const SETTING_PARAM_SECRET: number
export const SETTING_PPPOE_PARENT: string
export const SETTING_PPPOE_PASSWORD: string
export const SETTING_PPPOE_PASSWORD_FLAGS: string
export const SETTING_PPPOE_SERVICE: string
export const SETTING_PPPOE_SETTING_NAME: string
export const SETTING_PPPOE_USERNAME: string
export const SETTING_PPP_BAUD: string
export const SETTING_PPP_CRTSCTS: string
export const SETTING_PPP_LCP_ECHO_FAILURE: string
export const SETTING_PPP_LCP_ECHO_INTERVAL: string
export const SETTING_PPP_MPPE_STATEFUL: string
export const SETTING_PPP_MRU: string
export const SETTING_PPP_MTU: string
export const SETTING_PPP_NOAUTH: string
export const SETTING_PPP_NOBSDCOMP: string
export const SETTING_PPP_NODEFLATE: string
export const SETTING_PPP_NO_VJ_COMP: string
export const SETTING_PPP_REFUSE_CHAP: string
export const SETTING_PPP_REFUSE_EAP: string
export const SETTING_PPP_REFUSE_MSCHAP: string
export const SETTING_PPP_REFUSE_MSCHAPV2: string
export const SETTING_PPP_REFUSE_PAP: string
export const SETTING_PPP_REQUIRE_MPPE: string
export const SETTING_PPP_REQUIRE_MPPE_128: string
export const SETTING_PPP_SETTING_NAME: string
export const SETTING_PROXY_BROWSER_ONLY: string
export const SETTING_PROXY_METHOD: string
export const SETTING_PROXY_PAC_SCRIPT: string
export const SETTING_PROXY_PAC_URL: string
export const SETTING_PROXY_SETTING_NAME: string
export const SETTING_SERIAL_BAUD: string
export const SETTING_SERIAL_BITS: string
export const SETTING_SERIAL_PARITY: string
export const SETTING_SERIAL_SEND_DELAY: string
export const SETTING_SERIAL_SETTING_NAME: string
export const SETTING_SERIAL_STOPBITS: string
export const SETTING_SRIOV_AUTOPROBE_DRIVERS: string
export const SETTING_SRIOV_SETTING_NAME: string
export const SETTING_SRIOV_TOTAL_VFS: string
export const SETTING_SRIOV_VFS: string
export const SETTING_TC_CONFIG_QDISCS: string
export const SETTING_TC_CONFIG_SETTING_NAME: string
export const SETTING_TC_CONFIG_TFILTERS: string
export const SETTING_TEAM_CONFIG: string
export const SETTING_TEAM_LINK_WATCHERS: string
export const SETTING_TEAM_MCAST_REJOIN_COUNT: string
export const SETTING_TEAM_MCAST_REJOIN_INTERVAL: string
export const SETTING_TEAM_NOTIFY_MCAST_COUNT_ACTIVEBACKUP_DEFAULT: number
export const SETTING_TEAM_NOTIFY_PEERS_COUNT: string
export const SETTING_TEAM_NOTIFY_PEERS_COUNT_ACTIVEBACKUP_DEFAULT: number
export const SETTING_TEAM_NOTIFY_PEERS_INTERVAL: string
export const SETTING_TEAM_PORT_CONFIG: string
export const SETTING_TEAM_PORT_LACP_KEY: string
export const SETTING_TEAM_PORT_LACP_PRIO: string
export const SETTING_TEAM_PORT_LACP_PRIO_DEFAULT: number
export const SETTING_TEAM_PORT_LINK_WATCHERS: string
export const SETTING_TEAM_PORT_PRIO: string
export const SETTING_TEAM_PORT_QUEUE_ID: string
export const SETTING_TEAM_PORT_QUEUE_ID_DEFAULT: number
export const SETTING_TEAM_PORT_SETTING_NAME: string
export const SETTING_TEAM_PORT_STICKY: string
export const SETTING_TEAM_RUNNER: string
export const SETTING_TEAM_RUNNER_ACTIVE: string
export const SETTING_TEAM_RUNNER_ACTIVEBACKUP: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG: string
export const SETTING_TEAM_RUNNER_BROADCAST: string
export const SETTING_TEAM_RUNNER_FAST_RATE: string
export const SETTING_TEAM_RUNNER_HWADDR_POLICY: string
export const SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE: string
export const SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE: string
export const SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL: string
export const SETTING_TEAM_RUNNER_LACP: string
export const SETTING_TEAM_RUNNER_LOADBALANCE: string
export const SETTING_TEAM_RUNNER_MIN_PORTS: string
export const SETTING_TEAM_RUNNER_RANDOM: string
export const SETTING_TEAM_RUNNER_ROUNDROBIN: string
export const SETTING_TEAM_RUNNER_SYS_PRIO: string
export const SETTING_TEAM_RUNNER_SYS_PRIO_DEFAULT: number
export const SETTING_TEAM_RUNNER_TX_BALANCER: string
export const SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL: string
export const SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL_DEFAULT: number
export const SETTING_TEAM_RUNNER_TX_HASH: string
export const SETTING_TEAM_SETTING_NAME: string
export const SETTING_TUN_GROUP: string
export const SETTING_TUN_MODE: string
export const SETTING_TUN_MULTI_QUEUE: string
export const SETTING_TUN_OWNER: string
export const SETTING_TUN_PI: string
export const SETTING_TUN_SETTING_NAME: string
export const SETTING_TUN_VNET_HDR: string
export const SETTING_USER_DATA: string
export const SETTING_USER_SETTING_NAME: string
export const SETTING_VLAN_EGRESS_PRIORITY_MAP: string
export const SETTING_VLAN_FLAGS: string
export const SETTING_VLAN_ID: string
export const SETTING_VLAN_INGRESS_PRIORITY_MAP: string
export const SETTING_VLAN_PARENT: string
export const SETTING_VLAN_SETTING_NAME: string
export const SETTING_VPN_DATA: string
export const SETTING_VPN_PERSISTENT: string
export const SETTING_VPN_SECRETS: string
export const SETTING_VPN_SERVICE_TYPE: string
export const SETTING_VPN_SETTING_NAME: string
export const SETTING_VPN_TIMEOUT: string
export const SETTING_VPN_USER_NAME: string
export const SETTING_VRF_SETTING_NAME: string
export const SETTING_VRF_TABLE: string
export const SETTING_VXLAN_AGEING: string
export const SETTING_VXLAN_DESTINATION_PORT: string
export const SETTING_VXLAN_ID: string
export const SETTING_VXLAN_L2_MISS: string
export const SETTING_VXLAN_L3_MISS: string
export const SETTING_VXLAN_LEARNING: string
export const SETTING_VXLAN_LIMIT: string
export const SETTING_VXLAN_LOCAL: string
export const SETTING_VXLAN_PARENT: string
export const SETTING_VXLAN_PROXY: string
export const SETTING_VXLAN_REMOTE: string
export const SETTING_VXLAN_RSC: string
export const SETTING_VXLAN_SETTING_NAME: string
export const SETTING_VXLAN_SOURCE_PORT_MAX: string
export const SETTING_VXLAN_SOURCE_PORT_MIN: string
export const SETTING_VXLAN_TOS: string
export const SETTING_VXLAN_TTL: string
export const SETTING_WIFI_P2P_PEER: string
export const SETTING_WIFI_P2P_SETTING_NAME: string
export const SETTING_WIFI_P2P_WFD_IES: string
export const SETTING_WIFI_P2P_WPS_METHOD: string
export const SETTING_WIMAX_MAC_ADDRESS: string
export const SETTING_WIMAX_NETWORK_NAME: string
export const SETTING_WIMAX_SETTING_NAME: string
export const SETTING_WIRED_AUTO_NEGOTIATE: string
export const SETTING_WIRED_CLONED_MAC_ADDRESS: string
export const SETTING_WIRED_DUPLEX: string
export const SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK: string
export const SETTING_WIRED_MAC_ADDRESS: string
export const SETTING_WIRED_MAC_ADDRESS_BLACKLIST: string
export const SETTING_WIRED_MTU: string
export const SETTING_WIRED_PORT: string
export const SETTING_WIRED_S390_NETTYPE: string
export const SETTING_WIRED_S390_OPTIONS: string
export const SETTING_WIRED_S390_SUBCHANNELS: string
export const SETTING_WIRED_SETTING_NAME: string
export const SETTING_WIRED_SPEED: string
export const SETTING_WIRED_WAKE_ON_LAN: string
export const SETTING_WIRED_WAKE_ON_LAN_PASSWORD: string
export const SETTING_WIREGUARD_FWMARK: string
export const SETTING_WIREGUARD_IP4_AUTO_DEFAULT_ROUTE: string
export const SETTING_WIREGUARD_IP6_AUTO_DEFAULT_ROUTE: string
export const SETTING_WIREGUARD_LISTEN_PORT: string
export const SETTING_WIREGUARD_MTU: string
export const SETTING_WIREGUARD_PEERS: string
export const SETTING_WIREGUARD_PEER_ROUTES: string
export const SETTING_WIREGUARD_PRIVATE_KEY: string
export const SETTING_WIREGUARD_PRIVATE_KEY_FLAGS: string
export const SETTING_WIREGUARD_SETTING_NAME: string
export const SETTING_WIRELESS_BAND: string
export const SETTING_WIRELESS_BSSID: string
export const SETTING_WIRELESS_CHANNEL: string
export const SETTING_WIRELESS_CLONED_MAC_ADDRESS: string
export const SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK: string
export const SETTING_WIRELESS_HIDDEN: string
export const SETTING_WIRELESS_MAC_ADDRESS: string
export const SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST: string
export const SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION: string
export const SETTING_WIRELESS_MODE: string
export const SETTING_WIRELESS_MODE_ADHOC: string
export const SETTING_WIRELESS_MODE_AP: string
export const SETTING_WIRELESS_MODE_INFRA: string
export const SETTING_WIRELESS_MODE_MESH: string
export const SETTING_WIRELESS_MTU: string
export const SETTING_WIRELESS_POWERSAVE: string
export const SETTING_WIRELESS_RATE: string
export const SETTING_WIRELESS_SECURITY_AUTH_ALG: string
export const SETTING_WIRELESS_SECURITY_FILS: string
export const SETTING_WIRELESS_SECURITY_GROUP: string
export const SETTING_WIRELESS_SECURITY_KEY_MGMT: string
export const SETTING_WIRELESS_SECURITY_LEAP_PASSWORD: string
export const SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS: string
export const SETTING_WIRELESS_SECURITY_LEAP_USERNAME: string
export const SETTING_WIRELESS_SECURITY_PAIRWISE: string
export const SETTING_WIRELESS_SECURITY_PMF: string
export const SETTING_WIRELESS_SECURITY_PROTO: string
export const SETTING_WIRELESS_SECURITY_PSK: string
export const SETTING_WIRELESS_SECURITY_PSK_FLAGS: string
export const SETTING_WIRELESS_SECURITY_SETTING_NAME: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY0: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY1: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY2: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY3: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE: string
export const SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX: string
export const SETTING_WIRELESS_SECURITY_WPS_METHOD: string
export const SETTING_WIRELESS_SEEN_BSSIDS: string
export const SETTING_WIRELESS_SETTING_NAME: string
export const SETTING_WIRELESS_SSID: string
export const SETTING_WIRELESS_TX_POWER: string
export const SETTING_WIRELESS_WAKE_ON_WLAN: string
export const SETTING_WPAN_CHANNEL: string
export const SETTING_WPAN_CHANNEL_DEFAULT: number
export const SETTING_WPAN_MAC_ADDRESS: string
export const SETTING_WPAN_PAGE: string
export const SETTING_WPAN_PAGE_DEFAULT: number
export const SETTING_WPAN_PAN_ID: string
export const SETTING_WPAN_SETTING_NAME: string
export const SETTING_WPAN_SHORT_ADDRESS: string
export const SRIOV_VF_ATTRIBUTE_MAC: string
export const SRIOV_VF_ATTRIBUTE_MAX_TX_RATE: string
export const SRIOV_VF_ATTRIBUTE_MIN_TX_RATE: string
export const SRIOV_VF_ATTRIBUTE_SPOOF_CHECK: string
export const SRIOV_VF_ATTRIBUTE_TRUST: string
export const TEAM_LINK_WATCHER_ARP_PING: string
export const TEAM_LINK_WATCHER_ETHTOOL: string
export const TEAM_LINK_WATCHER_NSNA_PING: string
export const UTILS_HWADDR_LEN_MAX: number
export const VLAN_FLAGS_ALL: number
export const VPN_CONNECTION_BANNER: string
export const VPN_CONNECTION_VPN_STATE: string
export const VPN_DBUS_PLUGIN_INTERFACE: string
export const VPN_DBUS_PLUGIN_PATH: string
export const VPN_EDITOR_PLUGIN_DESCRIPTION: string
export const VPN_EDITOR_PLUGIN_NAME: string
export const VPN_EDITOR_PLUGIN_SERVICE: string
export const VPN_PLUGIN_CAN_PERSIST: string
export const VPN_PLUGIN_CONFIG_BANNER: string
export const VPN_PLUGIN_CONFIG_EXT_GATEWAY: string
export const VPN_PLUGIN_CONFIG_HAS_IP4: string
export const VPN_PLUGIN_CONFIG_HAS_IP6: string
export const VPN_PLUGIN_CONFIG_MTU: string
export const VPN_PLUGIN_CONFIG_PROXY_PAC: string
export const VPN_PLUGIN_CONFIG_TUNDEV: string
export const VPN_PLUGIN_INFO_FILENAME: string
export const VPN_PLUGIN_INFO_KEYFILE: string
export const VPN_PLUGIN_INFO_KF_GROUP_CONNECTION: string
export const VPN_PLUGIN_INFO_KF_GROUP_GNOME: string
export const VPN_PLUGIN_INFO_KF_GROUP_LIBNM: string
export const VPN_PLUGIN_INFO_NAME: string
export const VPN_PLUGIN_IP4_CONFIG_ADDRESS: string
export const VPN_PLUGIN_IP4_CONFIG_DNS: string
export const VPN_PLUGIN_IP4_CONFIG_DOMAIN: string
export const VPN_PLUGIN_IP4_CONFIG_DOMAINS: string
export const VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY: string
export const VPN_PLUGIN_IP4_CONFIG_MSS: string
export const VPN_PLUGIN_IP4_CONFIG_NBNS: string
export const VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT: string
export const VPN_PLUGIN_IP4_CONFIG_PREFIX: string
export const VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES: string
export const VPN_PLUGIN_IP4_CONFIG_PTP: string
export const VPN_PLUGIN_IP4_CONFIG_ROUTES: string
export const VPN_PLUGIN_IP6_CONFIG_ADDRESS: string
export const VPN_PLUGIN_IP6_CONFIG_DNS: string
export const VPN_PLUGIN_IP6_CONFIG_DOMAIN: string
export const VPN_PLUGIN_IP6_CONFIG_DOMAINS: string
export const VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY: string
export const VPN_PLUGIN_IP6_CONFIG_MSS: string
export const VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT: string
export const VPN_PLUGIN_IP6_CONFIG_PREFIX: string
export const VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES: string
export const VPN_PLUGIN_IP6_CONFIG_PTP: string
export const VPN_PLUGIN_IP6_CONFIG_ROUTES: string
export const VPN_PLUGIN_OLD_DBUS_SERVICE_NAME: string
export const VPN_PLUGIN_OLD_STATE: string
export const VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME: string
export const VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER: string
export const VPN_SERVICE_PLUGIN_STATE: string
export const WIFI_P2P_PEER_FLAGS: string
export const WIFI_P2P_PEER_HW_ADDRESS: string
export const WIFI_P2P_PEER_LAST_SEEN: string
export const WIFI_P2P_PEER_MANUFACTURER: string
export const WIFI_P2P_PEER_MODEL: string
export const WIFI_P2P_PEER_MODEL_NUMBER: string
export const WIFI_P2P_PEER_NAME: string
export const WIFI_P2P_PEER_SERIAL: string
export const WIFI_P2P_PEER_STRENGTH: string
export const WIFI_P2P_PEER_WFD_IES: string
export const WIMAX_NSP_NAME: string
export const WIMAX_NSP_NETWORK_TYPE: string
export const WIMAX_NSP_SIGNAL_QUALITY: string
export const WIREGUARD_PEER_ATTR_ALLOWED_IPS: string
export const WIREGUARD_PEER_ATTR_ENDPOINT: string
export const WIREGUARD_PEER_ATTR_PERSISTENT_KEEPALIVE: string
export const WIREGUARD_PEER_ATTR_PRESHARED_KEY: string
export const WIREGUARD_PEER_ATTR_PRESHARED_KEY_FLAGS: string
export const WIREGUARD_PEER_ATTR_PUBLIC_KEY: string
export const WIREGUARD_PUBLIC_KEY_LEN: number
export const WIREGUARD_SYMMETRIC_KEY_LEN: number
export function agent_manager_error_quark(): GLib.Quark
export function bridge_vlan_from_str(str: string): BridgeVlan
export function client_error_quark(): GLib.Quark
export function connection_error_quark(): GLib.Quark
export function crypto_error_quark(): GLib.Quark
export function device_error_quark(): GLib.Quark
export function ethtool_optname_is_coalesce(optname?: string | null): boolean
export function ethtool_optname_is_feature(optname?: string | null): boolean
export function ethtool_optname_is_ring(optname?: string | null): boolean
export function ip_route_attribute_validate(name: string, value: GLib.Variant, family: number): [ /* returnType */ boolean, /* known */ boolean ]
export function ip_route_get_variant_attribute_spec(): VariantAttributeSpec
export function ip_routing_rule_from_string(str: string, to_string_flags: IPRoutingRuleAsStringFlags, extra_args?: GLib.HashTable | null): IPRoutingRule
export function manager_error_quark(): GLib.Quark
export function secret_agent_error_quark(): GLib.Quark
export function settings_error_quark(): GLib.Quark
export function sriov_vf_attribute_validate(name: string, value: GLib.Variant): [ /* returnType */ boolean, /* known */ boolean ]
export function utils_ap_mode_security_valid(type: UtilsSecurityType, wifi_caps: DeviceWifiCapabilities): boolean
export function utils_base64secret_decode(base64_key: string, required_key_len: number, out_key?: number | null): boolean
export function utils_bin2hexstr(src: Gjs.byteArray.ByteArray, final_len: number): string
export function utils_bond_mode_int_to_string(mode: number): string
export function utils_bond_mode_string_to_int(mode: string): number
export function utils_check_virtual_device_compatibility(virtual_type: GObject.Type, other_type: GObject.Type): boolean
export function utils_enum_from_str(type: GObject.Type, str: string): [ /* returnType */ boolean, /* out_value */ number | null, /* err_token */ string | null ]
export function utils_enum_get_values(type: GObject.Type, from: number, to: number): string[]
export function utils_enum_to_str(type: GObject.Type, value: number): string
export function utils_escape_ssid(ssid: Gjs.byteArray.ByteArray): string
export function utils_file_is_certificate(filename: string): boolean
export function utils_file_is_pkcs12(filename: string): boolean
export function utils_file_is_private_key(filename: string): [ /* returnType */ boolean, /* out_encrypted */ boolean ]
export function utils_file_search_in_paths(progname: string, try_first: string | null, paths: string | null, file_test_flags: GLib.FileTest, predicate: UtilsFileSearchInPathsPredicate): string
export function utils_format_variant_attributes(attributes: GLib.HashTable, attr_separator: number, key_value_separator: number): string
export function utils_get_timestamp_msec(): number
export function utils_hexstr2bin(hex: string): Gjs.byteArray.ByteArray
export function utils_hwaddr_atoba(asc: string, length: number): Gjs.byteArray.ByteArray
export function utils_hwaddr_aton(asc: string, buffer: Gjs.byteArray.ByteArray): number
export function utils_hwaddr_canonical(asc: string, length: number): string
export function utils_hwaddr_len(type: number): number
export function utils_hwaddr_matches(hwaddr1: object | null, hwaddr1_len: number, hwaddr2: object | null, hwaddr2_len: number): boolean
export function utils_hwaddr_ntoa(addr: Gjs.byteArray.ByteArray): string
export function utils_hwaddr_valid(asc: string, length: number): boolean
export function utils_iface_valid_name(name?: string | null): boolean
export function utils_ip4_addresses_from_variant(value: GLib.Variant): [ /* returnType */ IPAddress[], /* out_gateway */ string | null ]
export function utils_ip4_addresses_to_variant(addresses: IPAddress[], gateway?: string | null): GLib.Variant
export function utils_ip4_dns_from_variant(value: GLib.Variant): string
export function utils_ip4_dns_to_variant(dns: string): GLib.Variant
export function utils_ip4_get_default_prefix(ip: number): number
export function utils_ip4_netmask_to_prefix(netmask: number): number
export function utils_ip4_prefix_to_netmask(prefix: number): number
export function utils_ip4_routes_from_variant(value: GLib.Variant): IPRoute[]
export function utils_ip4_routes_to_variant(routes: IPRoute[]): GLib.Variant
export function utils_ip6_addresses_from_variant(value: GLib.Variant): [ /* returnType */ IPAddress[], /* out_gateway */ string | null ]
export function utils_ip6_addresses_to_variant(addresses: IPAddress[], gateway?: string | null): GLib.Variant
export function utils_ip6_dns_from_variant(value: GLib.Variant): string
export function utils_ip6_dns_to_variant(dns: string): GLib.Variant
export function utils_ip6_routes_from_variant(value: GLib.Variant): IPRoute[]
export function utils_ip6_routes_to_variant(routes: IPRoute[]): GLib.Variant
export function utils_ip_addresses_from_variant(value: GLib.Variant, family: number): IPAddress[]
export function utils_ip_addresses_to_variant(addresses: IPAddress[]): GLib.Variant
export function utils_ip_routes_from_variant(value: GLib.Variant, family: number): IPRoute[]
export function utils_ip_routes_to_variant(routes: IPRoute[]): GLib.Variant
export function utils_ipaddr_valid(family: number, ip: string): boolean
export function utils_is_empty_ssid(ssid: Gjs.byteArray.ByteArray): boolean
export function utils_is_json_object(str: string): boolean
export function utils_is_uuid(str?: string | null): boolean
export function utils_is_valid_iface_name(name?: string | null): boolean
export function utils_parse_variant_attributes(string: string, attr_separator: number, key_value_separator: number, ignore_unknown: boolean, spec: VariantAttributeSpec): GLib.HashTable
export function utils_same_ssid(ssid1: Gjs.byteArray.ByteArray, ssid2: Gjs.byteArray.ByteArray, ignore_trailing_null: boolean): boolean
export function utils_security_valid(type: UtilsSecurityType, wifi_caps: DeviceWifiCapabilities, have_ap: boolean, adhoc: boolean, ap_flags: TODO_80211ApFlags, ap_wpa: TODO_80211ApSecurityFlags, ap_rsn: TODO_80211ApSecurityFlags): boolean
export function utils_sriov_vf_from_str(str: string): SriovVF
export function utils_sriov_vf_to_str(vf: SriovVF, omit_index: boolean): string
export function utils_ssid_to_utf8(ssid: Gjs.byteArray.ByteArray): string
export function utils_tc_action_from_str(str: string): TCAction
export function utils_tc_action_to_str(action: TCAction): string
export function utils_tc_qdisc_from_str(str: string): TCQdisc
export function utils_tc_qdisc_to_str(qdisc: TCQdisc): string
export function utils_tc_tfilter_from_str(str: string): TCTfilter
export function utils_tc_tfilter_to_str(tfilter: TCTfilter): string
export function utils_uuid_generate(): string
export function utils_version(): number
export function utils_wep_key_valid(key: string, wep_type: WepKeyType): boolean
export function utils_wifi_2ghz_freqs(): number
export function utils_wifi_5ghz_freqs(): number
export function utils_wifi_channel_to_freq(channel: number, band: string): number
export function utils_wifi_find_next_channel(channel: number, direction: number, band: string): number
export function utils_wifi_freq_to_channel(freq: number): number
export function utils_wifi_is_channel_valid(channel: number, band: string): boolean
export function utils_wifi_strength_bars(strength: number): string
export function utils_wpa_psk_valid(psk: string): boolean
export function vpn_editor_plugin_load(plugin_name: string, check_service: string): VpnEditorPlugin
export function vpn_editor_plugin_load_from_file(plugin_name: string, check_service: string, check_owner: number, check_file: UtilsCheckFilePredicate): VpnEditorPlugin
export function vpn_plugin_error_quark(): GLib.Quark
export interface SecretAgentOldDeleteSecretsFunc {
    (agent: SecretAgentOld, connection: Connection, error: GLib.Error): void
}
export interface SecretAgentOldGetSecretsFunc {
    (agent: SecretAgentOld, connection: Connection, secrets: GLib.Variant, error: GLib.Error): void
}
export interface SecretAgentOldSaveSecretsFunc {
    (agent: SecretAgentOld, connection: Connection, error: GLib.Error): void
}
export interface SettingClearSecretsWithFlagsFn {
    (setting: Setting, secret: string, flags: SettingSecretFlags): boolean
}
export interface SettingValueIterFn {
    (setting: Setting, key: string, value: any, flags: GObject.ParamFlags): void
}
export interface UtilsCheckFilePredicate {
    (filename: string, stat?: object | null): boolean
}
export interface UtilsFileSearchInPathsPredicate {
    (filename: string): boolean
}
export interface UtilsPredicateStr {
    (str: string): boolean
}
export interface VpnIterFunc {
    (key: string, value: string): void
}
export interface _ConnectionForEachSecretFunc {
    (flags: SettingSecretFlags): boolean
}
export class Connection {
    /* Methods of NM.Connection */
    add_setting(setting: Setting): void
    clear_secrets(): void
    clear_secrets_with_flags(func?: SettingClearSecretsWithFlagsFn | null): void
    clear_settings(): void
    compare(b: Connection, flags: SettingCompareFlags): boolean
    diff(b: Connection, flags: SettingCompareFlags, out_settings: GLib.HashTable): boolean
    dump(): void
    for_each_setting_value(func: SettingValueIterFn): void
    get_connection_type(): string
    get_id(): string
    get_interface_name(): string
    get_path(): string
    get_setting(setting_type: GObject.Type): Setting
    get_setting_802_1x(): Setting8021x
    get_setting_adsl(): SettingAdsl
    get_setting_bluetooth(): SettingBluetooth
    get_setting_bond(): SettingBond
    get_setting_bridge(): SettingBridge
    get_setting_bridge_port(): SettingBridgePort
    get_setting_by_name(name: string): Setting
    get_setting_cdma(): SettingCdma
    get_setting_connection(): SettingConnection
    get_setting_dcb(): SettingDcb
    get_setting_dummy(): SettingDummy
    get_setting_generic(): SettingGeneric
    get_setting_gsm(): SettingGsm
    get_setting_infiniband(): SettingInfiniband
    get_setting_ip4_config(): SettingIP4Config
    get_setting_ip6_config(): SettingIP6Config
    get_setting_ip_tunnel(): SettingIPTunnel
    get_setting_macsec(): SettingMacsec
    get_setting_macvlan(): SettingMacvlan
    get_setting_olpc_mesh(): SettingOlpcMesh
    get_setting_ovs_bridge(): SettingOvsBridge
    get_setting_ovs_interface(): SettingOvsInterface
    get_setting_ovs_patch(): SettingOvsPatch
    get_setting_ovs_port(): SettingOvsPort
    get_setting_ppp(): SettingPpp
    get_setting_pppoe(): SettingPppoe
    get_setting_proxy(): SettingProxy
    get_setting_serial(): SettingSerial
    get_setting_tc_config(): SettingTCConfig
    get_setting_team(): SettingTeam
    get_setting_team_port(): SettingTeamPort
    get_setting_tun(): SettingTun
    get_setting_vlan(): SettingVlan
    get_setting_vpn(): SettingVpn
    get_setting_vxlan(): SettingVxlan
    get_setting_wimax(): SettingWimax
    get_setting_wired(): SettingWired
    get_setting_wireless(): SettingWireless
    get_setting_wireless_security(): SettingWirelessSecurity
    get_settings(): Setting[]
    get_uuid(): string
    get_virtual_device_description(): string
    is_type(type: string): boolean
    is_virtual(): boolean
    need_secrets(): [ /* returnType */ string, /* hints */ string[] | null ]
    normalize(parameters?: GLib.HashTable | null): [ /* returnType */ boolean, /* modified */ boolean | null ]
    remove_setting(setting_type: GObject.Type): void
    replace_settings(new_settings: GLib.Variant): boolean
    replace_settings_from_connection(new_connection: Connection): void
    set_path(path: string): void
    to_dbus(flags: ConnectionSerializationFlags): GLib.Variant
    update_secrets(setting_name: string, secrets: GLib.Variant): boolean
    verify(): boolean
    verify_secrets(): boolean
    /* Virtual methods of NM.Connection */
    vfunc_changed(): void
    vfunc_secrets_cleared(): void
    vfunc_secrets_updated(setting: string): void
    /* Signals of NM.Connection */
    connect(sigName: "changed", callback: (($obj: Connection) => void)): number
    connect_after(sigName: "changed", callback: (($obj: Connection) => void)): number
    emit(sigName: "changed"): void
    connect(sigName: "secrets-cleared", callback: (($obj: Connection) => void)): number
    connect_after(sigName: "secrets-cleared", callback: (($obj: Connection) => void)): number
    emit(sigName: "secrets-cleared"): void
    connect(sigName: "secrets-updated", callback: (($obj: Connection, setting_name: string) => void)): number
    connect_after(sigName: "secrets-updated", callback: (($obj: Connection, setting_name: string) => void)): number
    emit(sigName: "secrets-updated", setting_name: string): void
    static name: string
}
export class VpnEditor {
    /* Methods of NM.VpnEditor */
    get_widget(): GObject.Object
    update_connection(connection: Connection): boolean
    /* Virtual methods of NM.VpnEditor */
    vfunc_changed(): void
    vfunc_get_widget(): GObject.Object
    vfunc_update_connection(connection: Connection): boolean
    /* Signals of NM.VpnEditor */
    connect(sigName: "changed", callback: (($obj: VpnEditor) => void)): number
    connect_after(sigName: "changed", callback: (($obj: VpnEditor) => void)): number
    emit(sigName: "changed"): void
    static name: string
}
export class VpnEditorPlugin {
    /* Properties of NM.VpnEditorPlugin */
    readonly description: string
    readonly name: string
    readonly service: string
    /* Methods of NM.VpnEditorPlugin */
    export(path: string, connection: Connection): boolean
    get_capabilities(): VpnEditorPluginCapability
    get_editor(connection: Connection): VpnEditor
    get_plugin_info(): VpnPluginInfo
    get_suggested_filename(connection: Connection): string
    get_vt(vt_size: number): [ /* returnType */ number, /* vt */ VpnEditorPluginVT ]
    import(path: string): Connection
    set_plugin_info(plugin_info?: VpnPluginInfo | null): void
    /* Virtual methods of NM.VpnEditorPlugin */
    vfunc_export_to_file(path: string, connection: Connection): boolean
    vfunc_get_capabilities(): VpnEditorPluginCapability
    vfunc_get_editor(connection: Connection): VpnEditor
    vfunc_get_suggested_filename(connection: Connection): string
    vfunc_get_vt(out_vt_size: number): VpnEditorPluginVT
    vfunc_notify_plugin_info_set(plugin_info: VpnPluginInfo): void
    static name: string
    /* Static methods and pseudo-constructors */
    static load(plugin_name: string, check_service: string): VpnEditorPlugin
    static load_from_file(plugin_name: string, check_service: string, check_owner: number, check_file: UtilsCheckFilePredicate): VpnEditorPlugin
}
export interface AccessPoint_ConstructProps extends Object_ConstructProps {
}
export class AccessPoint {
    /* Properties of NM.AccessPoint */
    readonly bssid: string
    readonly flags: TODO_80211ApFlags
    readonly frequency: number
    readonly hw_address: string
    readonly last_seen: number
    readonly max_bitrate: number
    readonly mode: TODO_80211Mode
    readonly rsn_flags: TODO_80211ApSecurityFlags
    readonly ssid: Gjs.byteArray.ByteArray
    readonly strength: number
    readonly wpa_flags: TODO_80211ApSecurityFlags
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.AccessPoint */
    connection_valid(connection: Connection): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_bssid(): string
    get_flags(): TODO_80211ApFlags
    get_frequency(): number
    get_last_seen(): number
    get_max_bitrate(): number
    get_mode(): TODO_80211Mode
    get_rsn_flags(): TODO_80211ApSecurityFlags
    get_ssid(): Gjs.byteArray.ByteArray
    get_strength(): number
    get_wpa_flags(): TODO_80211ApSecurityFlags
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::bssid", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bssid", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::frequency", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frequency", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-seen", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-seen", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::max-bitrate", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-bitrate", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rsn-flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rsn-flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ssid", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ssid", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::strength", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::strength", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wpa-flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wpa-flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: AccessPoint_ConstructProps)
    _init (config?: AccessPoint_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ActiveConnection_ConstructProps extends Object_ConstructProps {
}
export class ActiveConnection {
    /* Properties of NM.ActiveConnection */
    readonly connection: RemoteConnection
    readonly "default": boolean
    readonly default6: boolean
    readonly devices: Device[]
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly id: string
    readonly ip4_config: IPConfig
    readonly ip6_config: IPConfig
    readonly master: Device
    readonly specific_object_path: string
    readonly state: ActiveConnectionState
    readonly state_flags: number
    readonly type: string
    readonly uuid: string
    readonly vpn: boolean
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.ActiveConnection */
    get_connection(): RemoteConnection
    get_connection_type(): string
    get_default(): boolean
    get_default6(): boolean
    get_devices(): Device[]
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_id(): string
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_master(): Device
    get_specific_object_path(): string
    get_state(): ActiveConnectionState
    get_state_flags(): ActivationStateFlags
    get_state_reason(): ActiveConnectionStateReason
    get_uuid(): string
    get_vpn(): boolean
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.ActiveConnection */
    connect(sigName: "state-changed", callback: (($obj: ActiveConnection, state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: ActiveConnection, state: number, reason: number) => void)): number
    emit(sigName: "state-changed", state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::connection", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default6", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default6", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::devices", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devices", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::master", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::master", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::specific-object-path", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specific-object-path", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-flags", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-flags", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::uuid", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vpn", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vpn", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ActiveConnection_ConstructProps)
    _init (config?: ActiveConnection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Checkpoint_ConstructProps extends Object_ConstructProps {
}
export class Checkpoint {
    /* Properties of NM.Checkpoint */
    readonly created: number
    readonly devices: Device[]
    readonly rollback_timeout: number
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Checkpoint */
    get_created(): number
    get_devices(): Device[]
    get_rollback_timeout(): number
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::created", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::created", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::devices", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devices", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rollback-timeout", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rollback-timeout", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Checkpoint_ConstructProps)
    _init (config?: Checkpoint_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Client_ConstructProps extends GObject.Object_ConstructProps {
    connectivity_check_enabled?: boolean
    dbus_connection?: Gio.DBusConnection
    instance_flags?: number
    networking_enabled?: boolean
    wimax_enabled?: boolean
    wireless_enabled?: boolean
    wwan_enabled?: boolean
}
export class Client {
    /* Properties of NM.Client */
    readonly activating_connection: ActiveConnection
    readonly active_connections: ActiveConnection[]
    readonly all_devices: Device[]
    readonly can_modify: boolean
    readonly capabilities: number[]
    readonly checkpoints: Checkpoint[]
    readonly connections: RemoteConnection[]
    readonly connectivity: ConnectivityState
    readonly connectivity_check_available: boolean
    connectivity_check_enabled: boolean
    readonly connectivity_check_uri: string
    readonly dbus_name_owner: string
    readonly devices: Device[]
    readonly dns_configuration: DnsEntry[]
    readonly dns_mode: string
    readonly dns_rc_manager: string
    readonly hostname: string
    instance_flags: number
    readonly metered: number
    networking_enabled: boolean
    readonly nm_running: boolean
    readonly permissions_state: Ternary
    readonly primary_connection: ActiveConnection
    readonly startup: boolean
    readonly state: State
    readonly version: string
    wimax_enabled: boolean
    readonly wimax_hardware_enabled: boolean
    wireless_enabled: boolean
    readonly wireless_hardware_enabled: boolean
    wwan_enabled: boolean
    readonly wwan_hardware_enabled: boolean
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Client */
    activate_connection_async(connection?: Connection | null, device?: Device | null, specific_object?: string | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    activate_connection_finish(result: Gio.AsyncResult): ActiveConnection
    add_and_activate_connection2(partial: Connection | null, device: Device, specific_object: string | null, options: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    add_and_activate_connection2_finish(result: Gio.AsyncResult, out_result?: GLib.Variant | null): ActiveConnection
    add_and_activate_connection_async(partial: Connection | null, device: Device, specific_object?: string | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    add_and_activate_connection_finish(result: Gio.AsyncResult): ActiveConnection
    add_connection2(settings: GLib.Variant, flags: SettingsAddConnection2Flags, args: GLib.Variant | null, ignore_out_result: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    add_connection2_finish(result: Gio.AsyncResult): [ /* returnType */ RemoteConnection, /* out_result */ GLib.Variant | null ]
    add_connection_async(connection: Connection, save_to_disk: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    add_connection_finish(result: Gio.AsyncResult): RemoteConnection
    check_connectivity(cancellable?: Gio.Cancellable | null): ConnectivityState
    check_connectivity_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    check_connectivity_finish(result: Gio.AsyncResult): ConnectivityState
    checkpoint_adjust_rollback_timeout(checkpoint_path: string, add_timeout: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    checkpoint_adjust_rollback_timeout_finish(result: Gio.AsyncResult): boolean
    checkpoint_create(devices: Device[], rollback_timeout: number, flags: CheckpointCreateFlags, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    checkpoint_create_finish(result: Gio.AsyncResult): Checkpoint
    checkpoint_destroy(checkpoint_path: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    checkpoint_destroy_finish(result: Gio.AsyncResult): boolean
    checkpoint_rollback(checkpoint_path: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    checkpoint_rollback_finish(result: Gio.AsyncResult): GLib.HashTable
    connectivity_check_get_available(): boolean
    connectivity_check_get_enabled(): boolean
    connectivity_check_get_uri(): string
    connectivity_check_set_enabled(enabled: boolean): void
    dbus_call(object_path: string, interface_name: string, method_name: string, parameters: GLib.Variant | null, reply_type: GLib.VariantType | null, timeout_msec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    dbus_call_finish(result: Gio.AsyncResult): GLib.Variant
    dbus_set_property(object_path: string, interface_name: string, property_name: string, value: GLib.Variant, timeout_msec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    dbus_set_property_finish(result: Gio.AsyncResult): boolean
    deactivate_connection(active: ActiveConnection, cancellable?: Gio.Cancellable | null): boolean
    deactivate_connection_async(active: ActiveConnection, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deactivate_connection_finish(result: Gio.AsyncResult): boolean
    get_activating_connection(): ActiveConnection
    get_active_connections(): ActiveConnection[]
    get_all_devices(): Device[]
    get_capabilities(): number[]
    get_checkpoints(): Checkpoint[]
    get_connection_by_id(id: string): RemoteConnection
    get_connection_by_path(path: string): RemoteConnection
    get_connection_by_uuid(uuid: string): RemoteConnection
    get_connections(): RemoteConnection[]
    get_connectivity(): ConnectivityState
    get_context_busy_watcher(): GObject.Object
    get_dbus_connection(): Gio.DBusConnection
    get_dbus_name_owner(): string
    get_device_by_iface(iface: string): Device
    get_device_by_path(object_path: string): Device
    get_devices(): Device[]
    get_dns_configuration(): DnsEntry[]
    get_dns_mode(): string
    get_dns_rc_manager(): string
    get_instance_flags(): ClientInstanceFlags
    get_logging(level?: string | null, domains?: string | null): boolean
    get_main_context(): GLib.MainContext
    get_metered(): Metered
    get_nm_running(): boolean
    get_object_by_path(dbus_path: string): Object
    get_permission_result(permission: ClientPermission): ClientPermissionResult
    get_permissions_state(): Ternary
    get_primary_connection(): ActiveConnection
    get_startup(): boolean
    get_state(): State
    get_version(): string
    load_connections(filenames: string[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* failures */ string ]
    load_connections_async(filenames: string[], cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    load_connections_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* failures */ string[] ]
    networking_get_enabled(): boolean
    networking_set_enabled(enabled: boolean): boolean
    reload(flags: ManagerReloadFlags, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reload_connections(cancellable?: Gio.Cancellable | null): boolean
    reload_connections_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reload_connections_finish(result: Gio.AsyncResult): boolean
    reload_finish(result: Gio.AsyncResult): boolean
    save_hostname(hostname?: string | null, cancellable?: Gio.Cancellable | null): boolean
    save_hostname_async(hostname?: string | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    save_hostname_finish(result: Gio.AsyncResult): boolean
    set_logging(level?: string | null, domains?: string | null): boolean
    wimax_get_enabled(): boolean
    wimax_hardware_get_enabled(): boolean
    wimax_set_enabled(enabled: boolean): void
    wireless_get_enabled(): boolean
    wireless_hardware_get_enabled(): boolean
    wireless_set_enabled(enabled: boolean): void
    wwan_get_enabled(): boolean
    wwan_hardware_get_enabled(): boolean
    wwan_set_enabled(enabled: boolean): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    init_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    init_finish(res: Gio.AsyncResult): boolean
    new_finish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of NM.Client */
    vfunc_init_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    vfunc_init_finish(res: Gio.AsyncResult): boolean
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Client */
    connect(sigName: "active-connection-added", callback: (($obj: Client, active_connection: ActiveConnection) => void)): number
    connect_after(sigName: "active-connection-added", callback: (($obj: Client, active_connection: ActiveConnection) => void)): number
    emit(sigName: "active-connection-added", active_connection: ActiveConnection): void
    connect(sigName: "active-connection-removed", callback: (($obj: Client, active_connection: ActiveConnection) => void)): number
    connect_after(sigName: "active-connection-removed", callback: (($obj: Client, active_connection: ActiveConnection) => void)): number
    emit(sigName: "active-connection-removed", active_connection: ActiveConnection): void
    connect(sigName: "any-device-added", callback: (($obj: Client, device: Device) => void)): number
    connect_after(sigName: "any-device-added", callback: (($obj: Client, device: Device) => void)): number
    emit(sigName: "any-device-added", device: Device): void
    connect(sigName: "any-device-removed", callback: (($obj: Client, device: Device) => void)): number
    connect_after(sigName: "any-device-removed", callback: (($obj: Client, device: Device) => void)): number
    emit(sigName: "any-device-removed", device: Device): void
    connect(sigName: "connection-added", callback: (($obj: Client, connection: RemoteConnection) => void)): number
    connect_after(sigName: "connection-added", callback: (($obj: Client, connection: RemoteConnection) => void)): number
    emit(sigName: "connection-added", connection: RemoteConnection): void
    connect(sigName: "connection-removed", callback: (($obj: Client, connection: RemoteConnection) => void)): number
    connect_after(sigName: "connection-removed", callback: (($obj: Client, connection: RemoteConnection) => void)): number
    emit(sigName: "connection-removed", connection: RemoteConnection): void
    connect(sigName: "device-added", callback: (($obj: Client, device: Device) => void)): number
    connect_after(sigName: "device-added", callback: (($obj: Client, device: Device) => void)): number
    emit(sigName: "device-added", device: Device): void
    connect(sigName: "device-removed", callback: (($obj: Client, device: Device) => void)): number
    connect_after(sigName: "device-removed", callback: (($obj: Client, device: Device) => void)): number
    emit(sigName: "device-removed", device: Device): void
    connect(sigName: "permission-changed", callback: (($obj: Client, permission: number, result: number) => void)): number
    connect_after(sigName: "permission-changed", callback: (($obj: Client, permission: number, result: number) => void)): number
    emit(sigName: "permission-changed", permission: number, result: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::activating-connection", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activating-connection", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connections", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connections", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::all-devices", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::all-devices", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::can-modify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-modify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::checkpoints", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::checkpoints", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connections", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connections", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connectivity", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connectivity", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connectivity-check-available", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connectivity-check-available", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connectivity-check-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connectivity-check-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connectivity-check-uri", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connectivity-check-uri", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dbus-name-owner", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dbus-name-owner", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::devices", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devices", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-configuration", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-configuration", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-mode", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-mode", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-rc-manager", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-rc-manager", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hostname", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hostname", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::instance-flags", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::instance-flags", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::networking-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::networking-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-running", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-running", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::permissions-state", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::permissions-state", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::primary-connection", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-connection", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::startup", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::startup", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::version", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::version", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wimax-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wimax-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wimax-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wimax-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wireless-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wireless-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wireless-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wireless-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wwan-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wwan-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wwan-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wwan-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Client_ConstructProps)
    _init (config?: Client_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(cancellable?: Gio.Cancellable | null): Client
    static new_finish(result: Gio.AsyncResult): Client
    static new_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv_async(object_type: GObject.Type, n_parameters: number, parameters: GObject.Parameter, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
export interface Device_ConstructProps extends Object_ConstructProps {
    autoconnect?: boolean
}
export class Device {
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: Device, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: Device, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::active-connection", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Device_ConstructProps)
    _init (config?: Device_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static disambiguate_names(devices: Device[]): string[]
    static $gtype: GObject.Type
}
export interface Device6Lowpan_ConstructProps extends Device_ConstructProps {
}
export class Device6Lowpan {
    /* Properties of NM.Device6Lowpan */
    readonly parent: Device
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Device6Lowpan */
    get_parent(): Device
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: Device6Lowpan, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: Device6Lowpan, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parent", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Device6Lowpan_ConstructProps)
    _init (config?: Device6Lowpan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceAdsl_ConstructProps extends Device_ConstructProps {
}
export class DeviceAdsl {
    /* Properties of NM.DeviceAdsl */
    readonly carrier: boolean
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceAdsl */
    get_carrier(): boolean
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceAdsl, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceAdsl, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::carrier", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceAdsl_ConstructProps)
    _init (config?: DeviceAdsl_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceBond_ConstructProps extends Device_ConstructProps {
}
export class DeviceBond {
    /* Properties of NM.DeviceBond */
    readonly carrier: boolean
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceBond */
    get_carrier(): boolean
    get_slaves(): Device[]
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceBond, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceBond, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::carrier", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::slaves", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceBond_ConstructProps)
    _init (config?: DeviceBond_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceBridge_ConstructProps extends Device_ConstructProps {
}
export class DeviceBridge {
    /* Properties of NM.DeviceBridge */
    readonly carrier: boolean
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceBridge */
    get_carrier(): boolean
    get_slaves(): Device[]
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceBridge, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceBridge, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::carrier", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::slaves", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceBridge_ConstructProps)
    _init (config?: DeviceBridge_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceBt_ConstructProps extends Device_ConstructProps {
}
export class DeviceBt {
    /* Properties of NM.DeviceBt */
    readonly bt_capabilities: BluetoothCapabilities
    readonly name: string
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceBt */
    get_capabilities(): BluetoothCapabilities
    get_name(): string
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceBt, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceBt, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::bt-capabilities", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bt-capabilities", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceBt_ConstructProps)
    _init (config?: DeviceBt_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceDummy_ConstructProps extends Device_ConstructProps {
}
export class DeviceDummy {
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceDummy, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceDummy, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceDummy_ConstructProps)
    _init (config?: DeviceDummy_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceEthernet_ConstructProps extends Device_ConstructProps {
}
export class DeviceEthernet {
    /* Properties of NM.DeviceEthernet */
    readonly carrier: boolean
    readonly perm_hw_address: string
    readonly s390_subchannels: string[]
    readonly speed: number
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceEthernet */
    get_carrier(): boolean
    get_permanent_hw_address(): string
    get_s390_subchannels(): string[]
    get_speed(): number
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceEthernet, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceEthernet, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::carrier", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::perm-hw-address", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::perm-hw-address", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::s390-subchannels", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::s390-subchannels", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::speed", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::speed", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceEthernet_ConstructProps)
    _init (config?: DeviceEthernet_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceGeneric_ConstructProps extends Device_ConstructProps {
}
export class DeviceGeneric {
    /* Properties of NM.DeviceGeneric */
    readonly type_description: string
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceGeneric, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceGeneric, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::type-description", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-description", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceGeneric_ConstructProps)
    _init (config?: DeviceGeneric_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceIPTunnel_ConstructProps extends Device_ConstructProps {
}
export class DeviceIPTunnel {
    /* Properties of NM.DeviceIPTunnel */
    readonly encapsulation_limit: number
    readonly flags: number
    readonly flow_label: number
    readonly input_key: string
    readonly local: string
    readonly mode: number
    readonly output_key: string
    readonly parent: Device
    readonly path_mtu_discovery: boolean
    readonly remote: string
    readonly tos: number
    readonly ttl: number
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceIPTunnel */
    get_encapsulation_limit(): number
    get_flags(): IPTunnelFlags
    get_flow_label(): number
    get_input_key(): string
    get_local(): string
    get_mode(): IPTunnelMode
    get_output_key(): string
    get_parent(): Device
    get_path_mtu_discovery(): boolean
    get_remote(): string
    get_tos(): number
    get_ttl(): number
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceIPTunnel, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceIPTunnel, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::encapsulation-limit", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encapsulation-limit", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flags", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flow-label", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flow-label", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::input-key", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-key", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::output-key", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::output-key", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path-mtu-discovery", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path-mtu-discovery", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::remote", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remote", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tos", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tos", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ttl", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ttl", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceIPTunnel_ConstructProps)
    _init (config?: DeviceIPTunnel_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceInfiniband_ConstructProps extends Device_ConstructProps {
}
export class DeviceInfiniband {
    /* Properties of NM.DeviceInfiniband */
    readonly carrier: boolean
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceInfiniband */
    get_carrier(): boolean
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceInfiniband, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceInfiniband, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::carrier", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceInfiniband_ConstructProps)
    _init (config?: DeviceInfiniband_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceMacsec_ConstructProps extends Device_ConstructProps {
}
export class DeviceMacsec {
    /* Properties of NM.DeviceMacsec */
    readonly cipher_suite: number
    readonly encoding_sa: number
    readonly encrypt: boolean
    readonly es: boolean
    readonly icv_length: number
    readonly include_sci: boolean
    readonly parent: Device
    readonly protect: boolean
    readonly replay_protect: boolean
    readonly scb: boolean
    readonly sci: number
    readonly validation: string
    readonly window: number
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceMacsec */
    get_cipher_suite(): number
    get_encoding_sa(): number
    get_encrypt(): boolean
    get_es(): boolean
    get_icv_length(): number
    get_include_sci(): boolean
    get_parent(): Device
    get_protect(): boolean
    get_replay_protect(): boolean
    get_scb(): boolean
    get_sci(): number
    get_validation(): string
    get_window(): number
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceMacsec, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceMacsec, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::cipher-suite", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cipher-suite", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::encoding-sa", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding-sa", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::encrypt", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encrypt", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::es", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::es", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::icv-length", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icv-length", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::include-sci", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::include-sci", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::protect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::replay-protect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::replay-protect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scb", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scb", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::sci", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sci", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::validation", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::window", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceMacsec_ConstructProps)
    _init (config?: DeviceMacsec_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceMacvlan_ConstructProps extends Device_ConstructProps {
}
export class DeviceMacvlan {
    /* Properties of NM.DeviceMacvlan */
    readonly mode: string
    readonly no_promisc: boolean
    readonly parent: Device
    readonly tap: boolean
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceMacvlan */
    get_mode(): string
    get_no_promisc(): boolean
    get_parent(): Device
    get_tap(): boolean
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceMacvlan, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceMacvlan, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::mode", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::no-promisc", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-promisc", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tap", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tap", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceMacvlan_ConstructProps)
    _init (config?: DeviceMacvlan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceModem_ConstructProps extends Device_ConstructProps {
}
export class DeviceModem {
    /* Properties of NM.DeviceModem */
    readonly apn: string
    readonly current_capabilities: DeviceModemCapabilities
    readonly device_id: string
    readonly modem_capabilities: DeviceModemCapabilities
    readonly operator_code: string
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceModem */
    get_apn(): string
    get_current_capabilities(): DeviceModemCapabilities
    get_device_id(): string
    get_modem_capabilities(): DeviceModemCapabilities
    get_operator_code(): string
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceModem, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceModem, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::apn", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::apn", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::current-capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-id", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-id", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::modem-capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::operator-code", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-code", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceModem_ConstructProps)
    _init (config?: DeviceModem_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceOlpcMesh_ConstructProps extends Device_ConstructProps {
}
export class DeviceOlpcMesh {
    /* Properties of NM.DeviceOlpcMesh */
    readonly active_channel: number
    readonly companion: DeviceWifi
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceOlpcMesh */
    get_active_channel(): number
    get_companion(): DeviceWifi
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceOlpcMesh, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceOlpcMesh, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::active-channel", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-channel", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::companion", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::companion", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceOlpcMesh_ConstructProps)
    _init (config?: DeviceOlpcMesh_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceOvsBridge_ConstructProps extends Device_ConstructProps {
}
export class DeviceOvsBridge {
    /* Properties of NM.DeviceOvsBridge */
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceOvsBridge */
    get_slaves(): Device[]
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceOvsBridge, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceOvsBridge, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::slaves", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceOvsBridge_ConstructProps)
    _init (config?: DeviceOvsBridge_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceOvsInterface_ConstructProps extends Device_ConstructProps {
}
export class DeviceOvsInterface {
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceOvsInterface, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceOvsInterface, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceOvsInterface_ConstructProps)
    _init (config?: DeviceOvsInterface_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceOvsPort_ConstructProps extends Device_ConstructProps {
}
export class DeviceOvsPort {
    /* Properties of NM.DeviceOvsPort */
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceOvsPort */
    get_slaves(): Device[]
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceOvsPort, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceOvsPort, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::slaves", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceOvsPort_ConstructProps)
    _init (config?: DeviceOvsPort_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DevicePpp_ConstructProps extends Device_ConstructProps {
}
export class DevicePpp {
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DevicePpp, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DevicePpp, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::active-connection", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DevicePpp_ConstructProps)
    _init (config?: DevicePpp_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceTeam_ConstructProps extends Device_ConstructProps {
}
export class DeviceTeam {
    /* Properties of NM.DeviceTeam */
    readonly carrier: boolean
    readonly config: string
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceTeam */
    get_carrier(): boolean
    get_config(): string
    get_slaves(): Device[]
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceTeam, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceTeam, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::carrier", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::slaves", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceTeam_ConstructProps)
    _init (config?: DeviceTeam_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceTun_ConstructProps extends Device_ConstructProps {
}
export class DeviceTun {
    /* Properties of NM.DeviceTun */
    readonly group: number
    readonly mode: string
    readonly multi_queue: boolean
    readonly no_pi: boolean
    readonly owner: number
    readonly vnet_hdr: boolean
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceTun */
    get_group(): number
    get_mode(): string
    get_multi_queue(): boolean
    get_no_pi(): boolean
    get_owner(): number
    get_vnet_hdr(): boolean
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceTun, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceTun, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::group", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multi-queue", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multi-queue", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::no-pi", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-pi", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vnet-hdr", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vnet-hdr", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceTun_ConstructProps)
    _init (config?: DeviceTun_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceVlan_ConstructProps extends Device_ConstructProps {
}
export class DeviceVlan {
    /* Properties of NM.DeviceVlan */
    readonly carrier: boolean
    readonly parent: Device
    readonly vlan_id: number
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceVlan */
    get_carrier(): boolean
    get_parent(): Device
    get_vlan_id(): number
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceVlan, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceVlan, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::carrier", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vlan-id", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-id", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceVlan_ConstructProps)
    _init (config?: DeviceVlan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceVrf_ConstructProps extends Device_ConstructProps {
}
export class DeviceVrf {
    /* Properties of NM.DeviceVrf */
    readonly table: number
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceVrf */
    get_table(): number
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceVrf, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceVrf, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::table", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::table", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceVrf_ConstructProps)
    _init (config?: DeviceVrf_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceVxlan_ConstructProps extends Device_ConstructProps {
}
export class DeviceVxlan {
    /* Properties of NM.DeviceVxlan */
    readonly ageing: number
    readonly carrier: boolean
    readonly dst_port: number
    readonly group: string
    readonly id: number
    readonly l2miss: boolean
    readonly l3miss: boolean
    readonly learning: boolean
    readonly limit: number
    readonly local: string
    readonly parent: Device
    readonly proxy: boolean
    readonly rsc: boolean
    readonly src_port_max: number
    readonly src_port_min: number
    readonly tos: number
    readonly ttl: number
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceVxlan */
    get_ageing(): number
    get_carrier(): boolean
    get_dst_port(): number
    get_group(): string
    get_id(): number
    get_l2miss(): boolean
    get_l3miss(): boolean
    get_learning(): boolean
    get_limit(): number
    get_local(): string
    get_parent(): Device
    get_proxy(): boolean
    get_rsc(): boolean
    get_src_port_max(): number
    get_src_port_min(): number
    get_tos(): number
    get_ttl(): number
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceVxlan, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceVxlan, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::ageing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ageing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::carrier", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dst-port", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dst-port", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::l2miss", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::l2miss", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::l3miss", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::l3miss", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::learning", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::learning", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::limit", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::limit", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proxy", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rsc", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rsc", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::src-port-max", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-port-max", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::src-port-min", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-port-min", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tos", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tos", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ttl", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ttl", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceVxlan_ConstructProps)
    _init (config?: DeviceVxlan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWifi_ConstructProps extends Device_ConstructProps {
}
export class DeviceWifi {
    /* Properties of NM.DeviceWifi */
    readonly access_points: AccessPoint[]
    readonly active_access_point: AccessPoint
    readonly bitrate: number
    readonly last_scan: number
    readonly mode: TODO_80211Mode
    readonly perm_hw_address: string
    readonly wireless_capabilities: DeviceWifiCapabilities
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceWifi */
    get_access_point_by_path(path: string): AccessPoint
    get_access_points(): AccessPoint[]
    get_active_access_point(): AccessPoint
    get_bitrate(): number
    get_capabilities(): DeviceWifiCapabilities
    get_last_scan(): number
    get_mode(): TODO_80211Mode
    get_permanent_hw_address(): string
    request_scan(cancellable?: Gio.Cancellable | null): boolean
    request_scan_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    request_scan_finish(result: Gio.AsyncResult): boolean
    request_scan_options(options: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    request_scan_options_async(options: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.DeviceWifi */
    connect(sigName: "access-point-added", callback: (($obj: DeviceWifi, ap: GObject.Object) => void)): number
    connect_after(sigName: "access-point-added", callback: (($obj: DeviceWifi, ap: GObject.Object) => void)): number
    emit(sigName: "access-point-added", ap: GObject.Object): void
    connect(sigName: "access-point-removed", callback: (($obj: DeviceWifi, ap: GObject.Object) => void)): number
    connect_after(sigName: "access-point-removed", callback: (($obj: DeviceWifi, ap: GObject.Object) => void)): number
    emit(sigName: "access-point-removed", ap: GObject.Object): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWifi, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWifi, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::access-points", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-points", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-access-point", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-access-point", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::bitrate", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bitrate", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-scan", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-scan", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::perm-hw-address", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::perm-hw-address", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wireless-capabilities", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wireless-capabilities", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceWifi_ConstructProps)
    _init (config?: DeviceWifi_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWifiP2P_ConstructProps extends Device_ConstructProps {
}
export class DeviceWifiP2P {
    /* Properties of NM.DeviceWifiP2P */
    readonly peers: WifiP2PPeer[]
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceWifiP2P */
    get_peer_by_path(path: string): WifiP2PPeer
    get_peers(): WifiP2PPeer[]
    start_find(options?: GLib.Variant | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    start_find_finish(result: Gio.AsyncResult): boolean
    stop_find(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    stop_find_finish(result: Gio.AsyncResult): boolean
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.DeviceWifiP2P */
    connect(sigName: "peer-added", callback: (($obj: DeviceWifiP2P, peer: GObject.Object) => void)): number
    connect_after(sigName: "peer-added", callback: (($obj: DeviceWifiP2P, peer: GObject.Object) => void)): number
    emit(sigName: "peer-added", peer: GObject.Object): void
    connect(sigName: "peer-removed", callback: (($obj: DeviceWifiP2P, peer: GObject.Object) => void)): number
    connect_after(sigName: "peer-removed", callback: (($obj: DeviceWifiP2P, peer: GObject.Object) => void)): number
    emit(sigName: "peer-removed", peer: GObject.Object): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWifiP2P, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWifiP2P, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::peers", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peers", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceWifiP2P_ConstructProps)
    _init (config?: DeviceWifiP2P_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWimax_ConstructProps extends Device_ConstructProps {
}
export class DeviceWimax {
    /* Properties of NM.DeviceWimax */
    readonly active_nsp: WimaxNsp
    readonly bsid: string
    readonly center_frequency: number
    readonly cinr: number
    readonly hw_address: string
    readonly nsps: WimaxNsp[]
    readonly rssi: number
    readonly tx_power: number
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceWimax */
    get_active_nsp(): WimaxNsp
    get_bsid(): string
    get_center_frequency(): number
    get_cinr(): number
    get_hw_address(): string
    get_nsp_by_path(path: string): WimaxNsp
    get_nsps(): WimaxNsp[]
    get_rssi(): number
    get_tx_power(): number
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.DeviceWimax */
    connect(sigName: "nsp-added", callback: (($obj: DeviceWimax, nsp: GObject.Object) => void)): number
    connect_after(sigName: "nsp-added", callback: (($obj: DeviceWimax, nsp: GObject.Object) => void)): number
    emit(sigName: "nsp-added", nsp: GObject.Object): void
    connect(sigName: "nsp-removed", callback: (($obj: DeviceWimax, nsp: GObject.Object) => void)): number
    connect_after(sigName: "nsp-removed", callback: (($obj: DeviceWimax, nsp: GObject.Object) => void)): number
    emit(sigName: "nsp-removed", nsp: GObject.Object): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWimax, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWimax, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::active-nsp", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-nsp", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::bsid", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bsid", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::center-frequency", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::center-frequency", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cinr", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cinr", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nsps", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nsps", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rssi", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rssi", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tx-power", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tx-power", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceWimax_ConstructProps)
    _init (config?: DeviceWimax_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWireGuard_ConstructProps extends Device_ConstructProps {
}
export class DeviceWireGuard {
    /* Properties of NM.DeviceWireGuard */
    readonly fwmark: number
    readonly listen_port: number
    readonly public_key: Gjs.byteArray.ByteArray
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DeviceWireGuard */
    get_fwmark(): number
    get_listen_port(): number
    get_public_key(): Gjs.byteArray.ByteArray
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWireGuard, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWireGuard, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::fwmark", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fwmark", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::listen-port", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::listen-port", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::public-key", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-key", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceWireGuard_ConstructProps)
    _init (config?: DeviceWireGuard_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWpan_ConstructProps extends Device_ConstructProps {
}
export class DeviceWpan {
    /* Properties of NM.Device */
    readonly active_connection: ActiveConnection
    autoconnect: boolean
    readonly available_connections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly device_type: DeviceType
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly driver: string
    readonly driver_version: string
    readonly firmware_missing: boolean
    readonly firmware_version: string
    readonly hw_address: string
    readonly interface: string
    readonly interface_flags: number
    readonly ip_interface: string
    readonly ip4_config: IPConfig
    readonly ip4_connectivity: ConnectivityState
    readonly ip6_config: IPConfig
    readonly ip6_connectivity: ConnectivityState
    readonly lldp_neighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nm_plugin_missing: boolean
    readonly path: string
    readonly physical_port_id: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly state_reason: number
    readonly udi: string
    readonly vendor: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Device */
    connection_compatible(connection: Connection): boolean
    connection_valid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnect_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_active_connection(): ActiveConnection
    get_applied_connection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_applied_connection_async(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_applied_connection_finish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* version_id */ number | null ]
    get_autoconnect(): boolean
    get_available_connections(): RemoteConnection[]
    get_capabilities(): DeviceCapabilities
    get_connectivity(addr_family: number): ConnectivityState
    get_description(): string
    get_device_type(): DeviceType
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_driver(): string
    get_driver_version(): string
    get_firmware_missing(): boolean
    get_firmware_version(): string
    get_hw_address(): string
    get_iface(): string
    get_interface_flags(): DeviceInterfaceFlags
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_ip_iface(): string
    get_lldp_neighbors(): LldpNeighbor[]
    get_managed(): boolean
    get_metered(): Metered
    get_mtu(): number
    get_nm_plugin_missing(): boolean
    get_path(): string
    get_physical_port_id(): string
    get_product(): string
    get_setting_type(): GObject.Type
    get_state(): DeviceState
    get_state_reason(): DeviceStateReason
    get_type_description(): string
    get_udi(): string
    get_vendor(): string
    is_real(): boolean
    is_software(): boolean
    reapply(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapply_async(connection: Connection | null, version_id: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapply_finish(result: Gio.AsyncResult): boolean
    set_autoconnect(autoconnect: boolean): void
    set_managed(managed: boolean): void
    /* Methods of NM.Object */
    get_client(): Client
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWpan, new_state: number, old_state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWpan, new_state: number, old_state: number, reason: number) => void)): number
    emit(sigName: "state-changed", new_state: number, old_state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::managed", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::product", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::real", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::udi", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceWpan_ConstructProps)
    _init (config?: DeviceWpan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DhcpConfig_ConstructProps extends Object_ConstructProps {
}
export class DhcpConfig {
    /* Properties of NM.DhcpConfig */
    readonly family: number
    readonly options: GLib.HashTable
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.DhcpConfig */
    get_family(): number
    get_one_option(option: string): string
    get_options(): GLib.HashTable
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::family", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::family", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::options", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::options", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DhcpConfig_ConstructProps)
    _init (config?: DhcpConfig_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IPConfig_ConstructProps extends Object_ConstructProps {
}
export class IPConfig {
    /* Properties of NM.IPConfig */
    readonly addresses: object[]
    readonly domains: string[]
    readonly family: number
    readonly gateway: string
    readonly nameservers: string[]
    readonly routes: IPRoute[]
    readonly searches: string[]
    readonly wins_servers: string[]
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.IPConfig */
    get_addresses(): IPAddress[]
    get_domains(): string[]
    get_family(): number
    get_gateway(): string
    get_nameservers(): string[]
    get_routes(): IPRoute[]
    get_searches(): string[]
    get_wins_servers(): string[]
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::addresses", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addresses", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::domains", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domains", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::family", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::family", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::gateway", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nameservers", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nameservers", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::routes", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::routes", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::searches", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::searches", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wins-servers", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wins-servers", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IPConfig_ConstructProps)
    _init (config?: IPConfig_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Object_ConstructProps extends GObject.Object_ConstructProps {
}
export class Object {
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::path", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Object_ConstructProps)
    _init (config?: Object_ConstructProps): void
    static $gtype: GObject.Type
}
export interface RemoteConnection_ConstructProps extends Object_ConstructProps {
}
export class RemoteConnection {
    /* Properties of NM.RemoteConnection */
    readonly filename: string
    readonly flags: number
    readonly unsaved: boolean
    readonly visible: boolean
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.RemoteConnection */
    commit_changes(save_to_disk: boolean, cancellable?: Gio.Cancellable | null): boolean
    commit_changes_async(save_to_disk: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    commit_changes_finish(result: Gio.AsyncResult): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    delete_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    delete_finish(result: Gio.AsyncResult): boolean
    get_filename(): string
    get_flags(): SettingsConnectionFlags
    get_secrets(setting_name: string, cancellable?: Gio.Cancellable | null): GLib.Variant
    get_secrets_async(setting_name: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get_secrets_finish(result: Gio.AsyncResult): GLib.Variant
    get_unsaved(): boolean
    get_visible(): boolean
    save(cancellable?: Gio.Cancellable | null): boolean
    save_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    save_finish(result: Gio.AsyncResult): boolean
    update2(settings: GLib.Variant | null, flags: SettingsUpdate2Flags, args?: GLib.Variant | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    update2_finish(result: Gio.AsyncResult): GLib.Variant
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of NM.Connection */
    add_setting(setting: Setting): void
    clear_secrets(): void
    clear_secrets_with_flags(func?: SettingClearSecretsWithFlagsFn | null): void
    clear_settings(): void
    compare(b: Connection, flags: SettingCompareFlags): boolean
    diff(b: Connection, flags: SettingCompareFlags, out_settings: GLib.HashTable): boolean
    dump(): void
    for_each_setting_value(func: SettingValueIterFn): void
    get_connection_type(): string
    get_id(): string
    get_interface_name(): string
    get_setting(setting_type: GObject.Type): Setting
    get_setting_802_1x(): Setting8021x
    get_setting_adsl(): SettingAdsl
    get_setting_bluetooth(): SettingBluetooth
    get_setting_bond(): SettingBond
    get_setting_bridge(): SettingBridge
    get_setting_bridge_port(): SettingBridgePort
    get_setting_by_name(name: string): Setting
    get_setting_cdma(): SettingCdma
    get_setting_connection(): SettingConnection
    get_setting_dcb(): SettingDcb
    get_setting_dummy(): SettingDummy
    get_setting_generic(): SettingGeneric
    get_setting_gsm(): SettingGsm
    get_setting_infiniband(): SettingInfiniband
    get_setting_ip4_config(): SettingIP4Config
    get_setting_ip6_config(): SettingIP6Config
    get_setting_ip_tunnel(): SettingIPTunnel
    get_setting_macsec(): SettingMacsec
    get_setting_macvlan(): SettingMacvlan
    get_setting_olpc_mesh(): SettingOlpcMesh
    get_setting_ovs_bridge(): SettingOvsBridge
    get_setting_ovs_interface(): SettingOvsInterface
    get_setting_ovs_patch(): SettingOvsPatch
    get_setting_ovs_port(): SettingOvsPort
    get_setting_ppp(): SettingPpp
    get_setting_pppoe(): SettingPppoe
    get_setting_proxy(): SettingProxy
    get_setting_serial(): SettingSerial
    get_setting_tc_config(): SettingTCConfig
    get_setting_team(): SettingTeam
    get_setting_team_port(): SettingTeamPort
    get_setting_tun(): SettingTun
    get_setting_vlan(): SettingVlan
    get_setting_vpn(): SettingVpn
    get_setting_vxlan(): SettingVxlan
    get_setting_wimax(): SettingWimax
    get_setting_wired(): SettingWired
    get_setting_wireless(): SettingWireless
    get_setting_wireless_security(): SettingWirelessSecurity
    get_settings(): Setting[]
    get_uuid(): string
    get_virtual_device_description(): string
    is_type(type: string): boolean
    is_virtual(): boolean
    need_secrets(): [ /* returnType */ string, /* hints */ string[] | null ]
    normalize(parameters?: GLib.HashTable | null): [ /* returnType */ boolean, /* modified */ boolean | null ]
    remove_setting(setting_type: GObject.Type): void
    replace_settings(new_settings: GLib.Variant): boolean
    replace_settings_from_connection(new_connection: Connection): void
    set_path(path: string): void
    to_dbus(flags: ConnectionSerializationFlags): GLib.Variant
    update_secrets(setting_name: string, secrets: GLib.Variant): boolean
    verify(): boolean
    verify_secrets(): boolean
    /* Virtual methods of NM.RemoteConnection */
    vfunc_changed(): void
    vfunc_secrets_cleared(): void
    vfunc_secrets_updated(setting: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of NM.Connection */
    connect(sigName: "changed", callback: (($obj: RemoteConnection) => void)): number
    connect_after(sigName: "changed", callback: (($obj: RemoteConnection) => void)): number
    emit(sigName: "changed"): void
    connect(sigName: "secrets-cleared", callback: (($obj: RemoteConnection) => void)): number
    connect_after(sigName: "secrets-cleared", callback: (($obj: RemoteConnection) => void)): number
    emit(sigName: "secrets-cleared"): void
    connect(sigName: "secrets-updated", callback: (($obj: RemoteConnection, setting_name: string) => void)): number
    connect_after(sigName: "secrets-updated", callback: (($obj: RemoteConnection, setting_name: string) => void)): number
    emit(sigName: "secrets-updated", setting_name: string): void
    connect(sigName: "notify::filename", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flags", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::unsaved", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unsaved", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: RemoteConnection_ConstructProps)
    _init (config?: RemoteConnection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface SecretAgentOld_ConstructProps extends GObject.Object_ConstructProps {
    auto_register?: boolean
    capabilities?: SecretAgentCapabilities
    dbus_connection?: Gio.DBusConnection
    identifier?: string
}
export class SecretAgentOld {
    /* Properties of NM.SecretAgentOld */
    auto_register: boolean
    capabilities: SecretAgentCapabilities
    readonly registered: boolean
    /* Fields of NM.SecretAgentOld */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SecretAgentOld */
    delete_secrets(connection: Connection, callback: SecretAgentOldDeleteSecretsFunc): void
    destroy(): void
    enable(enable: boolean): void
    get_context_busy_watcher(): GObject.Object
    get_dbus_connection(): Gio.DBusConnection
    get_dbus_name_owner(): string
    get_main_context(): GLib.MainContext
    get_registered(): boolean
    get_secrets(connection: Connection, setting_name: string, hints: string[], flags: SecretAgentGetSecretsFlags, callback: SecretAgentOldGetSecretsFunc): void
    register(cancellable?: Gio.Cancellable | null): boolean
    register_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    register_finish(result: Gio.AsyncResult): boolean
    save_secrets(connection: Connection, callback: SecretAgentOldSaveSecretsFunc): void
    unregister(cancellable?: Gio.Cancellable | null): boolean
    unregister_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    unregister_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    init_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    init_finish(res: Gio.AsyncResult): boolean
    new_finish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of NM.SecretAgentOld */
    vfunc_cancel_get_secrets(connection_path: string, setting_name: string): void
    vfunc_delete_secrets(connection: Connection, connection_path: string, callback: SecretAgentOldDeleteSecretsFunc): void
    vfunc_get_secrets(connection: Connection, connection_path: string, setting_name: string, hints: string[], flags: SecretAgentGetSecretsFlags, callback: SecretAgentOldGetSecretsFunc): void
    vfunc_save_secrets(connection: Connection, connection_path: string, callback: SecretAgentOldSaveSecretsFunc): void
    vfunc_init_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    vfunc_init_finish(res: Gio.AsyncResult): boolean
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auto-register", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-register", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::registered", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::registered", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SecretAgentOld_ConstructProps)
    _init (config?: SecretAgentOld_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newv_async(object_type: GObject.Type, n_parameters: number, parameters: GObject.Parameter, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
export interface Setting_ConstructProps extends GObject.Object_ConstructProps {
}
export class Setting {
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Setting, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Setting, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: (($obj: Setting, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Setting, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Setting_ConstructProps)
    _init (config?: Setting_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static lookup_type(name: string): GObject.Type
    static $gtype: GObject.Type
}
export interface Setting6Lowpan_ConstructProps extends Setting_ConstructProps {
    parent?: string
}
export class Setting6Lowpan {
    /* Properties of NM.Setting6Lowpan */
    parent: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Setting6Lowpan */
    get_parent(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parent", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Setting6Lowpan_ConstructProps)
    _init (config?: Setting6Lowpan_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Setting6Lowpan
    static $gtype: GObject.Type
}
export interface Setting8021x_ConstructProps extends Setting_ConstructProps {
    altsubject_matches?: string[]
    anonymous_identity?: string
    auth_timeout?: number
    ca_cert?: Gjs.byteArray.ByteArray
    ca_cert_password?: string
    ca_cert_password_flags?: SettingSecretFlags
    ca_path?: string
    client_cert?: Gjs.byteArray.ByteArray
    client_cert_password?: string
    client_cert_password_flags?: SettingSecretFlags
    domain_match?: string
    domain_suffix_match?: string
    eap?: string[]
    identity?: string
    optional?: boolean
    pac_file?: string
    password?: string
    password_flags?: SettingSecretFlags
    password_raw?: Gjs.byteArray.ByteArray
    password_raw_flags?: SettingSecretFlags
    phase1_auth_flags?: number
    phase1_fast_provisioning?: string
    phase1_peaplabel?: string
    phase1_peapver?: string
    phase2_altsubject_matches?: string[]
    phase2_auth?: string
    phase2_autheap?: string
    phase2_ca_cert?: Gjs.byteArray.ByteArray
    phase2_ca_cert_password?: string
    phase2_ca_cert_password_flags?: SettingSecretFlags
    phase2_ca_path?: string
    phase2_client_cert?: Gjs.byteArray.ByteArray
    phase2_client_cert_password?: string
    phase2_client_cert_password_flags?: SettingSecretFlags
    phase2_domain_match?: string
    phase2_domain_suffix_match?: string
    phase2_private_key?: Gjs.byteArray.ByteArray
    phase2_private_key_password?: string
    phase2_private_key_password_flags?: SettingSecretFlags
    phase2_subject_match?: string
    pin?: string
    pin_flags?: SettingSecretFlags
    private_key?: Gjs.byteArray.ByteArray
    private_key_password?: string
    private_key_password_flags?: SettingSecretFlags
    subject_match?: string
    system_ca_certs?: boolean
}
export class Setting8021x {
    /* Properties of NM.Setting8021x */
    altsubject_matches: string[]
    anonymous_identity: string
    auth_timeout: number
    ca_cert: Gjs.byteArray.ByteArray
    ca_cert_password: string
    ca_cert_password_flags: SettingSecretFlags
    ca_path: string
    client_cert: Gjs.byteArray.ByteArray
    client_cert_password: string
    client_cert_password_flags: SettingSecretFlags
    domain_match: string
    domain_suffix_match: string
    eap: string[]
    identity: string
    optional: boolean
    pac_file: string
    password: string
    password_flags: SettingSecretFlags
    password_raw: Gjs.byteArray.ByteArray
    password_raw_flags: SettingSecretFlags
    phase1_auth_flags: number
    phase1_fast_provisioning: string
    phase1_peaplabel: string
    phase1_peapver: string
    phase2_altsubject_matches: string[]
    phase2_auth: string
    phase2_autheap: string
    phase2_ca_cert: Gjs.byteArray.ByteArray
    phase2_ca_cert_password: string
    phase2_ca_cert_password_flags: SettingSecretFlags
    phase2_ca_path: string
    phase2_client_cert: Gjs.byteArray.ByteArray
    phase2_client_cert_password: string
    phase2_client_cert_password_flags: SettingSecretFlags
    phase2_domain_match: string
    phase2_domain_suffix_match: string
    phase2_private_key: Gjs.byteArray.ByteArray
    phase2_private_key_password: string
    phase2_private_key_password_flags: SettingSecretFlags
    phase2_subject_match: string
    pin: string
    pin_flags: SettingSecretFlags
    private_key: Gjs.byteArray.ByteArray
    private_key_password: string
    private_key_password_flags: SettingSecretFlags
    subject_match: string
    system_ca_certs: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting8021x */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Setting8021x */
    add_altsubject_match(altsubject_match: string): boolean
    add_eap_method(eap: string): boolean
    add_phase2_altsubject_match(phase2_altsubject_match: string): boolean
    clear_altsubject_matches(): void
    clear_eap_methods(): void
    clear_phase2_altsubject_matches(): void
    get_altsubject_match(i: number): string
    get_anonymous_identity(): string
    get_auth_timeout(): number
    get_ca_cert_blob(): Gjs.byteArray.ByteArray
    get_ca_cert_password(): string
    get_ca_cert_password_flags(): SettingSecretFlags
    get_ca_cert_path(): string
    get_ca_cert_scheme(): Setting8021xCKScheme
    get_ca_cert_uri(): string
    get_ca_path(): string
    get_client_cert_blob(): Gjs.byteArray.ByteArray
    get_client_cert_password(): string
    get_client_cert_password_flags(): SettingSecretFlags
    get_client_cert_path(): string
    get_client_cert_scheme(): Setting8021xCKScheme
    get_client_cert_uri(): string
    get_domain_match(): string
    get_domain_suffix_match(): string
    get_eap_method(i: number): string
    get_identity(): string
    get_num_altsubject_matches(): number
    get_num_eap_methods(): number
    get_num_phase2_altsubject_matches(): number
    get_optional(): boolean
    get_pac_file(): string
    get_password(): string
    get_password_flags(): SettingSecretFlags
    get_password_raw(): Gjs.byteArray.ByteArray
    get_password_raw_flags(): SettingSecretFlags
    get_phase1_auth_flags(): Setting8021xAuthFlags
    get_phase1_fast_provisioning(): string
    get_phase1_peaplabel(): string
    get_phase1_peapver(): string
    get_phase2_altsubject_match(i: number): string
    get_phase2_auth(): string
    get_phase2_autheap(): string
    get_phase2_ca_cert_blob(): Gjs.byteArray.ByteArray
    get_phase2_ca_cert_password(): string
    get_phase2_ca_cert_password_flags(): SettingSecretFlags
    get_phase2_ca_cert_path(): string
    get_phase2_ca_cert_scheme(): Setting8021xCKScheme
    get_phase2_ca_cert_uri(): string
    get_phase2_ca_path(): string
    get_phase2_client_cert_blob(): Gjs.byteArray.ByteArray
    get_phase2_client_cert_password(): string
    get_phase2_client_cert_password_flags(): SettingSecretFlags
    get_phase2_client_cert_path(): string
    get_phase2_client_cert_scheme(): Setting8021xCKScheme
    get_phase2_client_cert_uri(): string
    get_phase2_domain_match(): string
    get_phase2_domain_suffix_match(): string
    get_phase2_private_key_blob(): Gjs.byteArray.ByteArray
    get_phase2_private_key_format(): Setting8021xCKFormat
    get_phase2_private_key_password(): string
    get_phase2_private_key_password_flags(): SettingSecretFlags
    get_phase2_private_key_path(): string
    get_phase2_private_key_scheme(): Setting8021xCKScheme
    get_phase2_private_key_uri(): string
    get_phase2_subject_match(): string
    get_pin(): string
    get_pin_flags(): SettingSecretFlags
    get_private_key_blob(): Gjs.byteArray.ByteArray
    get_private_key_format(): Setting8021xCKFormat
    get_private_key_password(): string
    get_private_key_password_flags(): SettingSecretFlags
    get_private_key_path(): string
    get_private_key_scheme(): Setting8021xCKScheme
    get_private_key_uri(): string
    get_subject_match(): string
    get_system_ca_certs(): boolean
    remove_altsubject_match(i: number): void
    remove_altsubject_match_by_value(altsubject_match: string): boolean
    remove_eap_method(i: number): void
    remove_eap_method_by_value(eap: string): boolean
    remove_phase2_altsubject_match(i: number): void
    remove_phase2_altsubject_match_by_value(phase2_altsubject_match: string): boolean
    set_ca_cert(value: string, scheme: Setting8021xCKScheme, out_format: Setting8021xCKFormat): boolean
    set_client_cert(value: string, scheme: Setting8021xCKScheme, out_format: Setting8021xCKFormat): boolean
    set_phase2_ca_cert(value: string, scheme: Setting8021xCKScheme, out_format: Setting8021xCKFormat): boolean
    set_phase2_client_cert(value: string, scheme: Setting8021xCKScheme, out_format: Setting8021xCKFormat): boolean
    set_phase2_private_key(value: string, password: string, scheme: Setting8021xCKScheme, out_format: Setting8021xCKFormat): boolean
    set_private_key(value: string, password: string, scheme: Setting8021xCKScheme, out_format: Setting8021xCKFormat): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::altsubject-matches", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::altsubject-matches", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anonymous-identity", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anonymous-identity", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::auth-timeout", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auth-timeout", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ca-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ca-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ca-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ca-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ca-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ca-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ca-path", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ca-path", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::client-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::client-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::client-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::domain-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::domain-suffix-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain-suffix-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::eap", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::eap", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::identity", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identity", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::optional", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optional", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pac-file", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pac-file", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-raw", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-raw", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-raw-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-raw-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase1-auth-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase1-auth-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase1-fast-provisioning", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase1-fast-provisioning", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase1-peaplabel", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase1-peaplabel", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase1-peapver", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase1-peapver", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-altsubject-matches", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-altsubject-matches", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-auth", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-auth", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-autheap", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-autheap", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-ca-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-ca-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-ca-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-ca-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-ca-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-ca-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-ca-path", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-ca-path", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-client-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-client-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-client-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-client-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-client-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-client-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-domain-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-domain-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-domain-suffix-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-domain-suffix-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-private-key", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-private-key", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-private-key-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-private-key-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-private-key-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-private-key-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::phase2-subject-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-subject-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pin", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pin", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pin-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pin-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::private-key", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::private-key-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::private-key-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::subject-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subject-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::system-ca-certs", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-ca-certs", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Setting8021x_ConstructProps)
    _init (config?: Setting8021x_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Setting8021x
    static check_cert_scheme(pdata: object | null, length: number): Setting8021xCKScheme
    static $gtype: GObject.Type
}
export interface SettingAdsl_ConstructProps extends Setting_ConstructProps {
    encapsulation?: string
    password?: string
    password_flags?: SettingSecretFlags
    protocol?: string
    username?: string
    vci?: number
    vpi?: number
}
export class SettingAdsl {
    /* Properties of NM.SettingAdsl */
    encapsulation: string
    password: string
    password_flags: SettingSecretFlags
    protocol: string
    username: string
    vci: number
    vpi: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingAdsl */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingAdsl */
    get_encapsulation(): string
    get_password(): string
    get_password_flags(): SettingSecretFlags
    get_protocol(): string
    get_username(): string
    get_vci(): number
    get_vpi(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::encapsulation", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encapsulation", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-flags", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::protocol", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::username", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::username", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vci", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vci", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vpi", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vpi", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingAdsl_ConstructProps)
    _init (config?: SettingAdsl_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingAdsl
    static $gtype: GObject.Type
}
export interface SettingBluetooth_ConstructProps extends Setting_ConstructProps {
    bdaddr?: string
    type?: string
}
export class SettingBluetooth {
    /* Properties of NM.SettingBluetooth */
    bdaddr: string
    type: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingBluetooth */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingBluetooth */
    get_bdaddr(): string
    get_connection_type(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::bdaddr", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bdaddr", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingBluetooth_ConstructProps)
    _init (config?: SettingBluetooth_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingBluetooth
    static $gtype: GObject.Type
}
export interface SettingBond_ConstructProps extends Setting_ConstructProps {
    options?: GLib.HashTable
}
export class SettingBond {
    /* Properties of NM.SettingBond */
    options: GLib.HashTable
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingBond */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingBond */
    add_option(name: string, value: string): boolean
    get_num_options(): number
    get_option(idx: number): [ /* returnType */ boolean, /* out_name */ string, /* out_value */ string ]
    get_option_by_name(name: string): string
    get_option_default(name: string): string
    get_option_normalized(name: string): string
    get_valid_options(): string[]
    remove_option(name: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::options", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::options", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingBond_ConstructProps)
    _init (config?: SettingBond_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingBond
    static validate_option(name: string, value: string): boolean
    static $gtype: GObject.Type
}
export interface SettingBridge_ConstructProps extends Setting_ConstructProps {
    ageing_time?: number
    forward_delay?: number
    group_address?: string
    group_forward_mask?: number
    hello_time?: number
    mac_address?: string
    max_age?: number
    multicast_hash_max?: number
    multicast_last_member_count?: number
    multicast_last_member_interval?: number
    multicast_membership_interval?: number
    multicast_querier?: boolean
    multicast_querier_interval?: number
    multicast_query_interval?: number
    multicast_query_response_interval?: number
    multicast_query_use_ifaddr?: boolean
    multicast_router?: string
    multicast_snooping?: boolean
    multicast_startup_query_count?: number
    multicast_startup_query_interval?: number
    priority?: number
    stp?: boolean
    vlan_default_pvid?: number
    vlan_filtering?: boolean
    vlan_protocol?: string
    vlan_stats_enabled?: boolean
    vlans?: BridgeVlan[]
}
export class SettingBridge {
    /* Properties of NM.SettingBridge */
    ageing_time: number
    forward_delay: number
    group_address: string
    group_forward_mask: number
    hello_time: number
    mac_address: string
    max_age: number
    multicast_hash_max: number
    multicast_last_member_count: number
    multicast_last_member_interval: number
    multicast_membership_interval: number
    multicast_querier: boolean
    multicast_querier_interval: number
    multicast_query_interval: number
    multicast_query_response_interval: number
    multicast_query_use_ifaddr: boolean
    multicast_router: string
    multicast_snooping: boolean
    multicast_startup_query_count: number
    multicast_startup_query_interval: number
    priority: number
    stp: boolean
    vlan_default_pvid: number
    vlan_filtering: boolean
    vlan_protocol: string
    vlan_stats_enabled: boolean
    vlans: BridgeVlan[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingBridge */
    add_vlan(vlan: BridgeVlan): void
    clear_vlans(): void
    get_ageing_time(): number
    get_forward_delay(): number
    get_group_address(): string
    get_group_forward_mask(): number
    get_hello_time(): number
    get_mac_address(): string
    get_max_age(): number
    get_multicast_hash_max(): number
    get_multicast_last_member_count(): number
    get_multicast_last_member_interval(): number
    get_multicast_membership_interval(): number
    get_multicast_querier(): boolean
    get_multicast_querier_interval(): number
    get_multicast_query_interval(): number
    get_multicast_query_response_interval(): number
    get_multicast_query_use_ifaddr(): boolean
    get_multicast_router(): string
    get_multicast_snooping(): boolean
    get_multicast_startup_query_count(): number
    get_multicast_startup_query_interval(): number
    get_num_vlans(): number
    get_priority(): number
    get_stp(): boolean
    get_vlan(idx: number): BridgeVlan
    get_vlan_default_pvid(): number
    get_vlan_filtering(): boolean
    get_vlan_protocol(): string
    get_vlan_stats_enabled(): boolean
    remove_vlan(idx: number): void
    remove_vlan_by_vid(vid_start: number, vid_end: number): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::ageing-time", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ageing-time", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::forward-delay", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::forward-delay", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-address", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-address", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-forward-mask", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-forward-mask", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hello-time", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hello-time", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mac-address", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::max-age", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-age", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-hash-max", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-hash-max", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-last-member-count", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-last-member-count", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-last-member-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-last-member-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-membership-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-membership-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-querier", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-querier", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-querier-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-querier-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-query-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-query-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-query-response-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-query-response-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-query-use-ifaddr", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-query-use-ifaddr", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-router", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-router", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-snooping", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-snooping", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-startup-query-count", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-startup-query-count", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multicast-startup-query-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-startup-query-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::stp", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stp", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vlan-default-pvid", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-default-pvid", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vlan-filtering", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-filtering", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vlan-protocol", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-protocol", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vlan-stats-enabled", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-stats-enabled", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vlans", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlans", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingBridge_ConstructProps)
    _init (config?: SettingBridge_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingBridge
    static $gtype: GObject.Type
}
export interface SettingBridgePort_ConstructProps extends Setting_ConstructProps {
    hairpin_mode?: boolean
    path_cost?: number
    priority?: number
    vlans?: BridgeVlan[]
}
export class SettingBridgePort {
    /* Properties of NM.SettingBridgePort */
    hairpin_mode: boolean
    path_cost: number
    priority: number
    vlans: BridgeVlan[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingBridgePort */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingBridgePort */
    add_vlan(vlan: BridgeVlan): void
    clear_vlans(): void
    get_hairpin_mode(): boolean
    get_num_vlans(): number
    get_path_cost(): number
    get_priority(): number
    get_vlan(idx: number): BridgeVlan
    remove_vlan(idx: number): void
    remove_vlan_by_vid(vid_start: number, vid_end: number): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::hairpin-mode", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hairpin-mode", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path-cost", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path-cost", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vlans", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlans", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingBridgePort_ConstructProps)
    _init (config?: SettingBridgePort_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingBridgePort
    static $gtype: GObject.Type
}
export interface SettingCdma_ConstructProps extends Setting_ConstructProps {
    mtu?: number
    number?: string
    password?: string
    password_flags?: SettingSecretFlags
    username?: string
}
export class SettingCdma {
    /* Properties of NM.SettingCdma */
    mtu: number
    number: string
    password: string
    password_flags: SettingSecretFlags
    username: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingCdma */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingCdma */
    get_mtu(): number
    get_number(): string
    get_password(): string
    get_password_flags(): SettingSecretFlags
    get_username(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::mtu", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::number", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-flags", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::username", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::username", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingCdma_ConstructProps)
    _init (config?: SettingCdma_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingCdma
    static $gtype: GObject.Type
}
export interface SettingConnection_ConstructProps extends Setting_ConstructProps {
    auth_retries?: number
    autoconnect?: boolean
    autoconnect_priority?: number
    autoconnect_retries?: number
    autoconnect_slaves?: SettingConnectionAutoconnectSlaves
    gateway_ping_timeout?: number
    id?: string
    interface_name?: string
    lldp?: number
    llmnr?: number
    master?: string
    mdns?: number
    metered?: Metered
    mud_url?: string
    multi_connect?: number
    permissions?: string[]
    read_only?: boolean
    secondaries?: string[]
    slave_type?: string
    stable_id?: string
    timestamp?: number
    type?: string
    uuid?: string
    wait_device_timeout?: number
    zone?: string
}
export class SettingConnection {
    /* Properties of NM.SettingConnection */
    auth_retries: number
    autoconnect: boolean
    autoconnect_priority: number
    autoconnect_retries: number
    autoconnect_slaves: SettingConnectionAutoconnectSlaves
    gateway_ping_timeout: number
    id: string
    interface_name: string
    lldp: number
    llmnr: number
    master: string
    mdns: number
    metered: Metered
    mud_url: string
    multi_connect: number
    permissions: string[]
    read_only: boolean
    secondaries: string[]
    slave_type: string
    stable_id: string
    timestamp: number
    type: string
    uuid: string
    wait_device_timeout: number
    zone: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingConnection */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingConnection */
    add_permission(ptype: string, pitem: string, detail?: string | null): boolean
    add_secondary(sec_uuid: string): boolean
    get_auth_retries(): number
    get_autoconnect(): boolean
    get_autoconnect_priority(): number
    get_autoconnect_retries(): number
    get_autoconnect_slaves(): SettingConnectionAutoconnectSlaves
    get_connection_type(): string
    get_gateway_ping_timeout(): number
    get_id(): string
    get_interface_name(): string
    get_lldp(): SettingConnectionLldp
    get_llmnr(): SettingConnectionLlmnr
    get_master(): string
    get_mdns(): SettingConnectionMdns
    get_metered(): Metered
    get_mud_url(): string
    get_multi_connect(): ConnectionMultiConnect
    get_num_permissions(): number
    get_num_secondaries(): number
    get_permission(idx: number, out_ptype: string, out_pitem: string, out_detail: string): boolean
    get_read_only(): boolean
    get_secondary(idx: number): string
    get_slave_type(): string
    get_stable_id(): string
    get_timestamp(): number
    get_uuid(): string
    get_wait_device_timeout(): number
    get_zone(): string
    is_slave_type(type: string): boolean
    permissions_user_allowed(uname: string): boolean
    remove_permission(idx: number): void
    remove_permission_by_value(ptype: string, pitem: string, detail?: string | null): boolean
    remove_secondary(idx: number): void
    remove_secondary_by_value(sec_uuid: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auth-retries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auth-retries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect-priority", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect-priority", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect-retries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect-retries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::autoconnect-slaves", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect-slaves", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::gateway-ping-timeout", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway-ping-timeout", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-name", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-name", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lldp", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::llmnr", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::llmnr", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::master", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::master", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mdns", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mdns", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::metered", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mud-url", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mud-url", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multi-connect", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multi-connect", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::permissions", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::permissions", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::read-only", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::secondaries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondaries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::slave-type", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slave-type", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::stable-id", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stable-id", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::timestamp", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timestamp", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::uuid", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wait-device-timeout", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wait-device-timeout", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::zone", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::zone", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingConnection_ConstructProps)
    _init (config?: SettingConnection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingConnection
    static $gtype: GObject.Type
}
export interface SettingDcb_ConstructProps extends Setting_ConstructProps {
    app_fcoe_flags?: SettingDcbFlags
    app_fcoe_mode?: string
    app_fcoe_priority?: number
    app_fip_flags?: SettingDcbFlags
    app_fip_priority?: number
    app_iscsi_flags?: SettingDcbFlags
    app_iscsi_priority?: number
    priority_bandwidth?: number[]
    priority_flow_control?: boolean[]
    priority_flow_control_flags?: SettingDcbFlags
    priority_group_bandwidth?: number[]
    priority_group_flags?: SettingDcbFlags
    priority_group_id?: number[]
    priority_strict_bandwidth?: boolean[]
    priority_traffic_class?: number[]
}
export class SettingDcb {
    /* Properties of NM.SettingDcb */
    app_fcoe_flags: SettingDcbFlags
    app_fcoe_mode: string
    app_fcoe_priority: number
    app_fip_flags: SettingDcbFlags
    app_fip_priority: number
    app_iscsi_flags: SettingDcbFlags
    app_iscsi_priority: number
    priority_bandwidth: number[]
    priority_flow_control: boolean[]
    priority_flow_control_flags: SettingDcbFlags
    priority_group_bandwidth: number[]
    priority_group_flags: SettingDcbFlags
    priority_group_id: number[]
    priority_strict_bandwidth: boolean[]
    priority_traffic_class: number[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingDcb */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingDcb */
    get_app_fcoe_flags(): SettingDcbFlags
    get_app_fcoe_mode(): string
    get_app_fcoe_priority(): number
    get_app_fip_flags(): SettingDcbFlags
    get_app_fip_priority(): number
    get_app_iscsi_flags(): SettingDcbFlags
    get_app_iscsi_priority(): number
    get_priority_bandwidth(user_priority: number): number
    get_priority_flow_control(user_priority: number): boolean
    get_priority_flow_control_flags(): SettingDcbFlags
    get_priority_group_bandwidth(group_id: number): number
    get_priority_group_flags(): SettingDcbFlags
    get_priority_group_id(user_priority: number): number
    get_priority_strict_bandwidth(user_priority: number): boolean
    get_priority_traffic_class(user_priority: number): number
    set_priority_bandwidth(user_priority: number, bandwidth_percent: number): void
    set_priority_flow_control(user_priority: number, enabled: boolean): void
    set_priority_group_bandwidth(group_id: number, bandwidth_percent: number): void
    set_priority_group_id(user_priority: number, group_id: number): void
    set_priority_strict_bandwidth(user_priority: number, strict: boolean): void
    set_priority_traffic_class(user_priority: number, traffic_class: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::app-fcoe-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fcoe-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::app-fcoe-mode", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fcoe-mode", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::app-fcoe-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fcoe-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::app-fip-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fip-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::app-fip-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fip-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::app-iscsi-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-iscsi-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::app-iscsi-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-iscsi-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority-flow-control", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-flow-control", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority-flow-control-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-flow-control-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority-group-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-group-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority-group-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-group-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority-group-id", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-group-id", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority-strict-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-strict-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::priority-traffic-class", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-traffic-class", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingDcb_ConstructProps)
    _init (config?: SettingDcb_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingDcb
    static $gtype: GObject.Type
}
export interface SettingDummy_ConstructProps extends Setting_ConstructProps {
}
export class SettingDummy {
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingDummy */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingDummy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: (($obj: SettingDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingDummy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingDummy_ConstructProps)
    _init (config?: SettingDummy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingDummy
    static $gtype: GObject.Type
}
export interface SettingEthtool_ConstructProps extends Setting_ConstructProps {
}
export class SettingEthtool {
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingEthtool */
    clear_features(): void
    get_feature(optname: string): Ternary
    get_optnames(): [ /* returnType */ string[], /* out_length */ number | null ]
    set_feature(optname: string, value: Ternary): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingEthtool, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingEthtool, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: (($obj: SettingEthtool, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingEthtool, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingEthtool_ConstructProps)
    _init (config?: SettingEthtool_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingEthtool
    static $gtype: GObject.Type
}
export interface SettingGeneric_ConstructProps extends Setting_ConstructProps {
}
export class SettingGeneric {
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingGeneric */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingGeneric, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: (($obj: SettingGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingGeneric, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingGeneric_ConstructProps)
    _init (config?: SettingGeneric_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingGeneric
    static $gtype: GObject.Type
}
export interface SettingGsm_ConstructProps extends Setting_ConstructProps {
    apn?: string
    auto_config?: boolean
    device_id?: string
    home_only?: boolean
    mtu?: number
    network_id?: string
    number?: string
    password?: string
    password_flags?: SettingSecretFlags
    pin?: string
    pin_flags?: SettingSecretFlags
    sim_id?: string
    sim_operator_id?: string
    username?: string
}
export class SettingGsm {
    /* Properties of NM.SettingGsm */
    apn: string
    auto_config: boolean
    device_id: string
    home_only: boolean
    mtu: number
    network_id: string
    number: string
    password: string
    password_flags: SettingSecretFlags
    pin: string
    pin_flags: SettingSecretFlags
    sim_id: string
    sim_operator_id: string
    username: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingGsm */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingGsm */
    get_apn(): string
    get_auto_config(): boolean
    get_device_id(): string
    get_home_only(): boolean
    get_mtu(): number
    get_network_id(): string
    get_number(): string
    get_password(): string
    get_password_flags(): SettingSecretFlags
    get_pin(): string
    get_pin_flags(): SettingSecretFlags
    get_sim_id(): string
    get_sim_operator_id(): string
    get_username(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::apn", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::apn", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::auto-config", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-config", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::device-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::home-only", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::home-only", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::network-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::number", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-flags", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pin", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pin", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pin-flags", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pin-flags", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::sim-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::sim-operator-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-operator-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::username", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::username", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingGsm_ConstructProps)
    _init (config?: SettingGsm_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingGsm
    static $gtype: GObject.Type
}
export interface SettingIP4Config_ConstructProps extends SettingIPConfig_ConstructProps {
    dhcp_client_id?: string
    dhcp_fqdn?: string
    dhcp_vendor_class_identifier?: string
}
export class SettingIP4Config {
    /* Properties of NM.SettingIP4Config */
    dhcp_client_id: string
    dhcp_fqdn: string
    dhcp_vendor_class_identifier: string
    /* Properties of NM.SettingIPConfig */
    addresses: IPAddress[]
    dad_timeout: number
    dhcp_hostname: string
    dhcp_hostname_flags: number
    dhcp_iaid: string
    dhcp_send_hostname: boolean
    dhcp_timeout: number
    dns: string[]
    dns_options: string[]
    dns_priority: number
    dns_search: string[]
    gateway: string
    ignore_auto_dns: boolean
    ignore_auto_routes: boolean
    may_fail: boolean
    method: string
    never_default: boolean
    route_metric: number
    route_table: number
    routes: IPRoute[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingIP4Config */
    parent: SettingIPConfig
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingIP4Config */
    get_dhcp_client_id(): string
    get_dhcp_fqdn(): string
    get_dhcp_vendor_class_identifier(): string
    /* Methods of NM.SettingIPConfig */
    add_address(address: IPAddress): boolean
    add_dns(dns: string): boolean
    add_dns_option(dns_option: string): boolean
    add_dns_search(dns_search: string): boolean
    add_route(route: IPRoute): boolean
    add_routing_rule(routing_rule: IPRoutingRule): void
    clear_addresses(): void
    clear_dns(): void
    clear_dns_options(is_set: boolean): void
    clear_dns_searches(): void
    clear_routes(): void
    clear_routing_rules(): void
    get_address(idx: number): IPAddress
    get_dad_timeout(): number
    get_dhcp_hostname(): string
    get_dhcp_hostname_flags(): DhcpHostnameFlags
    get_dhcp_iaid(): string
    get_dhcp_send_hostname(): boolean
    get_dhcp_timeout(): number
    get_dns(idx: number): string
    get_dns_option(idx: number): string
    get_dns_priority(): number
    get_dns_search(idx: number): string
    get_gateway(): string
    get_ignore_auto_dns(): boolean
    get_ignore_auto_routes(): boolean
    get_may_fail(): boolean
    get_method(): string
    get_never_default(): boolean
    get_num_addresses(): number
    get_num_dns(): number
    get_num_dns_options(): number
    get_num_dns_searches(): number
    get_num_routes(): number
    get_num_routing_rules(): number
    get_route(idx: number): IPRoute
    get_route_metric(): number
    get_route_table(): number
    get_routing_rule(idx: number): IPRoutingRule
    has_dns_options(): boolean
    remove_address(idx: number): void
    remove_address_by_value(address: IPAddress): boolean
    remove_dns(idx: number): void
    remove_dns_by_value(dns: string): boolean
    remove_dns_option(idx: number): void
    remove_dns_option_by_value(dns_option: string): boolean
    remove_dns_search(idx: number): void
    remove_dns_search_by_value(dns_search: string): boolean
    remove_route(idx: number): void
    remove_route_by_value(route: IPRoute): boolean
    remove_routing_rule(idx: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::dhcp-client-id", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-client-id", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-fqdn", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-fqdn", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-vendor-class-identifier", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-vendor-class-identifier", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::addresses", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addresses", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dad-timeout", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dad-timeout", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-options", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-options", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-priority", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-priority", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-search", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-search", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::gateway", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::may-fail", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::may-fail", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::method", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::never-default", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::never-default", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::route-metric", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-metric", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::route-table", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-table", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::routes", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::routes", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingIP4Config_ConstructProps)
    _init (config?: SettingIP4Config_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingIP4Config
    static $gtype: GObject.Type
}
export interface SettingIP6Config_ConstructProps extends SettingIPConfig_ConstructProps {
    addr_gen_mode?: number
    dhcp_duid?: string
    ip6_privacy?: SettingIP6ConfigPrivacy
    ra_timeout?: number
    token?: string
}
export class SettingIP6Config {
    /* Properties of NM.SettingIP6Config */
    addr_gen_mode: number
    dhcp_duid: string
    ip6_privacy: SettingIP6ConfigPrivacy
    ra_timeout: number
    token: string
    /* Properties of NM.SettingIPConfig */
    addresses: IPAddress[]
    dad_timeout: number
    dhcp_hostname: string
    dhcp_hostname_flags: number
    dhcp_iaid: string
    dhcp_send_hostname: boolean
    dhcp_timeout: number
    dns: string[]
    dns_options: string[]
    dns_priority: number
    dns_search: string[]
    gateway: string
    ignore_auto_dns: boolean
    ignore_auto_routes: boolean
    may_fail: boolean
    method: string
    never_default: boolean
    route_metric: number
    route_table: number
    routes: IPRoute[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingIP6Config */
    parent: SettingIPConfig
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingIP6Config */
    get_addr_gen_mode(): SettingIP6ConfigAddrGenMode
    get_dhcp_duid(): string
    get_ip6_privacy(): SettingIP6ConfigPrivacy
    get_ra_timeout(): number
    get_token(): string
    /* Methods of NM.SettingIPConfig */
    add_address(address: IPAddress): boolean
    add_dns(dns: string): boolean
    add_dns_option(dns_option: string): boolean
    add_dns_search(dns_search: string): boolean
    add_route(route: IPRoute): boolean
    add_routing_rule(routing_rule: IPRoutingRule): void
    clear_addresses(): void
    clear_dns(): void
    clear_dns_options(is_set: boolean): void
    clear_dns_searches(): void
    clear_routes(): void
    clear_routing_rules(): void
    get_address(idx: number): IPAddress
    get_dad_timeout(): number
    get_dhcp_hostname(): string
    get_dhcp_hostname_flags(): DhcpHostnameFlags
    get_dhcp_iaid(): string
    get_dhcp_send_hostname(): boolean
    get_dhcp_timeout(): number
    get_dns(idx: number): string
    get_dns_option(idx: number): string
    get_dns_priority(): number
    get_dns_search(idx: number): string
    get_gateway(): string
    get_ignore_auto_dns(): boolean
    get_ignore_auto_routes(): boolean
    get_may_fail(): boolean
    get_method(): string
    get_never_default(): boolean
    get_num_addresses(): number
    get_num_dns(): number
    get_num_dns_options(): number
    get_num_dns_searches(): number
    get_num_routes(): number
    get_num_routing_rules(): number
    get_route(idx: number): IPRoute
    get_route_metric(): number
    get_route_table(): number
    get_routing_rule(idx: number): IPRoutingRule
    has_dns_options(): boolean
    remove_address(idx: number): void
    remove_address_by_value(address: IPAddress): boolean
    remove_dns(idx: number): void
    remove_dns_by_value(dns: string): boolean
    remove_dns_option(idx: number): void
    remove_dns_option_by_value(dns_option: string): boolean
    remove_dns_search(idx: number): void
    remove_dns_search_by_value(dns_search: string): boolean
    remove_route(idx: number): void
    remove_route_by_value(route: IPRoute): boolean
    remove_routing_rule(idx: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::addr-gen-mode", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addr-gen-mode", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-duid", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-duid", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-privacy", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-privacy", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ra-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ra-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::token", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::token", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::addresses", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addresses", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dad-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dad-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-options", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-options", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-priority", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-priority", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-search", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-search", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::gateway", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::may-fail", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::may-fail", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::method", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::never-default", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::never-default", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::route-metric", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-metric", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::route-table", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-table", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::routes", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::routes", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingIP6Config_ConstructProps)
    _init (config?: SettingIP6Config_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingIP6Config
    static $gtype: GObject.Type
}
export interface SettingIPConfig_ConstructProps extends Setting_ConstructProps {
    addresses?: IPAddress[]
    dad_timeout?: number
    dhcp_hostname?: string
    dhcp_hostname_flags?: number
    dhcp_iaid?: string
    dhcp_send_hostname?: boolean
    dhcp_timeout?: number
    dns?: string[]
    dns_options?: string[]
    dns_priority?: number
    dns_search?: string[]
    gateway?: string
    ignore_auto_dns?: boolean
    ignore_auto_routes?: boolean
    may_fail?: boolean
    method?: string
    never_default?: boolean
    route_metric?: number
    route_table?: number
    routes?: IPRoute[]
}
export class SettingIPConfig {
    /* Properties of NM.SettingIPConfig */
    addresses: IPAddress[]
    dad_timeout: number
    dhcp_hostname: string
    dhcp_hostname_flags: number
    dhcp_iaid: string
    dhcp_send_hostname: boolean
    dhcp_timeout: number
    dns: string[]
    dns_options: string[]
    dns_priority: number
    dns_search: string[]
    gateway: string
    ignore_auto_dns: boolean
    ignore_auto_routes: boolean
    may_fail: boolean
    method: string
    never_default: boolean
    route_metric: number
    route_table: number
    routes: IPRoute[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingIPConfig */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingIPConfig */
    add_address(address: IPAddress): boolean
    add_dns(dns: string): boolean
    add_dns_option(dns_option: string): boolean
    add_dns_search(dns_search: string): boolean
    add_route(route: IPRoute): boolean
    add_routing_rule(routing_rule: IPRoutingRule): void
    clear_addresses(): void
    clear_dns(): void
    clear_dns_options(is_set: boolean): void
    clear_dns_searches(): void
    clear_routes(): void
    clear_routing_rules(): void
    get_address(idx: number): IPAddress
    get_dad_timeout(): number
    get_dhcp_hostname(): string
    get_dhcp_hostname_flags(): DhcpHostnameFlags
    get_dhcp_iaid(): string
    get_dhcp_send_hostname(): boolean
    get_dhcp_timeout(): number
    get_dns(idx: number): string
    get_dns_option(idx: number): string
    get_dns_priority(): number
    get_dns_search(idx: number): string
    get_gateway(): string
    get_ignore_auto_dns(): boolean
    get_ignore_auto_routes(): boolean
    get_may_fail(): boolean
    get_method(): string
    get_never_default(): boolean
    get_num_addresses(): number
    get_num_dns(): number
    get_num_dns_options(): number
    get_num_dns_searches(): number
    get_num_routes(): number
    get_num_routing_rules(): number
    get_route(idx: number): IPRoute
    get_route_metric(): number
    get_route_table(): number
    get_routing_rule(idx: number): IPRoutingRule
    has_dns_options(): boolean
    remove_address(idx: number): void
    remove_address_by_value(address: IPAddress): boolean
    remove_dns(idx: number): void
    remove_dns_by_value(dns: string): boolean
    remove_dns_option(idx: number): void
    remove_dns_option_by_value(dns_option: string): boolean
    remove_dns_search(idx: number): void
    remove_dns_search_by_value(dns_search: string): boolean
    remove_route(idx: number): void
    remove_route_by_value(route: IPRoute): boolean
    remove_routing_rule(idx: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::addresses", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addresses", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dad-timeout", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dad-timeout", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-options", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-options", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-priority", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-priority", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dns-search", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-search", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::gateway", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::may-fail", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::may-fail", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::method", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::never-default", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::never-default", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::route-metric", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-metric", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::route-table", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-table", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::routes", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::routes", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingIPConfig_ConstructProps)
    _init (config?: SettingIPConfig_ConstructProps): void
    static $gtype: GObject.Type
}
export interface SettingIPTunnel_ConstructProps extends Setting_ConstructProps {
    encapsulation_limit?: number
    flags?: number
    flow_label?: number
    input_key?: string
    local?: string
    mode?: number
    mtu?: number
    output_key?: string
    parent?: string
    path_mtu_discovery?: boolean
    remote?: string
    tos?: number
    ttl?: number
}
export class SettingIPTunnel {
    /* Properties of NM.SettingIPTunnel */
    encapsulation_limit: number
    flags: number
    flow_label: number
    input_key: string
    local: string
    mode: number
    mtu: number
    output_key: string
    parent: string
    path_mtu_discovery: boolean
    remote: string
    tos: number
    ttl: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingIPTunnel */
    get_encapsulation_limit(): number
    get_flags(): IPTunnelFlags
    get_flow_label(): number
    get_input_key(): string
    get_local(): string
    get_mode(): IPTunnelMode
    get_mtu(): number
    get_output_key(): string
    get_parent(): string
    get_path_mtu_discovery(): boolean
    get_remote(): string
    get_tos(): number
    get_ttl(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::encapsulation-limit", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encapsulation-limit", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flags", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flow-label", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flow-label", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::input-key", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-key", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::output-key", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::output-key", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path-mtu-discovery", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path-mtu-discovery", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::remote", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remote", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tos", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tos", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ttl", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ttl", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingIPTunnel_ConstructProps)
    _init (config?: SettingIPTunnel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingIPTunnel
    static $gtype: GObject.Type
}
export interface SettingInfiniband_ConstructProps extends Setting_ConstructProps {
    mac_address?: string
    mtu?: number
    p_key?: number
    parent?: string
    transport_mode?: string
}
export class SettingInfiniband {
    /* Properties of NM.SettingInfiniband */
    mac_address: string
    mtu: number
    p_key: number
    parent: string
    transport_mode: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingInfiniband */
    get_mac_address(): string
    get_mtu(): number
    get_p_key(): number
    get_parent(): string
    get_transport_mode(): string
    get_virtual_interface_name(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::mac-address", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::p-key", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::p-key", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transport-mode", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transport-mode", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingInfiniband_ConstructProps)
    _init (config?: SettingInfiniband_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingInfiniband
    static $gtype: GObject.Type
}
export interface SettingMacsec_ConstructProps extends Setting_ConstructProps {
    encrypt?: boolean
    mka_cak?: string
    mka_cak_flags?: SettingSecretFlags
    mka_ckn?: string
    mode?: number
    parent?: string
    port?: number
    send_sci?: boolean
    validation?: number
}
export class SettingMacsec {
    /* Properties of NM.SettingMacsec */
    encrypt: boolean
    mka_cak: string
    mka_cak_flags: SettingSecretFlags
    mka_ckn: string
    mode: number
    parent: string
    port: number
    send_sci: boolean
    validation: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingMacsec */
    get_encrypt(): boolean
    get_mka_cak(): string
    get_mka_cak_flags(): SettingSecretFlags
    get_mka_ckn(): string
    get_mode(): SettingMacsecMode
    get_parent(): string
    get_port(): number
    get_send_sci(): boolean
    get_validation(): SettingMacsecValidation
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::encrypt", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encrypt", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mka-cak", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mka-cak", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mka-cak-flags", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mka-cak-flags", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mka-ckn", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mka-ckn", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::port", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::send-sci", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::send-sci", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::validation", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingMacsec_ConstructProps)
    _init (config?: SettingMacsec_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingMacsec
    static $gtype: GObject.Type
}
export interface SettingMacvlan_ConstructProps extends Setting_ConstructProps {
    mode?: number
    parent?: string
    promiscuous?: boolean
    tap?: boolean
}
export class SettingMacvlan {
    /* Properties of NM.SettingMacvlan */
    mode: number
    parent: string
    promiscuous: boolean
    tap: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingMacvlan */
    get_mode(): SettingMacvlanMode
    get_parent(): string
    get_promiscuous(): boolean
    get_tap(): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::mode", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::promiscuous", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::promiscuous", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tap", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tap", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingMacvlan_ConstructProps)
    _init (config?: SettingMacvlan_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingMacvlan
    static $gtype: GObject.Type
}
export interface SettingMatch_ConstructProps extends Setting_ConstructProps {
    driver?: string[]
    interface_name?: string[]
    kernel_command_line?: string[]
    path?: string[]
}
export class SettingMatch {
    /* Properties of NM.SettingMatch */
    driver: string[]
    interface_name: string[]
    kernel_command_line: string[]
    path: string[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingMatch */
    add_driver(driver: string): void
    add_interface_name(interface_name: string): void
    add_kernel_command_line(kernel_command_line: string): void
    add_path(path: string): void
    clear_drivers(): void
    clear_interface_names(): void
    clear_kernel_command_lines(): void
    clear_paths(): void
    get_driver(idx: number): string
    get_drivers(): string[]
    get_interface_name(idx: number): string
    get_interface_names(): string[]
    get_kernel_command_line(idx: number): string
    get_kernel_command_lines(): string[]
    get_num_drivers(): number
    get_num_interface_names(): number
    get_num_kernel_command_lines(): number
    get_num_paths(): number
    get_path(idx: number): string
    get_paths(): string[]
    remove_driver(idx: number): void
    remove_driver_by_value(driver: string): boolean
    remove_interface_name(idx: number): void
    remove_interface_name_by_value(interface_name: string): boolean
    remove_kernel_command_line(idx: number): void
    remove_kernel_command_line_by_value(kernel_command_line: string): boolean
    remove_path(idx: number): void
    remove_path_by_value(path: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::driver", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interface-name", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-name", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::kernel-command-line", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::kernel-command-line", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingMatch_ConstructProps)
    _init (config?: SettingMatch_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingMatch
    static $gtype: GObject.Type
}
export interface SettingOlpcMesh_ConstructProps extends Setting_ConstructProps {
    channel?: number
    dhcp_anycast_address?: string
    ssid?: Gjs.byteArray.ByteArray
}
export class SettingOlpcMesh {
    /* Properties of NM.SettingOlpcMesh */
    channel: number
    dhcp_anycast_address: string
    ssid: Gjs.byteArray.ByteArray
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingOlpcMesh */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingOlpcMesh */
    get_channel(): number
    get_dhcp_anycast_address(): string
    get_ssid(): Gjs.byteArray.ByteArray
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::channel", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp-anycast-address", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-anycast-address", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ssid", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ssid", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingOlpcMesh_ConstructProps)
    _init (config?: SettingOlpcMesh_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingOlpcMesh
    static $gtype: GObject.Type
}
export interface SettingOvsBridge_ConstructProps extends Setting_ConstructProps {
    datapath_type?: string
    fail_mode?: string
    mcast_snooping_enable?: boolean
    rstp_enable?: boolean
    stp_enable?: boolean
}
export class SettingOvsBridge {
    /* Properties of NM.SettingOvsBridge */
    datapath_type: string
    fail_mode: string
    mcast_snooping_enable: boolean
    rstp_enable: boolean
    stp_enable: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingOvsBridge */
    get_datapath_type(): string
    get_fail_mode(): string
    get_mcast_snooping_enable(): boolean
    get_rstp_enable(): boolean
    get_stp_enable(): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::datapath-type", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::datapath-type", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fail-mode", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fail-mode", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mcast-snooping-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mcast-snooping-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rstp-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rstp-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::stp-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stp-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingOvsBridge_ConstructProps)
    _init (config?: SettingOvsBridge_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingOvsBridge
    static $gtype: GObject.Type
}
export interface SettingOvsDpdk_ConstructProps extends Setting_ConstructProps {
    devargs?: string
}
export class SettingOvsDpdk {
    /* Properties of NM.SettingOvsDpdk */
    devargs: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingOvsDpdk */
    get_devargs(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::devargs", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devargs", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingOvsDpdk_ConstructProps)
    _init (config?: SettingOvsDpdk_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingOvsDpdk
    static $gtype: GObject.Type
}
export interface SettingOvsInterface_ConstructProps extends Setting_ConstructProps {
    type?: string
}
export class SettingOvsInterface {
    /* Properties of NM.SettingOvsInterface */
    type: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingOvsInterface */
    get_interface_type(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::type", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingOvsInterface_ConstructProps)
    _init (config?: SettingOvsInterface_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingOvsInterface
    static $gtype: GObject.Type
}
export interface SettingOvsPatch_ConstructProps extends Setting_ConstructProps {
    peer?: string
}
export class SettingOvsPatch {
    /* Properties of NM.SettingOvsPatch */
    peer: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingOvsPatch */
    get_peer(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::peer", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peer", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingOvsPatch_ConstructProps)
    _init (config?: SettingOvsPatch_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingOvsPatch
    static $gtype: GObject.Type
}
export interface SettingOvsPort_ConstructProps extends Setting_ConstructProps {
    bond_downdelay?: number
    bond_mode?: string
    bond_updelay?: number
    lacp?: string
    tag?: number
    vlan_mode?: string
}
export class SettingOvsPort {
    /* Properties of NM.SettingOvsPort */
    bond_downdelay: number
    bond_mode: string
    bond_updelay: number
    lacp: string
    tag: number
    vlan_mode: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingOvsPort */
    get_bond_downdelay(): number
    get_bond_mode(): string
    get_bond_updelay(): number
    get_lacp(): string
    get_tag(): number
    get_vlan_mode(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::bond-downdelay", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bond-downdelay", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::bond-mode", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bond-mode", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::bond-updelay", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bond-updelay", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lacp", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lacp", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vlan-mode", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-mode", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingOvsPort_ConstructProps)
    _init (config?: SettingOvsPort_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingOvsPort
    static $gtype: GObject.Type
}
export interface SettingPpp_ConstructProps extends Setting_ConstructProps {
    baud?: number
    crtscts?: boolean
    lcp_echo_failure?: number
    lcp_echo_interval?: number
    mppe_stateful?: boolean
    mru?: number
    mtu?: number
    no_vj_comp?: boolean
    noauth?: boolean
    nobsdcomp?: boolean
    nodeflate?: boolean
    refuse_chap?: boolean
    refuse_eap?: boolean
    refuse_mschap?: boolean
    refuse_mschapv2?: boolean
    refuse_pap?: boolean
    require_mppe?: boolean
    require_mppe_128?: boolean
}
export class SettingPpp {
    /* Properties of NM.SettingPpp */
    baud: number
    crtscts: boolean
    lcp_echo_failure: number
    lcp_echo_interval: number
    mppe_stateful: boolean
    mru: number
    mtu: number
    no_vj_comp: boolean
    noauth: boolean
    nobsdcomp: boolean
    nodeflate: boolean
    refuse_chap: boolean
    refuse_eap: boolean
    refuse_mschap: boolean
    refuse_mschapv2: boolean
    refuse_pap: boolean
    require_mppe: boolean
    require_mppe_128: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingPpp */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingPpp */
    get_baud(): number
    get_crtscts(): boolean
    get_lcp_echo_failure(): number
    get_lcp_echo_interval(): number
    get_mppe_stateful(): boolean
    get_mru(): number
    get_mtu(): number
    get_no_vj_comp(): boolean
    get_noauth(): boolean
    get_nobsdcomp(): boolean
    get_nodeflate(): boolean
    get_refuse_chap(): boolean
    get_refuse_eap(): boolean
    get_refuse_mschap(): boolean
    get_refuse_mschapv2(): boolean
    get_refuse_pap(): boolean
    get_require_mppe(): boolean
    get_require_mppe_128(): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::baud", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baud", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::crtscts", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::crtscts", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lcp-echo-failure", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lcp-echo-failure", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lcp-echo-interval", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lcp-echo-interval", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mppe-stateful", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mppe-stateful", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mru", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mru", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::no-vj-comp", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-vj-comp", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::noauth", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::noauth", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nobsdcomp", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nobsdcomp", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nodeflate", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeflate", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::refuse-chap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-chap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::refuse-eap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-eap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::refuse-mschap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-mschap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::refuse-mschapv2", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-mschapv2", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::refuse-pap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-pap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::require-mppe", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::require-mppe", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::require-mppe-128", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::require-mppe-128", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingPpp_ConstructProps)
    _init (config?: SettingPpp_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingPpp
    static $gtype: GObject.Type
}
export interface SettingPppoe_ConstructProps extends Setting_ConstructProps {
    parent?: string
    password?: string
    password_flags?: SettingSecretFlags
    service?: string
    username?: string
}
export class SettingPppoe {
    /* Properties of NM.SettingPppoe */
    parent: string
    password: string
    password_flags: SettingSecretFlags
    service: string
    username: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingPppoe */
    get_parent(): string
    get_password(): string
    get_password_flags(): SettingSecretFlags
    get_service(): string
    get_username(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parent", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-flags", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::service", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::username", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::username", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingPppoe_ConstructProps)
    _init (config?: SettingPppoe_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingPppoe
    static $gtype: GObject.Type
}
export interface SettingProxy_ConstructProps extends Setting_ConstructProps {
    browser_only?: boolean
    method?: number
    pac_script?: string
    pac_url?: string
}
export class SettingProxy {
    /* Properties of NM.SettingProxy */
    browser_only: boolean
    method: number
    pac_script: string
    pac_url: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingProxy */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingProxy */
    get_browser_only(): boolean
    get_method(): SettingProxyMethod
    get_pac_script(): string
    get_pac_url(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::browser-only", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::browser-only", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::method", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pac-script", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pac-script", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pac-url", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pac-url", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingProxy_ConstructProps)
    _init (config?: SettingProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingProxy
    static $gtype: GObject.Type
}
export interface SettingSerial_ConstructProps extends Setting_ConstructProps {
    baud?: number
    bits?: number
    parity?: SettingSerialParity
    send_delay?: number
    stopbits?: number
}
export class SettingSerial {
    /* Properties of NM.SettingSerial */
    baud: number
    bits: number
    parity: SettingSerialParity
    send_delay: number
    stopbits: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingSerial */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingSerial */
    get_baud(): number
    get_bits(): number
    get_parity(): SettingSerialParity
    get_send_delay(): number
    get_stopbits(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::baud", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baud", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::bits", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bits", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parity", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parity", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::send-delay", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::send-delay", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::stopbits", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stopbits", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingSerial_ConstructProps)
    _init (config?: SettingSerial_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingSerial
    static $gtype: GObject.Type
}
export interface SettingSriov_ConstructProps extends Setting_ConstructProps {
    autoprobe_drivers?: Ternary
    total_vfs?: number
    vfs?: SriovVF[]
}
export class SettingSriov {
    /* Properties of NM.SettingSriov */
    autoprobe_drivers: Ternary
    total_vfs: number
    vfs: SriovVF[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingSriov */
    add_vf(vf: SriovVF): void
    clear_vfs(): void
    get_autoprobe_drivers(): Ternary
    get_num_vfs(): number
    get_total_vfs(): number
    get_vf(idx: number): SriovVF
    remove_vf(idx: number): void
    remove_vf_by_index(index: number): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::autoprobe-drivers", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoprobe-drivers", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::total-vfs", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::total-vfs", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vfs", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vfs", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingSriov_ConstructProps)
    _init (config?: SettingSriov_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingSriov
    static $gtype: GObject.Type
}
export interface SettingTCConfig_ConstructProps extends Setting_ConstructProps {
    qdiscs?: TCQdisc[]
    tfilters?: TCTfilter[]
}
export class SettingTCConfig {
    /* Properties of NM.SettingTCConfig */
    qdiscs: TCQdisc[]
    tfilters: TCTfilter[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingTCConfig */
    add_qdisc(qdisc: TCQdisc): boolean
    add_tfilter(tfilter: TCTfilter): boolean
    clear_qdiscs(): void
    clear_tfilters(): void
    get_num_qdiscs(): number
    get_num_tfilters(): number
    get_qdisc(idx: number): TCQdisc
    get_tfilter(idx: number): TCTfilter
    remove_qdisc(idx: number): void
    remove_qdisc_by_value(qdisc: TCQdisc): boolean
    remove_tfilter(idx: number): void
    remove_tfilter_by_value(tfilter: TCTfilter): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::qdiscs", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::qdiscs", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tfilters", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tfilters", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingTCConfig_ConstructProps)
    _init (config?: SettingTCConfig_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingTCConfig
    static $gtype: GObject.Type
}
export interface SettingTeam_ConstructProps extends Setting_ConstructProps {
    config?: string
    link_watchers?: TeamLinkWatcher[]
    mcast_rejoin_count?: number
    mcast_rejoin_interval?: number
    notify_peers_count?: number
    notify_peers_interval?: number
    runner?: string
    runner_active?: boolean
    runner_agg_select_policy?: string
    runner_fast_rate?: boolean
    runner_hwaddr_policy?: string
    runner_min_ports?: number
    runner_sys_prio?: number
    runner_tx_balancer?: string
    runner_tx_balancer_interval?: number
    runner_tx_hash?: string[]
}
export class SettingTeam {
    /* Properties of NM.SettingTeam */
    config: string
    link_watchers: TeamLinkWatcher[]
    mcast_rejoin_count: number
    mcast_rejoin_interval: number
    notify_peers_count: number
    notify_peers_interval: number
    runner: string
    runner_active: boolean
    runner_agg_select_policy: string
    runner_fast_rate: boolean
    runner_hwaddr_policy: string
    runner_min_ports: number
    runner_sys_prio: number
    runner_tx_balancer: string
    runner_tx_balancer_interval: number
    runner_tx_hash: string[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingTeam */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingTeam */
    add_link_watcher(link_watcher: TeamLinkWatcher): boolean
    add_runner_tx_hash(txhash: string): boolean
    clear_link_watchers(): void
    get_config(): string
    get_link_watcher(idx: number): TeamLinkWatcher
    get_mcast_rejoin_count(): number
    get_mcast_rejoin_interval(): number
    get_notify_peers_count(): number
    get_notify_peers_interval(): number
    get_num_link_watchers(): number
    get_num_runner_tx_hash(): number
    get_runner(): string
    get_runner_active(): boolean
    get_runner_agg_select_policy(): string
    get_runner_fast_rate(): boolean
    get_runner_hwaddr_policy(): string
    get_runner_min_ports(): number
    get_runner_sys_prio(): number
    get_runner_tx_balancer(): string
    get_runner_tx_balancer_interval(): number
    get_runner_tx_hash(idx: number): string
    remove_link_watcher(idx: number): void
    remove_link_watcher_by_value(link_watcher: TeamLinkWatcher): boolean
    remove_runner_tx_hash(idx: number): void
    remove_runner_tx_hash_by_value(txhash: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::config", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::config", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::link-watchers", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::link-watchers", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mcast-rejoin-count", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mcast-rejoin-count", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mcast-rejoin-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mcast-rejoin-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::notify-peers-count", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::notify-peers-count", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::notify-peers-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::notify-peers-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner-active", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-active", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner-agg-select-policy", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-agg-select-policy", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner-fast-rate", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-fast-rate", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner-hwaddr-policy", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-hwaddr-policy", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner-min-ports", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-min-ports", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner-sys-prio", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-sys-prio", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner-tx-balancer", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-tx-balancer", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner-tx-balancer-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-tx-balancer-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::runner-tx-hash", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-tx-hash", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingTeam_ConstructProps)
    _init (config?: SettingTeam_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingTeam
    static $gtype: GObject.Type
}
export interface SettingTeamPort_ConstructProps extends Setting_ConstructProps {
    config?: string
    lacp_key?: number
    lacp_prio?: number
    link_watchers?: TeamLinkWatcher[]
    prio?: number
    queue_id?: number
    sticky?: boolean
}
export class SettingTeamPort {
    /* Properties of NM.SettingTeamPort */
    config: string
    lacp_key: number
    lacp_prio: number
    link_watchers: TeamLinkWatcher[]
    prio: number
    queue_id: number
    sticky: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingTeamPort */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingTeamPort */
    add_link_watcher(link_watcher: TeamLinkWatcher): boolean
    clear_link_watchers(): void
    get_config(): string
    get_lacp_key(): number
    get_lacp_prio(): number
    get_link_watcher(idx: number): TeamLinkWatcher
    get_num_link_watchers(): number
    get_prio(): number
    get_queue_id(): number
    get_sticky(): boolean
    remove_link_watcher(idx: number): void
    remove_link_watcher_by_value(link_watcher: TeamLinkWatcher): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::config", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::config", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lacp-key", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lacp-key", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::lacp-prio", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lacp-prio", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::link-watchers", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::link-watchers", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prio", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prio", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::queue-id", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::queue-id", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::sticky", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sticky", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingTeamPort_ConstructProps)
    _init (config?: SettingTeamPort_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingTeamPort
    static $gtype: GObject.Type
}
export interface SettingTun_ConstructProps extends Setting_ConstructProps {
    group?: string
    mode?: number
    multi_queue?: boolean
    owner?: string
    pi?: boolean
    vnet_hdr?: boolean
}
export class SettingTun {
    /* Properties of NM.SettingTun */
    group: string
    mode: number
    multi_queue: boolean
    owner: string
    pi: boolean
    vnet_hdr: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingTun */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingTun */
    get_group(): string
    get_mode(): SettingTunMode
    get_multi_queue(): boolean
    get_owner(): string
    get_pi(): boolean
    get_vnet_hdr(): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::group", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::multi-queue", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multi-queue", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pi", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pi", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vnet-hdr", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vnet-hdr", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingTun_ConstructProps)
    _init (config?: SettingTun_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingTun
    static $gtype: GObject.Type
}
export interface SettingUser_ConstructProps extends Setting_ConstructProps {
    data?: GLib.HashTable
}
export class SettingUser {
    /* Properties of NM.SettingUser */
    data: GLib.HashTable
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingUser */
    get_data(key: string): string
    get_keys(): string[]
    set_data(key: string, val?: string | null): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingUser_ConstructProps)
    _init (config?: SettingUser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingUser
    static check_key(key: string): boolean
    static check_val(val: string): boolean
    static $gtype: GObject.Type
}
export interface SettingVlan_ConstructProps extends Setting_ConstructProps {
    egress_priority_map?: string[]
    flags?: VlanFlags
    id?: number
    ingress_priority_map?: string[]
    parent?: string
}
export class SettingVlan {
    /* Properties of NM.SettingVlan */
    egress_priority_map: string[]
    flags: VlanFlags
    id: number
    ingress_priority_map: string[]
    parent: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingVlan */
    add_priority(map: VlanPriorityMap, from: number, to: number): boolean
    add_priority_str(map: VlanPriorityMap, str: string): boolean
    clear_priorities(map: VlanPriorityMap): void
    get_flags(): number
    get_id(): number
    get_num_priorities(map: VlanPriorityMap): number
    get_parent(): string
    get_priority(map: VlanPriorityMap, idx: number): [ /* returnType */ boolean, /* out_from */ number | null, /* out_to */ number | null ]
    remove_priority(map: VlanPriorityMap, idx: number): void
    remove_priority_by_value(map: VlanPriorityMap, from: number, to: number): boolean
    remove_priority_str_by_value(map: VlanPriorityMap, str: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::egress-priority-map", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::egress-priority-map", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flags", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ingress-priority-map", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ingress-priority-map", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingVlan_ConstructProps)
    _init (config?: SettingVlan_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingVlan
    static $gtype: GObject.Type
}
export interface SettingVpn_ConstructProps extends Setting_ConstructProps {
    data?: GLib.HashTable
    persistent?: boolean
    secrets?: GLib.HashTable
    service_type?: string
    timeout?: number
    user_name?: string
}
export class SettingVpn {
    /* Properties of NM.SettingVpn */
    data: GLib.HashTable
    persistent: boolean
    secrets: GLib.HashTable
    service_type: string
    timeout: number
    user_name: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingVpn */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingVpn */
    add_data_item(key: string, item?: string | null): void
    add_secret(key: string, secret?: string | null): void
    foreach_data_item(func: VpnIterFunc): void
    foreach_secret(func: VpnIterFunc): void
    get_data_item(key: string): string
    get_data_keys(): string[]
    get_num_data_items(): number
    get_num_secrets(): number
    get_persistent(): boolean
    get_secret(key: string): string
    get_secret_keys(): string[]
    get_service_type(): string
    get_timeout(): number
    get_user_name(): string
    remove_data_item(key: string): boolean
    remove_secret(key: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::persistent", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::persistent", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::secrets", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secrets", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::service-type", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service-type", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::timeout", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timeout", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-name", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-name", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingVpn_ConstructProps)
    _init (config?: SettingVpn_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingVpn
    static $gtype: GObject.Type
}
export interface SettingVrf_ConstructProps extends Setting_ConstructProps {
    table?: number
}
export class SettingVrf {
    /* Properties of NM.SettingVrf */
    table: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingVrf */
    get_table(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::table", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::table", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingVrf_ConstructProps)
    _init (config?: SettingVrf_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingVrf
    static $gtype: GObject.Type
}
export interface SettingVxlan_ConstructProps extends Setting_ConstructProps {
    ageing?: number
    destination_port?: number
    id?: number
    l2_miss?: boolean
    l3_miss?: boolean
    learning?: boolean
    limit?: number
    local?: string
    parent?: string
    proxy?: boolean
    remote?: string
    rsc?: boolean
    source_port_max?: number
    source_port_min?: number
    tos?: number
    ttl?: number
}
export class SettingVxlan {
    /* Properties of NM.SettingVxlan */
    ageing: number
    destination_port: number
    id: number
    l2_miss: boolean
    l3_miss: boolean
    learning: boolean
    limit: number
    local: string
    parent: string
    proxy: boolean
    remote: string
    rsc: boolean
    source_port_max: number
    source_port_min: number
    tos: number
    ttl: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingVxlan */
    get_ageing(): number
    get_destination_port(): number
    get_id(): number
    get_l2_miss(): boolean
    get_l3_miss(): boolean
    get_learning(): boolean
    get_limit(): number
    get_local(): string
    get_parent(): string
    get_proxy(): boolean
    get_remote(): string
    get_rsc(): boolean
    get_source_port_max(): number
    get_source_port_min(): number
    get_tos(): number
    get_ttl(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::ageing", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ageing", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::destination-port", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::destination-port", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::l2-miss", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::l2-miss", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::l3-miss", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::l3-miss", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::learning", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::learning", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::limit", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::limit", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proxy", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::remote", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remote", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rsc", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rsc", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::source-port-max", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source-port-max", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::source-port-min", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source-port-min", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tos", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tos", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ttl", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ttl", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingVxlan_ConstructProps)
    _init (config?: SettingVxlan_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingVxlan
    static $gtype: GObject.Type
}
export interface SettingWifiP2P_ConstructProps extends Setting_ConstructProps {
    peer?: string
    wfd_ies?: Gjs.byteArray.ByteArray
    wps_method?: number
}
export class SettingWifiP2P {
    /* Properties of NM.SettingWifiP2P */
    peer: string
    wfd_ies: Gjs.byteArray.ByteArray
    wps_method: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingWifiP2P */
    get_peer(): string
    get_wfd_ies(): Gjs.byteArray.ByteArray
    get_wps_method(): SettingWirelessSecurityWpsMethod
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::peer", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peer", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wfd-ies", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wfd-ies", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wps-method", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wps-method", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingWifiP2P_ConstructProps)
    _init (config?: SettingWifiP2P_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingWifiP2P
    static $gtype: GObject.Type
}
export interface SettingWimax_ConstructProps extends Setting_ConstructProps {
    mac_address?: string
    network_name?: string
}
export class SettingWimax {
    /* Properties of NM.SettingWimax */
    mac_address: string
    network_name: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingWimax */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingWimax */
    get_mac_address(): string
    get_network_name(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::mac-address", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::network-name", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-name", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingWimax_ConstructProps)
    _init (config?: SettingWimax_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingWimax
    static $gtype: GObject.Type
}
export interface SettingWireGuard_ConstructProps extends Setting_ConstructProps {
    fwmark?: number
    ip4_auto_default_route?: Ternary
    ip6_auto_default_route?: Ternary
    listen_port?: number
    mtu?: number
    peer_routes?: boolean
    private_key?: string
    private_key_flags?: SettingSecretFlags
}
export class SettingWireGuard {
    /* Properties of NM.SettingWireGuard */
    fwmark: number
    ip4_auto_default_route: Ternary
    ip6_auto_default_route: Ternary
    listen_port: number
    mtu: number
    peer_routes: boolean
    private_key: string
    private_key_flags: SettingSecretFlags
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingWireGuard */
    append_peer(peer: WireGuardPeer): void
    clear_peers(): number
    get_fwmark(): number
    get_ip4_auto_default_route(): Ternary
    get_ip6_auto_default_route(): Ternary
    get_listen_port(): number
    get_mtu(): number
    get_peer(idx: number): WireGuardPeer
    get_peer_by_public_key(public_key: string): [ /* returnType */ WireGuardPeer, /* out_idx */ number | null ]
    get_peer_routes(): boolean
    get_peers_len(): number
    get_private_key(): string
    get_private_key_flags(): SettingSecretFlags
    remove_peer(idx: number): boolean
    set_peer(peer: WireGuardPeer, idx: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::fwmark", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fwmark", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-auto-default-route", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-auto-default-route", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-auto-default-route", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-auto-default-route", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::listen-port", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::listen-port", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::peer-routes", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peer-routes", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::private-key", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::private-key-flags", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key-flags", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingWireGuard_ConstructProps)
    _init (config?: SettingWireGuard_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingWireGuard
    static $gtype: GObject.Type
}
export interface SettingWired_ConstructProps extends Setting_ConstructProps {
    auto_negotiate?: boolean
    cloned_mac_address?: string
    duplex?: string
    generate_mac_address_mask?: string
    mac_address?: string
    mac_address_blacklist?: string[]
    mtu?: number
    port?: string
    s390_nettype?: string
    s390_options?: GLib.HashTable
    s390_subchannels?: string[]
    speed?: number
    wake_on_lan?: number
    wake_on_lan_password?: string
}
export class SettingWired {
    /* Properties of NM.SettingWired */
    auto_negotiate: boolean
    cloned_mac_address: string
    duplex: string
    generate_mac_address_mask: string
    mac_address: string
    mac_address_blacklist: string[]
    mtu: number
    port: string
    s390_nettype: string
    s390_options: GLib.HashTable
    s390_subchannels: string[]
    speed: number
    wake_on_lan: number
    wake_on_lan_password: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingWired */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingWired */
    add_mac_blacklist_item(mac: string): boolean
    add_s390_option(key: string, value: string): boolean
    clear_mac_blacklist_items(): void
    get_auto_negotiate(): boolean
    get_cloned_mac_address(): string
    get_duplex(): string
    get_generate_mac_address_mask(): string
    get_mac_address(): string
    get_mac_address_blacklist(): string[]
    get_mac_blacklist_item(idx: number): string
    get_mtu(): number
    get_num_mac_blacklist_items(): number
    get_num_s390_options(): number
    get_port(): string
    get_s390_nettype(): string
    get_s390_option(idx: number): [ /* returnType */ boolean, /* out_key */ string, /* out_value */ string ]
    get_s390_option_by_key(key: string): string
    get_s390_subchannels(): string[]
    get_speed(): number
    get_valid_s390_options(): string[]
    get_wake_on_lan(): SettingWiredWakeOnLan
    get_wake_on_lan_password(): string
    remove_mac_blacklist_item(idx: number): void
    remove_mac_blacklist_item_by_value(mac: string): boolean
    remove_s390_option(key: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auto-negotiate", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-negotiate", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cloned-mac-address", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cloned-mac-address", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::duplex", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duplex", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::generate-mac-address-mask", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::generate-mac-address-mask", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mac-address", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mac-address-blacklist", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address-blacklist", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::port", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::s390-nettype", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::s390-nettype", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::s390-options", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::s390-options", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::s390-subchannels", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::s390-subchannels", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::speed", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::speed", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wake-on-lan", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wake-on-lan", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wake-on-lan-password", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wake-on-lan-password", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingWired_ConstructProps)
    _init (config?: SettingWired_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingWired
    static $gtype: GObject.Type
}
export interface SettingWireless_ConstructProps extends Setting_ConstructProps {
    band?: string
    bssid?: string
    channel?: number
    cloned_mac_address?: string
    generate_mac_address_mask?: string
    hidden?: boolean
    mac_address?: string
    mac_address_blacklist?: string[]
    mac_address_randomization?: number
    mode?: string
    mtu?: number
    powersave?: number
    rate?: number
    seen_bssids?: string[]
    ssid?: Gjs.byteArray.ByteArray
    tx_power?: number
    wake_on_wlan?: number
}
export class SettingWireless {
    /* Properties of NM.SettingWireless */
    band: string
    bssid: string
    channel: number
    cloned_mac_address: string
    generate_mac_address_mask: string
    hidden: boolean
    mac_address: string
    mac_address_blacklist: string[]
    mac_address_randomization: number
    mode: string
    mtu: number
    powersave: number
    rate: number
    seen_bssids: string[]
    ssid: Gjs.byteArray.ByteArray
    tx_power: number
    wake_on_wlan: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingWireless */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingWireless */
    add_mac_blacklist_item(mac: string): boolean
    add_seen_bssid(bssid: string): boolean
    ap_security_compatible(s_wireless_sec: SettingWirelessSecurity, ap_flags: TODO_80211ApFlags, ap_wpa: TODO_80211ApSecurityFlags, ap_rsn: TODO_80211ApSecurityFlags, ap_mode: TODO_80211Mode): boolean
    clear_mac_blacklist_items(): void
    get_band(): string
    get_bssid(): string
    get_channel(): number
    get_cloned_mac_address(): string
    get_generate_mac_address_mask(): string
    get_hidden(): boolean
    get_mac_address(): string
    get_mac_address_blacklist(): string[]
    get_mac_address_randomization(): SettingMacRandomization
    get_mac_blacklist_item(idx: number): string
    get_mode(): string
    get_mtu(): number
    get_num_mac_blacklist_items(): number
    get_num_seen_bssids(): number
    get_powersave(): number
    get_rate(): number
    get_seen_bssid(i: number): string
    get_ssid(): Gjs.byteArray.ByteArray
    get_tx_power(): number
    get_wake_on_wlan(): SettingWirelessWakeOnWLan
    remove_mac_blacklist_item(idx: number): void
    remove_mac_blacklist_item_by_value(mac: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::band", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::band", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::bssid", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bssid", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::channel", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cloned-mac-address", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cloned-mac-address", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::generate-mac-address-mask", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::generate-mac-address-mask", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hidden", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mac-address", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mac-address-blacklist", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address-blacklist", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mac-address-randomization", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address-randomization", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mtu", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::powersave", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::powersave", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rate", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rate", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::seen-bssids", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seen-bssids", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ssid", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ssid", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tx-power", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tx-power", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wake-on-wlan", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wake-on-wlan", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingWireless_ConstructProps)
    _init (config?: SettingWireless_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingWireless
    static $gtype: GObject.Type
}
export interface SettingWirelessSecurity_ConstructProps extends Setting_ConstructProps {
    auth_alg?: string
    fils?: number
    group?: string[]
    key_mgmt?: string
    leap_password?: string
    leap_password_flags?: SettingSecretFlags
    leap_username?: string
    pairwise?: string[]
    pmf?: number
    proto?: string[]
    psk?: string
    psk_flags?: SettingSecretFlags
    wep_key_flags?: SettingSecretFlags
    wep_key_type?: WepKeyType
    wep_key0?: string
    wep_key1?: string
    wep_key2?: string
    wep_key3?: string
    wep_tx_keyidx?: number
    wps_method?: number
}
export class SettingWirelessSecurity {
    /* Properties of NM.SettingWirelessSecurity */
    auth_alg: string
    fils: number
    group: string[]
    key_mgmt: string
    leap_password: string
    leap_password_flags: SettingSecretFlags
    leap_username: string
    pairwise: string[]
    pmf: number
    proto: string[]
    psk: string
    psk_flags: SettingSecretFlags
    wep_key_flags: SettingSecretFlags
    wep_key_type: WepKeyType
    wep_key0: string
    wep_key1: string
    wep_key2: string
    wep_key3: string
    wep_tx_keyidx: number
    wps_method: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingWirelessSecurity */
    parent: Setting
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingWirelessSecurity */
    add_group(group: string): boolean
    add_pairwise(pairwise: string): boolean
    add_proto(proto: string): boolean
    clear_groups(): void
    clear_pairwise(): void
    clear_protos(): void
    get_auth_alg(): string
    get_fils(): SettingWirelessSecurityFils
    get_group(i: number): string
    get_key_mgmt(): string
    get_leap_password(): string
    get_leap_password_flags(): SettingSecretFlags
    get_leap_username(): string
    get_num_groups(): number
    get_num_pairwise(): number
    get_num_protos(): number
    get_pairwise(i: number): string
    get_pmf(): SettingWirelessSecurityPmf
    get_proto(i: number): string
    get_psk(): string
    get_psk_flags(): SettingSecretFlags
    get_wep_key(idx: number): string
    get_wep_key_flags(): SettingSecretFlags
    get_wep_key_type(): WepKeyType
    get_wep_tx_keyidx(): number
    get_wps_method(): SettingWirelessSecurityWpsMethod
    remove_group(i: number): void
    remove_group_by_value(group: string): boolean
    remove_pairwise(i: number): void
    remove_pairwise_by_value(pairwise: string): boolean
    remove_proto(i: number): void
    remove_proto_by_value(proto: string): boolean
    set_wep_key(idx: number, key: string): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auth-alg", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auth-alg", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fils", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fils", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::key-mgmt", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-mgmt", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::leap-password", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::leap-password", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::leap-password-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::leap-password-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::leap-username", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::leap-username", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pairwise", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pairwise", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pmf", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pmf", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proto", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proto", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::psk", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::psk", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::psk-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::psk-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wep-key-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wep-key-type", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key-type", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wep-key0", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key0", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wep-key1", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key1", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wep-key2", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key2", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wep-key3", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key3", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wep-tx-keyidx", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-tx-keyidx", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wps-method", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wps-method", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingWirelessSecurity_ConstructProps)
    _init (config?: SettingWirelessSecurity_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingWirelessSecurity
    static $gtype: GObject.Type
}
export interface SettingWpan_ConstructProps extends Setting_ConstructProps {
    channel?: number
    mac_address?: string
    page?: number
    pan_id?: number
    short_address?: number
}
export class SettingWpan {
    /* Properties of NM.SettingWpan */
    channel: number
    mac_address: string
    page: number
    pan_id: number
    short_address: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.SettingWpan */
    get_channel(): number
    get_mac_address(): string
    get_page(): number
    get_pan_id(): number
    get_short_address(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invert_results: boolean, results: GLib.HashTable): [ /* returnType */ boolean, /* results */ GLib.HashTable ]
    duplicate(): Setting
    enumerate_values(func: SettingValueIterFn): void
    get_dbus_property_type(property_name: string): GLib.VariantType
    get_name(): string
    get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    option_clear_by_name(predicate?: UtilsPredicateStr | null): void
    option_get(opt_name: string): GLib.Variant
    option_get_all_names(): string[]
    option_get_boolean(opt_name: string): [ /* returnType */ boolean, /* out_value */ boolean | null ]
    option_get_uint32(opt_name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    option_set(opt_name: string, variant?: GLib.Variant | null): void
    option_set_boolean(opt_name: string, value: boolean): void
    option_set_uint32(opt_name: string, value: number): void
    set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    to_string(): string
    verify(connection?: Connection | null): boolean
    verify_secrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfunc_aggregate(type_i: number, arg?: object | null): boolean
    vfunc_get_secret_flags(secret_name: string, out_flags: SettingSecretFlags): boolean
    vfunc_init_from_dbus(keys: GLib.HashTable, setting_dict: GLib.Variant, connection_dict: GLib.Variant, parse_flags: number): boolean
    vfunc_set_secret_flags(secret_name: string, flags: SettingSecretFlags): boolean
    vfunc_update_one_secret(key: string, value: GLib.Variant): number
    vfunc_verify(connection: Connection): number
    vfunc_verify_secrets(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::channel", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mac-address", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::page", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pan-id", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pan-id", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::short-address", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::short-address", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettingWpan_ConstructProps)
    _init (config?: SettingWpan_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SettingWpan
    static $gtype: GObject.Type
}
export interface SimpleConnection_ConstructProps extends GObject.Object_ConstructProps {
}
export class SimpleConnection {
    /* Fields of NM.SimpleConnection */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of NM.Connection */
    add_setting(setting: Setting): void
    clear_secrets(): void
    clear_secrets_with_flags(func?: SettingClearSecretsWithFlagsFn | null): void
    clear_settings(): void
    compare(b: Connection, flags: SettingCompareFlags): boolean
    diff(b: Connection, flags: SettingCompareFlags, out_settings: GLib.HashTable): boolean
    dump(): void
    for_each_setting_value(func: SettingValueIterFn): void
    get_connection_type(): string
    get_id(): string
    get_interface_name(): string
    get_path(): string
    get_setting(setting_type: GObject.Type): Setting
    get_setting_802_1x(): Setting8021x
    get_setting_adsl(): SettingAdsl
    get_setting_bluetooth(): SettingBluetooth
    get_setting_bond(): SettingBond
    get_setting_bridge(): SettingBridge
    get_setting_bridge_port(): SettingBridgePort
    get_setting_by_name(name: string): Setting
    get_setting_cdma(): SettingCdma
    get_setting_connection(): SettingConnection
    get_setting_dcb(): SettingDcb
    get_setting_dummy(): SettingDummy
    get_setting_generic(): SettingGeneric
    get_setting_gsm(): SettingGsm
    get_setting_infiniband(): SettingInfiniband
    get_setting_ip4_config(): SettingIP4Config
    get_setting_ip6_config(): SettingIP6Config
    get_setting_ip_tunnel(): SettingIPTunnel
    get_setting_macsec(): SettingMacsec
    get_setting_macvlan(): SettingMacvlan
    get_setting_olpc_mesh(): SettingOlpcMesh
    get_setting_ovs_bridge(): SettingOvsBridge
    get_setting_ovs_interface(): SettingOvsInterface
    get_setting_ovs_patch(): SettingOvsPatch
    get_setting_ovs_port(): SettingOvsPort
    get_setting_ppp(): SettingPpp
    get_setting_pppoe(): SettingPppoe
    get_setting_proxy(): SettingProxy
    get_setting_serial(): SettingSerial
    get_setting_tc_config(): SettingTCConfig
    get_setting_team(): SettingTeam
    get_setting_team_port(): SettingTeamPort
    get_setting_tun(): SettingTun
    get_setting_vlan(): SettingVlan
    get_setting_vpn(): SettingVpn
    get_setting_vxlan(): SettingVxlan
    get_setting_wimax(): SettingWimax
    get_setting_wired(): SettingWired
    get_setting_wireless(): SettingWireless
    get_setting_wireless_security(): SettingWirelessSecurity
    get_settings(): Setting[]
    get_uuid(): string
    get_virtual_device_description(): string
    is_type(type: string): boolean
    is_virtual(): boolean
    need_secrets(): [ /* returnType */ string, /* hints */ string[] | null ]
    normalize(parameters?: GLib.HashTable | null): [ /* returnType */ boolean, /* modified */ boolean | null ]
    remove_setting(setting_type: GObject.Type): void
    replace_settings(new_settings: GLib.Variant): boolean
    replace_settings_from_connection(new_connection: Connection): void
    set_path(path: string): void
    to_dbus(flags: ConnectionSerializationFlags): GLib.Variant
    update_secrets(setting_name: string, secrets: GLib.Variant): boolean
    verify(): boolean
    verify_secrets(): boolean
    /* Virtual methods of NM.SimpleConnection */
    vfunc_changed(): void
    vfunc_secrets_cleared(): void
    vfunc_secrets_updated(setting: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SimpleConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SimpleConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of NM.Connection */
    connect(sigName: "changed", callback: (($obj: SimpleConnection) => void)): number
    connect_after(sigName: "changed", callback: (($obj: SimpleConnection) => void)): number
    emit(sigName: "changed"): void
    connect(sigName: "secrets-cleared", callback: (($obj: SimpleConnection) => void)): number
    connect_after(sigName: "secrets-cleared", callback: (($obj: SimpleConnection) => void)): number
    emit(sigName: "secrets-cleared"): void
    connect(sigName: "secrets-updated", callback: (($obj: SimpleConnection, setting_name: string) => void)): number
    connect_after(sigName: "secrets-updated", callback: (($obj: SimpleConnection, setting_name: string) => void)): number
    emit(sigName: "secrets-updated", setting_name: string): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SimpleConnection_ConstructProps)
    _init (config?: SimpleConnection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new_clone(connection: Connection): Connection
    static new_from_dbus(dict: GLib.Variant): Connection
    static $gtype: GObject.Type
}
export interface VpnConnection_ConstructProps extends ActiveConnection_ConstructProps {
}
export class VpnConnection {
    /* Properties of NM.VpnConnection */
    readonly banner: string
    readonly vpn_state: VpnConnectionState
    /* Properties of NM.ActiveConnection */
    readonly connection: RemoteConnection
    readonly "default": boolean
    readonly default6: boolean
    readonly devices: Device[]
    readonly dhcp4_config: DhcpConfig
    readonly dhcp6_config: DhcpConfig
    readonly id: string
    readonly ip4_config: IPConfig
    readonly ip6_config: IPConfig
    readonly master: Device
    readonly specific_object_path: string
    readonly state: ActiveConnectionState
    readonly state_flags: number
    readonly type: string
    readonly uuid: string
    readonly vpn: boolean
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.VpnConnection */
    get_banner(): string
    get_vpn_state(): VpnConnectionState
    /* Methods of NM.ActiveConnection */
    get_connection(): RemoteConnection
    get_connection_type(): string
    get_default(): boolean
    get_default6(): boolean
    get_devices(): Device[]
    get_dhcp4_config(): DhcpConfig
    get_dhcp6_config(): DhcpConfig
    get_id(): string
    get_ip4_config(): IPConfig
    get_ip6_config(): IPConfig
    get_master(): Device
    get_specific_object_path(): string
    get_state(): ActiveConnectionState
    get_state_flags(): ActivationStateFlags
    get_state_reason(): ActiveConnectionStateReason
    get_uuid(): string
    get_vpn(): boolean
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.VpnConnection */
    connect(sigName: "vpn-state-changed", callback: (($obj: VpnConnection, object: number, p0: number) => void)): number
    connect_after(sigName: "vpn-state-changed", callback: (($obj: VpnConnection, object: number, p0: number) => void)): number
    emit(sigName: "vpn-state-changed", object: number, p0: number): void
    /* Signals of NM.ActiveConnection */
    connect(sigName: "state-changed", callback: (($obj: VpnConnection, state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: VpnConnection, state: number, reason: number) => void)): number
    emit(sigName: "state-changed", state: number, reason: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::banner", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::banner", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vpn-state", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vpn-state", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default6", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default6", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::devices", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devices", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp4-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dhcp6-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip4-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ip6-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::master", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::master", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::specific-object-path", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specific-object-path", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-flags", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-flags", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::uuid", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vpn", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vpn", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VpnConnection_ConstructProps)
    _init (config?: VpnConnection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface VpnPluginInfo_ConstructProps extends GObject.Object_ConstructProps {
    filename?: string
    keyfile?: GLib.KeyFile
}
export class VpnPluginInfo {
    /* Properties of NM.VpnPluginInfo */
    readonly name: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.VpnPluginInfo */
    get_aliases(): string[]
    get_auth_dialog(): string
    get_editor_plugin(): VpnEditorPlugin
    get_filename(): string
    get_name(): string
    get_plugin(): string
    get_program(): string
    get_service(): string
    load_editor_plugin(): VpnEditorPlugin
    lookup_property(group: string, key: string): string
    set_editor_plugin(plugin?: VpnEditorPlugin | null): void
    supports_hints(): boolean
    supports_multiple(): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of NM.VpnPluginInfo */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VpnPluginInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VpnPluginInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: (($obj: VpnPluginInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: VpnPluginInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VpnPluginInfo_ConstructProps)
    _init (config?: VpnPluginInfo_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new_from_file(filename: string): VpnPluginInfo
    static new_search_file(name?: string | null, service?: string | null): VpnPluginInfo
    static new_with_data(filename: string, keyfile: GLib.KeyFile): VpnPluginInfo
    static list_add(list: VpnPluginInfo[], plugin_info: VpnPluginInfo): boolean
    static list_find_by_filename(list: VpnPluginInfo[], filename: string): VpnPluginInfo
    static list_find_by_name(list: VpnPluginInfo[], name: string): VpnPluginInfo
    static list_find_by_service(list: VpnPluginInfo[], service: string): VpnPluginInfo
    static list_find_service_type(list: VpnPluginInfo[], name: string): string
    static list_get_service_types(list: VpnPluginInfo[], only_existing: boolean, with_abbreviations: boolean): string[]
    static list_load(): VpnPluginInfo[]
    static list_remove(list: VpnPluginInfo[], plugin_info: VpnPluginInfo): boolean
    static validate_filename(filename: string): boolean
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
export interface VpnPluginOld_ConstructProps extends GObject.Object_ConstructProps {
    service_name?: string
    state?: VpnServiceState
}
export class VpnPluginOld {
    /* Properties of NM.VpnPluginOld */
    state: VpnServiceState
    /* Fields of NM.VpnPluginOld */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.VpnPluginOld */
    disconnect(): boolean
    failure(reason: VpnPluginFailure): void
    get_connection(): Gio.DBusConnection
    get_state(): VpnServiceState
    secrets_required(message: string, hints: string): void
    set_config(config: GLib.Variant): void
    set_ip4_config(ip4_config: GLib.Variant): void
    set_ip6_config(ip6_config: GLib.Variant): void
    set_login_banner(banner: string): void
    set_state(state: VpnServiceState): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of NM.VpnPluginOld */
    vfunc_config(config: GLib.Variant): void
    vfunc_connect(connection: Connection): boolean
    vfunc_connect_interactive(connection: Connection, details: GLib.Variant): boolean
    vfunc_disconnect(): boolean
    vfunc_failure(reason: VpnPluginFailure): void
    vfunc_ip4_config(ip4_config: GLib.Variant): void
    vfunc_ip6_config(config: GLib.Variant): void
    vfunc_login_banner(banner: string): void
    vfunc_need_secrets(connection: Connection, setting_name: string): boolean
    vfunc_new_secrets(connection: Connection): boolean
    vfunc_quit(): void
    vfunc_state_changed(state: VpnServiceState): void
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.VpnPluginOld */
    connect(sigName: "config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    connect_after(sigName: "config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    emit(sigName: "config", object: GLib.Variant): void
    connect(sigName: "failure", callback: (($obj: VpnPluginOld, object: number) => void)): number
    connect_after(sigName: "failure", callback: (($obj: VpnPluginOld, object: number) => void)): number
    emit(sigName: "failure", object: number): void
    connect(sigName: "ip4-config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    connect_after(sigName: "ip4-config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    emit(sigName: "ip4-config", object: GLib.Variant): void
    connect(sigName: "ip6-config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    connect_after(sigName: "ip6-config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    emit(sigName: "ip6-config", object: GLib.Variant): void
    connect(sigName: "login-banner", callback: (($obj: VpnPluginOld, object: string) => void)): number
    connect_after(sigName: "login-banner", callback: (($obj: VpnPluginOld, object: string) => void)): number
    emit(sigName: "login-banner", object: string): void
    connect(sigName: "quit", callback: (($obj: VpnPluginOld) => void)): number
    connect_after(sigName: "quit", callback: (($obj: VpnPluginOld) => void)): number
    emit(sigName: "quit"): void
    connect(sigName: "secrets-required", callback: (($obj: VpnPluginOld, object: string, p0: string[]) => void)): number
    connect_after(sigName: "secrets-required", callback: (($obj: VpnPluginOld, object: string, p0: string[]) => void)): number
    emit(sigName: "secrets-required", object: string, p0: string[]): void
    connect(sigName: "state-changed", callback: (($obj: VpnPluginOld, object: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: VpnPluginOld, object: number) => void)): number
    emit(sigName: "state-changed", object: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VpnPluginOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VpnPluginOld, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::state", callback: (($obj: VpnPluginOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: VpnPluginOld, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VpnPluginOld_ConstructProps)
    _init (config?: VpnPluginOld_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static get_secret_flags(data: GLib.HashTable, secret_name: string): [ /* returnType */ boolean, /* out_flags */ SettingSecretFlags ]
    static read_vpn_details(fd: number): [ /* returnType */ boolean, /* out_data */ GLib.HashTable, /* out_secrets */ GLib.HashTable ]
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
export interface VpnServicePlugin_ConstructProps extends GObject.Object_ConstructProps {
    service_name?: string
    state?: VpnServiceState
    watch_peer?: boolean
}
export class VpnServicePlugin {
    /* Properties of NM.VpnServicePlugin */
    state: VpnServiceState
    /* Fields of NM.VpnServicePlugin */
    parent: GObject.Object
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.VpnServicePlugin */
    disconnect(): boolean
    failure(reason: VpnPluginFailure): void
    get_connection(): Gio.DBusConnection
    secrets_required(message: string, hints: string): void
    set_config(config: GLib.Variant): void
    set_ip4_config(ip4_config: GLib.Variant): void
    set_ip6_config(ip6_config: GLib.Variant): void
    set_login_banner(banner: string): void
    shutdown(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of NM.VpnServicePlugin */
    vfunc_config(config: GLib.Variant): void
    vfunc_connect(connection: Connection): boolean
    vfunc_connect_interactive(connection: Connection, details: GLib.Variant): boolean
    vfunc_disconnect(): boolean
    vfunc_failure(reason: VpnPluginFailure): void
    vfunc_ip4_config(ip4_config: GLib.Variant): void
    vfunc_ip6_config(config: GLib.Variant): void
    vfunc_login_banner(banner: string): void
    vfunc_need_secrets(connection: Connection, setting_name: string): boolean
    vfunc_new_secrets(connection: Connection): boolean
    vfunc_quit(): void
    vfunc_state_changed(state: VpnServiceState): void
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.VpnServicePlugin */
    connect(sigName: "config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    connect_after(sigName: "config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    emit(sigName: "config", object: GLib.Variant): void
    connect(sigName: "failure", callback: (($obj: VpnServicePlugin, object: number) => void)): number
    connect_after(sigName: "failure", callback: (($obj: VpnServicePlugin, object: number) => void)): number
    emit(sigName: "failure", object: number): void
    connect(sigName: "ip4-config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    connect_after(sigName: "ip4-config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    emit(sigName: "ip4-config", object: GLib.Variant): void
    connect(sigName: "ip6-config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    connect_after(sigName: "ip6-config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    emit(sigName: "ip6-config", object: GLib.Variant): void
    connect(sigName: "login-banner", callback: (($obj: VpnServicePlugin, object: string) => void)): number
    connect_after(sigName: "login-banner", callback: (($obj: VpnServicePlugin, object: string) => void)): number
    emit(sigName: "login-banner", object: string): void
    connect(sigName: "quit", callback: (($obj: VpnServicePlugin) => void)): number
    connect_after(sigName: "quit", callback: (($obj: VpnServicePlugin) => void)): number
    emit(sigName: "quit"): void
    connect(sigName: "secrets-required", callback: (($obj: VpnServicePlugin, object: string, p0: string[]) => void)): number
    connect_after(sigName: "secrets-required", callback: (($obj: VpnServicePlugin, object: string, p0: string[]) => void)): number
    emit(sigName: "secrets-required", object: string, p0: string[]): void
    connect(sigName: "state-changed", callback: (($obj: VpnServicePlugin, object: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: VpnServicePlugin, object: number) => void)): number
    emit(sigName: "state-changed", object: number): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VpnServicePlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VpnServicePlugin, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::state", callback: (($obj: VpnServicePlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: VpnServicePlugin, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VpnServicePlugin_ConstructProps)
    _init (config?: VpnServicePlugin_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static get_secret_flags(data: GLib.HashTable, secret_name: string): [ /* returnType */ boolean, /* out_flags */ SettingSecretFlags ]
    static read_vpn_details(fd: number): [ /* returnType */ boolean, /* out_data */ GLib.HashTable, /* out_secrets */ GLib.HashTable ]
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
export interface WifiP2PPeer_ConstructProps extends Object_ConstructProps {
}
export class WifiP2PPeer {
    /* Properties of NM.WifiP2PPeer */
    readonly flags: TODO_80211ApFlags
    readonly hw_address: string
    readonly last_seen: number
    readonly manufacturer: string
    readonly model: string
    readonly model_number: string
    readonly name: string
    readonly serial: string
    readonly strength: number
    readonly wfd_ies: Gjs.byteArray.ByteArray
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.WifiP2PPeer */
    connection_valid(connection: Connection): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_flags(): TODO_80211ApFlags
    get_hw_address(): string
    get_last_seen(): number
    get_manufacturer(): string
    get_model(): string
    get_model_number(): string
    get_name(): string
    get_serial(): string
    get_strength(): number
    get_wfd_ies(): Gjs.byteArray.ByteArray
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::flags", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hw-address", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-seen", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-seen", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::manufacturer", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manufacturer", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::model", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::model-number", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model-number", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::serial", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serial", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::strength", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::strength", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::wfd-ies", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wfd-ies", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: WifiP2PPeer_ConstructProps)
    _init (config?: WifiP2PPeer_ConstructProps): void
    static $gtype: GObject.Type
}
export interface WimaxNsp_ConstructProps extends Object_ConstructProps {
}
export class WimaxNsp {
    /* Properties of NM.WimaxNsp */
    readonly name: string
    readonly network_type: WimaxNspNetworkType
    readonly signal_quality: number
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of NM.WimaxNsp */
    connection_valid(connection: Connection): boolean
    filter_connections(connections: Connection[]): Connection[]
    get_name(): string
    get_network_type(): WimaxNspNetworkType
    get_signal_quality(): number
    /* Methods of NM.Object */
    get_client(): Client
    get_path(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::network-type", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-type", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::signal-quality", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::signal-quality", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: WimaxNsp_ConstructProps)
    _init (config?: WimaxNsp_ConstructProps): void
    static $gtype: GObject.Type
}
export abstract class AccessPointClass {
    static name: string
}
export abstract class ActiveConnectionClass {
    static name: string
}
export class BridgeVlan {
    /* Methods of NM.BridgeVlan */
    cmp(b: BridgeVlan): number
    get_vid_range(): [ /* returnType */ boolean, /* vid_start */ number, /* vid_end */ number ]
    is_pvid(): boolean
    is_sealed(): boolean
    is_untagged(): boolean
    new_clone(): BridgeVlan
    ref(): BridgeVlan
    seal(): void
    set_pvid(value: boolean): void
    set_untagged(value: boolean): void
    to_str(): string
    unref(): void
    static name: string
    static new(vid_start: number, vid_end: number): BridgeVlan
    constructor(vid_start: number, vid_end: number)
    /* Static methods and pseudo-constructors */
    static new(vid_start: number, vid_end: number): BridgeVlan
    static from_str(str: string): BridgeVlan
}
export abstract class CheckpointClass {
    static name: string
}
export abstract class ClientClass {
    static name: string
}
export abstract class ConnectionInterface {
    /* Fields of NM.ConnectionInterface */
    parent: GObject.TypeInterface
    secrets_updated: any
    secrets_cleared: any
    changed: any
    static name: string
}
export abstract class Device6LowpanClass {
    static name: string
}
export abstract class DeviceAdslClass {
    static name: string
}
export abstract class DeviceBondClass {
    static name: string
}
export abstract class DeviceBridgeClass {
    static name: string
}
export abstract class DeviceBtClass {
    static name: string
}
export abstract class DeviceClass {
    static name: string
}
export abstract class DeviceDummyClass {
    static name: string
}
export abstract class DeviceEthernetClass {
    static name: string
}
export abstract class DeviceGenericClass {
    static name: string
}
export abstract class DeviceIPTunnelClass {
    static name: string
}
export abstract class DeviceInfinibandClass {
    static name: string
}
export abstract class DeviceMacsecClass {
    static name: string
}
export abstract class DeviceMacvlanClass {
    static name: string
}
export abstract class DeviceModemClass {
    static name: string
}
export abstract class DeviceOlpcMeshClass {
    static name: string
}
export abstract class DeviceOvsBridgeClass {
    static name: string
}
export abstract class DeviceOvsInterfaceClass {
    static name: string
}
export abstract class DeviceOvsPortClass {
    static name: string
}
export abstract class DevicePppClass {
    static name: string
}
export abstract class DeviceTeamClass {
    static name: string
}
export abstract class DeviceTunClass {
    static name: string
}
export abstract class DeviceVlanClass {
    static name: string
}
export abstract class DeviceVrfClass {
    static name: string
}
export abstract class DeviceVxlanClass {
    static name: string
}
export abstract class DeviceWifiClass {
    static name: string
}
export abstract class DeviceWifiP2PClass {
    static name: string
}
export abstract class DeviceWimaxClass {
    static name: string
}
export abstract class DeviceWireGuardClass {
    static name: string
}
export abstract class DeviceWpanClass {
    static name: string
}
export abstract class DhcpConfigClass {
    static name: string
}
export class DnsEntry {
    /* Methods of NM.DnsEntry */
    get_domains(): string[]
    get_interface(): string
    get_nameservers(): string[]
    get_priority(): number
    get_vpn(): boolean
    unref(): void
    static name: string
}
export class IPAddress {
    /* Methods of NM.IPAddress */
    cmp_full(b: IPAddress, cmp_flags: IPAddressCmpFlags): number
    dup(): IPAddress
    equal(other: IPAddress): boolean
    get_address(): string
    get_attribute(name: string): GLib.Variant
    get_attribute_names(): string[]
    get_family(): number
    get_prefix(): number
    ref(): void
    set_address(addr: string): void
    set_attribute(name: string, value?: GLib.Variant | null): void
    set_prefix(prefix: number): void
    unref(): void
    static name: string
    static new(family: number, addr: string, prefix: number): IPAddress
    constructor(family: number, addr: string, prefix: number)
    /* Static methods and pseudo-constructors */
    static new(family: number, addr: string, prefix: number): IPAddress
    static new_binary(family: number, addr: object | null, prefix: number): IPAddress
}
export abstract class IPConfigClass {
    static name: string
}
export class IPRoute {
    /* Methods of NM.IPRoute */
    dup(): IPRoute
    equal(other: IPRoute): boolean
    equal_full(other: IPRoute, cmp_flags: number): boolean
    get_attribute(name: string): GLib.Variant
    get_attribute_names(): string[]
    get_dest(): string
    get_family(): number
    get_metric(): number
    get_next_hop(): string
    get_prefix(): number
    ref(): void
    set_attribute(name: string, value?: GLib.Variant | null): void
    set_dest(dest: string): void
    set_metric(metric: number): void
    set_next_hop(next_hop?: string | null): void
    set_prefix(prefix: number): void
    unref(): void
    static name: string
    static new(family: number, dest: string, prefix: number, next_hop: string | null, metric: number): IPRoute
    constructor(family: number, dest: string, prefix: number, next_hop: string | null, metric: number)
    /* Static methods and pseudo-constructors */
    static new(family: number, dest: string, prefix: number, next_hop: string | null, metric: number): IPRoute
    static new_binary(family: number, dest: object | null, prefix: number, next_hop: object | null, metric: number): IPRoute
    static attribute_validate(name: string, value: GLib.Variant, family: number): [ /* returnType */ boolean, /* known */ boolean ]
    static get_variant_attribute_spec(): VariantAttributeSpec
}
export class IPRoutingRule {
    /* Methods of NM.IPRoutingRule */
    cmp(other?: IPRoutingRule | null): number
    get_action(): number
    get_addr_family(): number
    get_destination_port_end(): number
    get_destination_port_start(): number
    get_from(): string
    get_from_len(): number
    get_fwmark(): number
    get_fwmask(): number
    get_iifname(): string
    get_invert(): boolean
    get_ipproto(): number
    get_oifname(): string
    get_priority(): number
    get_source_port_end(): number
    get_source_port_start(): number
    get_suppress_prefixlength(): number
    get_table(): number
    get_to(): string
    get_to_len(): number
    get_tos(): number
    is_sealed(): boolean
    new_clone(): IPRoutingRule
    ref(): IPRoutingRule
    seal(): void
    set_action(action: number): void
    set_destination_port(start: number, end: number): void
    set_from(from: string | null, len: number): void
    set_fwmark(fwmark: number, fwmask: number): void
    set_iifname(iifname?: string | null): void
    set_invert(invert: boolean): void
    set_ipproto(ipproto: number): void
    set_oifname(oifname?: string | null): void
    set_priority(priority: number): void
    set_source_port(start: number, end: number): void
    set_suppress_prefixlength(suppress_prefixlength: number): void
    set_table(table: number): void
    set_to(to: string | null, len: number): void
    set_tos(tos: number): void
    to_string(to_string_flags: IPRoutingRuleAsStringFlags, extra_args?: GLib.HashTable | null): string
    unref(): void
    validate(): boolean
    static name: string
    static new(addr_family: number): IPRoutingRule
    constructor(addr_family: number)
    /* Static methods and pseudo-constructors */
    static new(addr_family: number): IPRoutingRule
    static from_string(str: string, to_string_flags: IPRoutingRuleAsStringFlags, extra_args?: GLib.HashTable | null): IPRoutingRule
}
export class LldpNeighbor {
    /* Methods of NM.LldpNeighbor */
    get_attr_names(): string[]
    get_attr_string_value(name: string): [ /* returnType */ boolean, /* out_value */ string | null ]
    get_attr_type(name: string): GLib.VariantType
    get_attr_uint_value(name: string): [ /* returnType */ boolean, /* out_value */ number | null ]
    get_attr_value(name: string): GLib.Variant
    ref(): void
    unref(): void
    static name: string
    static new(): LldpNeighbor
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): LldpNeighbor
}
export abstract class ObjectClass {
    static name: string
}
export abstract class RemoteConnectionClass {
    static name: string
}
export abstract class SecretAgentOldClass {
    /* Fields of NM.SecretAgentOldClass */
    parent: GObject.ObjectClass
    get_secrets: any
    cancel_get_secrets: any
    save_secrets: any
    delete_secrets: any
    static name: string
}
export abstract class Setting6LowpanClass {
    static name: string
}
export abstract class Setting8021xClass {
    /* Fields of NM.Setting8021xClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingAdslClass {
    /* Fields of NM.SettingAdslClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingBluetoothClass {
    /* Fields of NM.SettingBluetoothClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingBondClass {
    /* Fields of NM.SettingBondClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingBridgeClass {
    static name: string
}
export abstract class SettingBridgePortClass {
    /* Fields of NM.SettingBridgePortClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingCdmaClass {
    /* Fields of NM.SettingCdmaClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingClass {
    /* Fields of NM.SettingClass */
    parent: GObject.ObjectClass
    verify: any
    verify_secrets: any
    update_one_secret: any
    get_secret_flags: any
    set_secret_flags: any
    compare_property: any
    duplicate_copy_properties: any
    aggregate: any
    init_from_dbus: any
    setting_info: object
    static name: string
}
export abstract class SettingConnectionClass {
    /* Fields of NM.SettingConnectionClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingDcbClass {
    /* Fields of NM.SettingDcbClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingDummyClass {
    /* Fields of NM.SettingDummyClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingEthtoolClass {
    static name: string
}
export abstract class SettingGenericClass {
    /* Fields of NM.SettingGenericClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingGsmClass {
    /* Fields of NM.SettingGsmClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingIP4ConfigClass {
    /* Fields of NM.SettingIP4ConfigClass */
    parent: SettingIPConfigClass
    static name: string
}
export abstract class SettingIP6ConfigClass {
    /* Fields of NM.SettingIP6ConfigClass */
    parent: SettingIPConfigClass
    static name: string
}
export abstract class SettingIPConfigClass {
    /* Fields of NM.SettingIPConfigClass */
    parent: SettingClass
    padding: object[]
    static name: string
}
export abstract class SettingIPTunnelClass {
    /* Fields of NM.SettingIPTunnelClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingInfinibandClass {
    /* Fields of NM.SettingInfinibandClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingMacsecClass {
    /* Fields of NM.SettingMacsecClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingMacvlanClass {
    /* Fields of NM.SettingMacvlanClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingMatchClass {
    static name: string
}
export abstract class SettingOlpcMeshClass {
    /* Fields of NM.SettingOlpcMeshClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingOvsBridgeClass {
    static name: string
}
export abstract class SettingOvsDpdkClass {
    static name: string
}
export abstract class SettingOvsInterfaceClass {
    static name: string
}
export abstract class SettingOvsPatchClass {
    static name: string
}
export abstract class SettingOvsPortClass {
    static name: string
}
export abstract class SettingPppClass {
    /* Fields of NM.SettingPppClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingPppoeClass {
    /* Fields of NM.SettingPppoeClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingProxyClass {
    /* Fields of NM.SettingProxyClass */
    parent: SettingClass
    padding: object[]
    static name: string
}
export abstract class SettingSerialClass {
    /* Fields of NM.SettingSerialClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingSriovClass {
    static name: string
}
export abstract class SettingTCConfigClass {
    static name: string
}
export abstract class SettingTeamClass {
    /* Fields of NM.SettingTeamClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingTeamPortClass {
    /* Fields of NM.SettingTeamPortClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingTunClass {
    /* Fields of NM.SettingTunClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingUserClass {
    static name: string
}
export abstract class SettingVlanClass {
    /* Fields of NM.SettingVlanClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingVpnClass {
    /* Fields of NM.SettingVpnClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingVrfClass {
    static name: string
}
export abstract class SettingVxlanClass {
    /* Fields of NM.SettingVxlanClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWifiP2PClass {
    static name: string
}
export abstract class SettingWimaxClass {
    /* Fields of NM.SettingWimaxClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWireGuardClass {
    static name: string
}
export abstract class SettingWiredClass {
    /* Fields of NM.SettingWiredClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWirelessClass {
    /* Fields of NM.SettingWirelessClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWirelessSecurityClass {
    /* Fields of NM.SettingWirelessSecurityClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWpanClass {
    static name: string
}
export abstract class SimpleConnectionClass {
    /* Fields of NM.SimpleConnectionClass */
    parent_class: GObject.ObjectClass
    static name: string
}
export class SriovVF {
    /* Methods of NM.SriovVF */
    add_vlan(vlan_id: number): boolean
    dup(): SriovVF
    equal(other: SriovVF): boolean
    get_attribute(name: string): GLib.Variant
    get_attribute_names(): string[]
    get_index(): number
    get_vlan_ids(): number[]
    get_vlan_protocol(vlan_id: number): SriovVFVlanProtocol
    get_vlan_qos(vlan_id: number): number
    ref(): void
    remove_vlan(vlan_id: number): boolean
    set_attribute(name: string, value?: GLib.Variant | null): void
    set_vlan_protocol(vlan_id: number, protocol: SriovVFVlanProtocol): void
    set_vlan_qos(vlan_id: number, qos: number): void
    unref(): void
    static name: string
    static new(index: number): SriovVF
    constructor(index: number)
    /* Static methods and pseudo-constructors */
    static new(index: number): SriovVF
    static attribute_validate(name: string, value: GLib.Variant): [ /* returnType */ boolean, /* known */ boolean ]
}
export class TCAction {
    /* Methods of NM.TCAction */
    dup(): TCAction
    equal(other: TCAction): boolean
    get_attribute(name: string): GLib.Variant
    get_attribute_names(): string[]
    get_kind(): string
    ref(): void
    set_attribute(name: string, value?: GLib.Variant | null): void
    unref(): void
    static name: string
    static new(kind: string): TCAction
    constructor(kind: string)
    /* Static methods and pseudo-constructors */
    static new(kind: string): TCAction
}
export class TCQdisc {
    /* Methods of NM.TCQdisc */
    dup(): TCQdisc
    equal(other: TCQdisc): boolean
    get_attribute(name: string): GLib.Variant
    get_attribute_names(): string[]
    get_handle(): number
    get_kind(): string
    get_parent(): number
    ref(): void
    set_attribute(name: string, value?: GLib.Variant | null): void
    set_handle(handle: number): void
    unref(): void
    static name: string
    static new(kind: string, parent: number): TCQdisc
    constructor(kind: string, parent: number)
    /* Static methods and pseudo-constructors */
    static new(kind: string, parent: number): TCQdisc
}
export class TCTfilter {
    /* Methods of NM.TCTfilter */
    dup(): TCTfilter
    equal(other: TCTfilter): boolean
    get_action(): TCAction
    get_handle(): number
    get_kind(): string
    get_parent(): number
    ref(): void
    set_action(action: TCAction): void
    set_handle(handle: number): void
    unref(): void
    static name: string
    static new(kind: string, parent: number): TCTfilter
    constructor(kind: string, parent: number)
    /* Static methods and pseudo-constructors */
    static new(kind: string, parent: number): TCTfilter
}
export class TeamLinkWatcher {
    /* Methods of NM.TeamLinkWatcher */
    dup(): TeamLinkWatcher
    equal(other: TeamLinkWatcher): boolean
    get_delay_down(): number
    get_delay_up(): number
    get_flags(): TeamLinkWatcherArpPingFlags
    get_init_wait(): number
    get_interval(): number
    get_missed_max(): number
    get_name(): string
    get_source_host(): string
    get_target_host(): string
    get_vlanid(): number
    ref(): void
    unref(): void
    static name: string
    /* Static methods and pseudo-constructors */
    static new_arp_ping(init_wait: number, interval: number, missed_max: number, target_host: string, source_host: string, flags: TeamLinkWatcherArpPingFlags): TeamLinkWatcher
    static new_arp_ping2(init_wait: number, interval: number, missed_max: number, vlanid: number, target_host: string, source_host: string, flags: TeamLinkWatcherArpPingFlags): TeamLinkWatcher
    static new_ethtool(delay_up: number, delay_down: number): TeamLinkWatcher
    static new_nsna_ping(init_wait: number, interval: number, missed_max: number, target_host: string): TeamLinkWatcher
}
export class VariantAttributeSpec {
    static name: string
}
export abstract class VpnConnectionClass {
    static name: string
}
export abstract class VpnEditorInterface {
    /* Fields of NM.VpnEditorInterface */
    g_iface: GObject.TypeInterface
    get_widget: any
    placeholder: any
    update_connection: any
    changed: any
    static name: string
}
export abstract class VpnEditorPluginInterface {
    /* Fields of NM.VpnEditorPluginInterface */
    g_iface: GObject.TypeInterface
    get_editor: any
    get_capabilities: any
    export_to_file: any
    get_suggested_filename: any
    notify_plugin_info_set: any
    get_vt: any
    static name: string
}
export class VpnEditorPluginVT {
    static name: string
}
export abstract class VpnPluginInfoClass {
    static name: string
}
export abstract class VpnPluginOldClass {
    /* Fields of NM.VpnPluginOldClass */
    parent: GObject.ObjectClass
    state_changed: any
    ip4_config: any
    login_banner: any
    failure: any
    quit: any
    config: any
    ip6_config: any
    connect: any
    need_secrets: any
    disconnect: any
    new_secrets: any
    connect_interactive: any
    static name: string
}
export abstract class VpnServicePluginClass {
    /* Fields of NM.VpnServicePluginClass */
    parent: GObject.ObjectClass
    state_changed: any
    ip4_config: any
    login_banner: any
    failure: any
    quit: any
    config: any
    ip6_config: any
    connect: any
    need_secrets: any
    disconnect: any
    new_secrets: any
    connect_interactive: any
    static name: string
}
export abstract class WifiP2PPeerClass {
    static name: string
}
export abstract class WimaxNspClass {
    static name: string
}
export class WireGuardPeer {
    /* Methods of NM.WireGuardPeer */
    append_allowed_ip(allowed_ip: string, accept_invalid: boolean): boolean
    clear_allowed_ips(): void
    cmp(b: WireGuardPeer | null, compare_flags: SettingCompareFlags): number
    get_allowed_ip(idx: number, out_is_valid?: boolean | null): string
    get_allowed_ips_len(): number
    get_endpoint(): string
    get_persistent_keepalive(): number
    get_preshared_key(): string
    get_preshared_key_flags(): SettingSecretFlags
    get_public_key(): string
    is_sealed(): boolean
    is_valid(check_non_secrets: boolean, check_secrets: boolean): boolean
    new_clone(with_secrets: boolean): WireGuardPeer
    ref(): WireGuardPeer
    remove_allowed_ip(idx: number): boolean
    seal(): void
    set_endpoint(endpoint: string, allow_invalid: boolean): boolean
    set_persistent_keepalive(persistent_keepalive: number): void
    set_preshared_key(preshared_key: string | null, accept_invalid: boolean): boolean
    set_preshared_key_flags(preshared_key_flags: SettingSecretFlags): void
    set_public_key(public_key: string | null, accept_invalid: boolean): boolean
    unref(): void
    static name: string
    static new(): WireGuardPeer
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): WireGuardPeer
}